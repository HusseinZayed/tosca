    lexer grammar  CrsxMetaLexer ;        MT_crsx :         META_CHAR      'crsx'     [0-9]   *    ;     ET_crsx :         START_EMBED_CHAR      'crsx:'     ->    pushMode (   Embed )   ;     MT_declarations :         META_CHAR      'declarations'     [0-9]   *    ;     ET_declarations :         START_EMBED_CHAR      'declarations:'     ->    pushMode (   Embed )   ;     MT_declarations_S1_ZOM :         META_CHAR      'declarations_S1*'     [0-9]   *    ;     ET_declarations_S1_ZOM :         START_EMBED_CHAR      'declarations_S1*:'     ->    pushMode (   Embed )   ;     MT_declarations_S1 :         META_CHAR      'declarations_S1'     [0-9]   *    ;     ET_declarations_S1 :         START_EMBED_CHAR      'declarations_S1:'     ->    pushMode (   Embed )   ;     MT_semi_TOK :         META_CHAR      'SEMI'     [0-9]   *    ;     ET_semi_TOK :         START_EMBED_CHAR      'SEMI:'     ->    pushMode (   Embed )   ;     MT_declaration_OPT :         META_CHAR      'declaration?'     [0-9]   *    ;     ET_declaration_OPT :         START_EMBED_CHAR      'declaration?:'     ->    pushMode (   Embed )   ;     MT_declaration :         META_CHAR      'declaration'     [0-9]   *    ;     ET_declaration :         START_EMBED_CHAR      'declaration:'     ->    pushMode (   Embed )   ;     MT_moduleDeclaration :         META_CHAR      'moduleDeclaration'     [0-9]   *    ;     ET_moduleDeclaration :         START_EMBED_CHAR      'moduleDeclaration:'     ->    pushMode (   Embed )   ;     MT_module_TOK :         META_CHAR      'MODULE'     [0-9]   *    ;     ET_module_TOK :         START_EMBED_CHAR      'MODULE:'     ->    pushMode (   Embed )   ;     MT_constructor_TOK :         META_CHAR      'CONSTRUCTOR'     [0-9]   *    ;     ET_constructor_TOK :         START_EMBED_CHAR      'CONSTRUCTOR:'     ->    pushMode (   Embed )   ;     MT_lbrace_TOK :         META_CHAR      'LBRACE'     [0-9]   *    ;     ET_lbrace_TOK :         START_EMBED_CHAR      'LBRACE:'     ->    pushMode (   Embed )   ;     MT_rbrace_TOK :         META_CHAR      'RBRACE'     [0-9]   *    ;     ET_rbrace_TOK :         START_EMBED_CHAR      'RBRACE:'     ->    pushMode (   Embed )   ;     MT_ruleDeclaration :         META_CHAR      'ruleDeclaration'     [0-9]   *    ;     ET_ruleDeclaration :         START_EMBED_CHAR      'ruleDeclaration:'     ->    pushMode (   Embed )   ;     MT_option_OPT :         META_CHAR      'option?'     [0-9]   *    ;     ET_option_OPT :         START_EMBED_CHAR      'option?:'     ->    pushMode (   Embed )   ;     MT_arrow_TOK :         META_CHAR      'ARROW'     [0-9]   *    ;     ET_arrow_TOK :         START_EMBED_CHAR      'ARROW:'     ->    pushMode (   Embed )   ;     MT_option :         META_CHAR      'option'     [0-9]   *    ;     ET_option :         START_EMBED_CHAR      'option:'     ->    pushMode (   Embed )   ;     MT_arguments_OPT :         META_CHAR      'arguments?'     [0-9]   *    ;     ET_arguments_OPT :         START_EMBED_CHAR      'arguments?:'     ->    pushMode (   Embed )   ;     MT_colon_TOK :         META_CHAR      'COLON'     [0-9]   *    ;     ET_colon_TOK :         START_EMBED_CHAR      'COLON:'     ->    pushMode (   Embed )   ;     MT_pattern :         META_CHAR      'pattern'     [0-9]   *    ;     ET_pattern :         START_EMBED_CHAR      'pattern:'     ->    pushMode (   Embed )   ;     MT_properties_OPT :         META_CHAR      'properties?'     [0-9]   *    ;     ET_properties_OPT :         START_EMBED_CHAR      'properties?:'     ->    pushMode (   Embed )   ;     MT_contractum :         META_CHAR      'contractum'     [0-9]   *    ;     ET_contractum :         START_EMBED_CHAR      'contractum:'     ->    pushMode (   Embed )   ;     MT_annotations :         META_CHAR      'annotations'     [0-9]   *    ;     ET_annotations :         START_EMBED_CHAR      'annotations:'     ->    pushMode (   Embed )   ;     MT_annotation_OOM :         META_CHAR      'annotation+'     [0-9]   *    ;     ET_annotation_OOM :         START_EMBED_CHAR      'annotation+:'     ->    pushMode (   Embed )   ;     MT_annotation :         META_CHAR      'annotation'     [0-9]   *    ;     ET_annotation :         START_EMBED_CHAR      'annotation:'     ->    pushMode (   Embed )   ;     MT_at_TOK :         META_CHAR      'AT'     [0-9]   *    ;     ET_at_TOK :         START_EMBED_CHAR      'AT:'     ->    pushMode (   Embed )   ;     MT_term :         META_CHAR      'term'     [0-9]   *    ;     ET_term :         START_EMBED_CHAR      'term:'     ->    pushMode (   Embed )   ;     MT_freeTerm :         META_CHAR      'freeTerm'     [0-9]   *    ;     ET_freeTerm :         START_EMBED_CHAR      'freeTerm:'     ->    pushMode (   Embed )   ;     MT_annotations_OPT :         META_CHAR      'annotations?'     [0-9]   *    ;     ET_annotations_OPT :         START_EMBED_CHAR      'annotations?:'     ->    pushMode (   Embed )   ;     MT_metavar_TOK :         META_CHAR      'METAVAR'     [0-9]   *    ;     ET_metavar_TOK :         START_EMBED_CHAR      'METAVAR:'     ->    pushMode (   Embed )   ;     MT_freeArguments_OPT :         META_CHAR      'freeArguments?'     [0-9]   *    ;     ET_freeArguments_OPT :         START_EMBED_CHAR      'freeArguments?:'     ->    pushMode (   Embed )   ;     MT_boundTerm :         META_CHAR      'boundTerm'     [0-9]   *    ;     ET_boundTerm :         START_EMBED_CHAR      'boundTerm:'     ->    pushMode (   Embed )   ;     MT_nextBinder :         META_CHAR      'nextBinder'     [0-9]   *    ;     ET_nextBinder :         START_EMBED_CHAR      'nextBinder:'     ->    pushMode (   Embed )   ;     MT_dot_TOK :         META_CHAR      'DOT'     [0-9]   *    ;     ET_dot_TOK :         START_EMBED_CHAR      'DOT:'     ->    pushMode (   Embed )   ;     MT_arguments :         META_CHAR      'arguments'     [0-9]   *    ;     ET_arguments :         START_EMBED_CHAR      'arguments:'     ->    pushMode (   Embed )   ;     MT_lsquare_TOK :         META_CHAR      'LSQUARE'     [0-9]   *    ;     ET_lsquare_TOK :         START_EMBED_CHAR      'LSQUARE:'     ->    pushMode (   Embed )   ;     MT_terms_OPT :         META_CHAR      'terms?'     [0-9]   *    ;     ET_terms_OPT :         START_EMBED_CHAR      'terms?:'     ->    pushMode (   Embed )   ;     MT_rsquare_TOK :         META_CHAR      'RSQUARE'     [0-9]   *    ;     ET_rsquare_TOK :         START_EMBED_CHAR      'RSQUARE:'     ->    pushMode (   Embed )   ;     MT_terms :         META_CHAR      'terms'     [0-9]   *    ;     ET_terms :         START_EMBED_CHAR      'terms:'     ->    pushMode (   Embed )   ;     MT_terms_S1_ZOM :         META_CHAR      'terms_S1*'     [0-9]   *    ;     ET_terms_S1_ZOM :         START_EMBED_CHAR      'terms_S1*:'     ->    pushMode (   Embed )   ;     MT_terms_S1 :         META_CHAR      'terms_S1'     [0-9]   *    ;     ET_terms_S1 :         START_EMBED_CHAR      'terms_S1:'     ->    pushMode (   Embed )   ;     MT_comma_TOK :         META_CHAR      'COMMA'     [0-9]   *    ;     ET_comma_TOK :         START_EMBED_CHAR      'COMMA:'     ->    pushMode (   Embed )   ;     MT_freeArguments :         META_CHAR      'freeArguments'     [0-9]   *    ;     ET_freeArguments :         START_EMBED_CHAR      'freeArguments:'     ->    pushMode (   Embed )   ;     MT_freeTerms_OPT :         META_CHAR      'freeTerms?'     [0-9]   *    ;     ET_freeTerms_OPT :         START_EMBED_CHAR      'freeTerms?:'     ->    pushMode (   Embed )   ;     MT_freeTerms :         META_CHAR      'freeTerms'     [0-9]   *    ;     ET_freeTerms :         START_EMBED_CHAR      'freeTerms:'     ->    pushMode (   Embed )   ;     MT_freeTerms_S1_ZOM :         META_CHAR      'freeTerms_S1*'     [0-9]   *    ;     ET_freeTerms_S1_ZOM :         START_EMBED_CHAR      'freeTerms_S1*:'     ->    pushMode (   Embed )   ;     MT_freeTerms_S1 :         META_CHAR      'freeTerms_S1'     [0-9]   *    ;     ET_freeTerms_S1 :         START_EMBED_CHAR      'freeTerms_S1:'     ->    pushMode (   Embed )   ;     MT_list :         META_CHAR      'list'     [0-9]   *    ;     ET_list :         START_EMBED_CHAR      'list:'     ->    pushMode (   Embed )   ;     MT_lpar_TOK :         META_CHAR      'LPAR'     [0-9]   *    ;     ET_lpar_TOK :         START_EMBED_CHAR      'LPAR:'     ->    pushMode (   Embed )   ;     MT_termList_OPT :         META_CHAR      'termList?'     [0-9]   *    ;     ET_termList_OPT :         START_EMBED_CHAR      'termList?:'     ->    pushMode (   Embed )   ;     MT_rpar_TOK :         META_CHAR      'RPAR'     [0-9]   *    ;     ET_rpar_TOK :         START_EMBED_CHAR      'RPAR:'     ->    pushMode (   Embed )   ;     MT_termList :         META_CHAR      'termList'     [0-9]   *    ;     ET_termList :         START_EMBED_CHAR      'termList:'     ->    pushMode (   Embed )   ;     MT_termList_S1_ZOM :         META_CHAR      'termList_S1*'     [0-9]   *    ;     ET_termList_S1_ZOM :         START_EMBED_CHAR      'termList_S1*:'     ->    pushMode (   Embed )   ;     MT_termList_S1 :         META_CHAR      'termList_S1'     [0-9]   *    ;     ET_termList_S1 :         START_EMBED_CHAR      'termList_S1:'     ->    pushMode (   Embed )   ;     MT_term_OPT :         META_CHAR      'term?'     [0-9]   *    ;     ET_term_OPT :         START_EMBED_CHAR      'term?:'     ->    pushMode (   Embed )   ;     MT_variable :         META_CHAR      'variable'     [0-9]   *    ;     ET_variable :         START_EMBED_CHAR      'variable:'     ->    pushMode (   Embed )   ;     MT_variable_TOK :         META_CHAR      'VARIABLE'     [0-9]   *    ;     ET_variable_TOK :         START_EMBED_CHAR      'VARIABLE:'     ->    pushMode (   Embed )   ;     MT_linear_OPT :         META_CHAR      'linear?'     [0-9]   *    ;     ET_linear_OPT :         START_EMBED_CHAR      'linear?:'     ->    pushMode (   Embed )   ;     MT_functional_OPT :         META_CHAR      'functional?'     [0-9]   *    ;     ET_functional_OPT :         START_EMBED_CHAR      'functional?:'     ->    pushMode (   Embed )   ;     MT_varsort_OPT :         META_CHAR      'varsort?'     [0-9]   *    ;     ET_varsort_OPT :         START_EMBED_CHAR      'varsort?:'     ->    pushMode (   Embed )   ;     MT_linear :         META_CHAR      'linear'     [0-9]   *    ;     ET_linear :         START_EMBED_CHAR      'linear:'     ->    pushMode (   Embed )   ;     MT_linear_TOK :         META_CHAR      'LINEAR'     [0-9]   *    ;     ET_linear_TOK :         START_EMBED_CHAR      'LINEAR:'     ->    pushMode (   Embed )   ;     MT_functional :         META_CHAR      'functional'     [0-9]   *    ;     ET_functional :         START_EMBED_CHAR      'functional:'     ->    pushMode (   Embed )   ;     MT_functional_TOK :         META_CHAR      'FUNCTIONAL'     [0-9]   *    ;     ET_functional_TOK :         START_EMBED_CHAR      'FUNCTIONAL:'     ->    pushMode (   Embed )   ;     MT_literal :         META_CHAR      'literal'     [0-9]   *    ;     ET_literal :         START_EMBED_CHAR      'literal:'     ->    pushMode (   Embed )   ;     MT_string_TOK :         META_CHAR      'STRING'     [0-9]   *    ;     ET_string_TOK :         START_EMBED_CHAR      'STRING:'     ->    pushMode (   Embed )   ;     MT_number_TOK :         META_CHAR      'NUMBER'     [0-9]   *    ;     ET_number_TOK :         START_EMBED_CHAR      'NUMBER:'     ->    pushMode (   Embed )   ;     MT_binder :         META_CHAR      'binder'     [0-9]   *    ;     ET_binder :         START_EMBED_CHAR      'binder:'     ->    pushMode (   Embed )   ;     MT_varsort :         META_CHAR      'varsort'     [0-9]   *    ;     ET_varsort :         START_EMBED_CHAR      'varsort:'     ->    pushMode (   Embed )   ;     MT_coloncolon_TOK :         META_CHAR      'COLONCOLON'     [0-9]   *    ;     ET_coloncolon_TOK :         START_EMBED_CHAR      'COLONCOLON:'     ->    pushMode (   Embed )   ;     MT_concrete :         META_CHAR      'concrete'     [0-9]   *    ;     ET_concrete :         START_EMBED_CHAR      'concrete:'     ->    pushMode (   Embed )   ;     MT_category_TOK :         META_CHAR      'CATEGORY'     [0-9]   *    ;     ET_category_TOK :         START_EMBED_CHAR      'CATEGORY:'     ->    pushMode (   Embed )   ;     MT_concrete_TOK :         META_CHAR      'CONCRETE'     [0-9]   *    ;     ET_concrete_TOK :         START_EMBED_CHAR      'CONCRETE:'     ->    pushMode (   Embed )   ;     MT_concrete2_TOK :         META_CHAR      'CONCRETE2'     [0-9]   *    ;     ET_concrete2_TOK :         START_EMBED_CHAR      'CONCRETE2:'     ->    pushMode (   Embed )   ;     MT_concrete3_TOK :         META_CHAR      'CONCRETE3'     [0-9]   *    ;     ET_concrete3_TOK :         START_EMBED_CHAR      'CONCRETE3:'     ->    pushMode (   Embed )   ;     MT_concrete4_TOK :         META_CHAR      'CONCRETE4'     [0-9]   *    ;     ET_concrete4_TOK :         START_EMBED_CHAR      'CONCRETE4:'     ->    pushMode (   Embed )   ;     MT_dispatch :         META_CHAR      'dispatch'     [0-9]   *    ;     ET_dispatch :         START_EMBED_CHAR      'dispatch:'     ->    pushMode (   Embed )   ;     MT_dispatch_TOK :         META_CHAR      'DISPATCH'     [0-9]   *    ;     ET_dispatch_TOK :         START_EMBED_CHAR      'DISPATCH:'     ->    pushMode (   Embed )   ;     MT_delayCase_OPT :         META_CHAR      'delayCase?'     [0-9]   *    ;     ET_delayCase_OPT :         START_EMBED_CHAR      'delayCase?:'     ->    pushMode (   Embed )   ;     MT_dispatchTerm :         META_CHAR      'dispatchTerm'     [0-9]   *    ;     ET_dispatchTerm :         START_EMBED_CHAR      'dispatchTerm:'     ->    pushMode (   Embed )   ;     MT_dispatchCases :         META_CHAR      'dispatchCases'     [0-9]   *    ;     ET_dispatchCases :         START_EMBED_CHAR      'dispatchCases:'     ->    pushMode (   Embed )   ;     MT_dispatchCases_S1_ZOM :         META_CHAR      'dispatchCases_S1*'     [0-9]   *    ;     ET_dispatchCases_S1_ZOM :         START_EMBED_CHAR      'dispatchCases_S1*:'     ->    pushMode (   Embed )   ;     MT_dispatchCases_S1 :         META_CHAR      'dispatchCases_S1'     [0-9]   *    ;     ET_dispatchCases_S1 :         START_EMBED_CHAR      'dispatchCases_S1:'     ->    pushMode (   Embed )   ;     MT_dispatchCase :         META_CHAR      'dispatchCase'     [0-9]   *    ;     ET_dispatchCase :         START_EMBED_CHAR      'dispatchCase:'     ->    pushMode (   Embed )   ;     MT_delayCase :         META_CHAR      'delayCase'     [0-9]   *    ;     ET_delayCase :         START_EMBED_CHAR      'delayCase:'     ->    pushMode (   Embed )   ;     MT_delay_TOK :         META_CHAR      'DELAY'     [0-9]   *    ;     ET_delay_TOK :         START_EMBED_CHAR      'DELAY:'     ->    pushMode (   Embed )   ;     MT_properties :         META_CHAR      'properties'     [0-9]   *    ;     ET_properties :         START_EMBED_CHAR      'properties:'     ->    pushMode (   Embed )   ;     MT_propertyList_OPT :         META_CHAR      'propertyList?'     [0-9]   *    ;     ET_propertyList_OPT :         START_EMBED_CHAR      'propertyList?:'     ->    pushMode (   Embed )   ;     MT_propertyList :         META_CHAR      'propertyList'     [0-9]   *    ;     ET_propertyList :         START_EMBED_CHAR      'propertyList:'     ->    pushMode (   Embed )   ;     MT_propertyList_S1_ZOM :         META_CHAR      'propertyList_S1*'     [0-9]   *    ;     ET_propertyList_S1_ZOM :         START_EMBED_CHAR      'propertyList_S1*:'     ->    pushMode (   Embed )   ;     MT_propertyList_S1 :         META_CHAR      'propertyList_S1'     [0-9]   *    ;     ET_propertyList_S1 :         START_EMBED_CHAR      'propertyList_S1:'     ->    pushMode (   Embed )   ;     MT_property_OPT :         META_CHAR      'property?'     [0-9]   *    ;     ET_property_OPT :         START_EMBED_CHAR      'property?:'     ->    pushMode (   Embed )   ;     MT_property :         META_CHAR      'property'     [0-9]   *    ;     ET_property :         START_EMBED_CHAR      'property:'     ->    pushMode (   Embed )   ;     MT_not_TOK :         META_CHAR      'NOT'     [0-9]   *    ;     ET_not_TOK :         START_EMBED_CHAR      'NOT:'     ->    pushMode (   Embed )   ;     MT_expression :         META_CHAR      'expression'     [0-9]   *    ;     ET_expression :         START_EMBED_CHAR      'expression:'     ->    pushMode (   Embed )   ;     MT_sortDeclaration :         META_CHAR      'sortDeclaration'     [0-9]   *    ;     ET_sortDeclaration :         START_EMBED_CHAR      'sortDeclaration:'     ->    pushMode (   Embed )   ;     MT_sortparams_OPT :         META_CHAR      'sortparams?'     [0-9]   *    ;     ET_sortparams_OPT :         START_EMBED_CHAR      'sortparams?:'     ->    pushMode (   Embed )   ;     MT_datasort_TOK :         META_CHAR      'DATASORT'     [0-9]   *    ;     ET_datasort_TOK :         START_EMBED_CHAR      'DATASORT:'     ->    pushMode (   Embed )   ;     MT_sortparams :         META_CHAR      'sortparams'     [0-9]   *    ;     ET_sortparams :         START_EMBED_CHAR      'sortparams:'     ->    pushMode (   Embed )   ;     MT_forall_TOK :         META_CHAR      'FORALL'     [0-9]   *    ;     ET_forall_TOK :         START_EMBED_CHAR      'FORALL:'     ->    pushMode (   Embed )   ;     MT_variable_OOM :         META_CHAR      'variable+'     [0-9]   *    ;     ET_variable_OOM :         START_EMBED_CHAR      'variable+:'     ->    pushMode (   Embed )   ;     MT_sortset :         META_CHAR      'sortset'     [0-9]   *    ;     ET_sortset :         START_EMBED_CHAR      'sortset:'     ->    pushMode (   Embed )   ;     MT_sortnames :         META_CHAR      'sortnames'     [0-9]   *    ;     ET_sortnames :         START_EMBED_CHAR      'sortnames:'     ->    pushMode (   Embed )   ;     MT_sortnames_S1_ZOM :         META_CHAR      'sortnames_S1*'     [0-9]   *    ;     ET_sortnames_S1_ZOM :         START_EMBED_CHAR      'sortnames_S1*:'     ->    pushMode (   Embed )   ;     MT_sortnames_S1 :         META_CHAR      'sortnames_S1'     [0-9]   *    ;     ET_sortnames_S1 :         START_EMBED_CHAR      'sortnames_S1:'     ->    pushMode (   Embed )   ;     MT_sortname :         META_CHAR      'sortname'     [0-9]   *    ;     ET_sortname :         START_EMBED_CHAR      'sortname:'     ->    pushMode (   Embed )   ;     MT_sortarguments_OPT :         META_CHAR      'sortarguments?'     [0-9]   *    ;     ET_sortarguments_OPT :         START_EMBED_CHAR      'sortarguments?:'     ->    pushMode (   Embed )   ;     MT_sortarguments :         META_CHAR      'sortarguments'     [0-9]   *    ;     ET_sortarguments :         START_EMBED_CHAR      'sortarguments:'     ->    pushMode (   Embed )   ;     MT_sortnames_OPT :         META_CHAR      'sortnames?'     [0-9]   *    ;     ET_sortnames_OPT :         START_EMBED_CHAR      'sortnames?:'     ->    pushMode (   Embed )   ;     MT_forms :         META_CHAR      'forms'     [0-9]   *    ;     ET_forms :         START_EMBED_CHAR      'forms:'     ->    pushMode (   Embed )   ;     MT_forms_S1_ZOM :         META_CHAR      'forms_S1*'     [0-9]   *    ;     ET_forms_S1_ZOM :         START_EMBED_CHAR      'forms_S1*:'     ->    pushMode (   Embed )   ;     MT_forms_S1 :         META_CHAR      'forms_S1'     [0-9]   *    ;     ET_forms_S1 :         START_EMBED_CHAR      'forms_S1:'     ->    pushMode (   Embed )   ;     MT_form :         META_CHAR      'form'     [0-9]   *    ;     ET_form :         START_EMBED_CHAR      'form:'     ->    pushMode (   Embed )   ;     MT_constructor :         META_CHAR      'constructor'     [0-9]   *    ;     ET_constructor :         START_EMBED_CHAR      'constructor:'     ->    pushMode (   Embed )   ;     MT_qualifier :         META_CHAR      'qualifier'     [0-9]   *    ;     ET_qualifier :         START_EMBED_CHAR      'qualifier:'     ->    pushMode (   Embed )   ;     MT_reserved :         META_CHAR      'reserved'     [0-9]   *    ;     ET_reserved :         START_EMBED_CHAR      'reserved:'     ->    pushMode (   Embed )   ;     MT_directive :         META_CHAR      'directive'     [0-9]   *    ;     ET_directive :         START_EMBED_CHAR      'directive:'     ->    pushMode (   Embed )   ;     MT_directiveArguments_OPT :         META_CHAR      'directiveArguments?'     [0-9]   *    ;     ET_directiveArguments_OPT :         START_EMBED_CHAR      'directiveArguments?:'     ->    pushMode (   Embed )   ;     MT_directiveArguments :         META_CHAR      'directiveArguments'     [0-9]   *    ;     ET_directiveArguments :         START_EMBED_CHAR      'directiveArguments:'     ->    pushMode (   Embed )   ;     MT_directives_OPT :         META_CHAR      'directives?'     [0-9]   *    ;     ET_directives_OPT :         START_EMBED_CHAR      'directives?:'     ->    pushMode (   Embed )   ;     MT_directives :         META_CHAR      'directives'     [0-9]   *    ;     ET_directives :         START_EMBED_CHAR      'directives:'     ->    pushMode (   Embed )   ;     MT_directives_S1_ZOM :         META_CHAR      'directives_S1*'     [0-9]   *    ;     ET_directives_S1_ZOM :         START_EMBED_CHAR      'directives_S1*:'     ->    pushMode (   Embed )   ;     MT_directives_S1 :         META_CHAR      'directives_S1'     [0-9]   *    ;     ET_directives_S1 :         START_EMBED_CHAR      'directives_S1:'     ->    pushMode (   Embed )   ;     MT_directiveList :         META_CHAR      'directiveList'     [0-9]   *    ;     ET_directiveList :         START_EMBED_CHAR      'directiveList:'     ->    pushMode (   Embed )   ;     MT_declarations_OPT :         META_CHAR      'declarations?'     [0-9]   *    ;     ET_declarations_OPT :         START_EMBED_CHAR      'declarations?:'     ->    pushMode (   Embed )   ;     MODULE :         'module'     ;     DISPATCH :         'dispatch'     ;     DELAY :         'delay'     ;     COLON :         ':'     ;     ARROW :         '→'     ;     FORALL :         '∀'     ;     LPAR :         '('     ;     RPAR :         ')'     ;     LBRACE :         '{'     ;     RBRACE :         '}'     ;     LSQUARE :         '['     ;     RSQUARE :         ']'     ;     SEMI :         ';'     ;     COMMA :         ','     ;     DATASORT :         '::='     ;     COLONCOLON :         '::'     ;     DOT :         '.'     ;     NOT :         '¬'     ;     LINEAR :         '¹'     ;     FUNCTIONAL :         'ᵇ'     ;     AND :         '&'     ;     AT :         '@'     ;     CATEGORY :         '%'     (        Alpha      |       Digit    )   +    (        '*'      |       '+'     |       '?'    )   ?    ;     CONCRETE :         '\u27e6'     (        CONCRETE      |      .    )   *  ?    '\u27e7'     ;     CONCRETE2 :         '⟪'     (        CONCRETE2      |      .    )   *  ?    '⟫'     ;     CONCRETE3 :         '\u27EA'     (        CONCRETE3      |      .    )   *  ?    '\u27EB'     ;     CONCRETE4 :         '\u2983'     (        CONCRETE4      |      .    )   *  ?    '\u2984'     ;     CONSTRUCTOR :         StartConstructorChar      ConstructorChar    *    ;     VARIABLE :         Lower     (        Lower      |       Digit     |       '-'    )   *    ;     METAVAR :         '#'     (        Alpha      |       Digit     |       Symbol     |       Unicode    )   *    ;     STRING :         '\"'     (        '""'      |       ~  '"'    )   *     '\"'     ;     NUMBER :         Decimal     ;     fragment StartConstructorChar :         Upper      |       Symbol     |       Unicode    ;     fragment ConstructorChar :         Alpha      |       Digit     |       Symbol     |       Unicode    ;     fragment Digit :        [0-9]    ;     fragment Upper :        [A-Z]    ;     fragment Lower :        [a-z]    ;     fragment Alpha :        [a-zA-Z]    ;     fragment Decimal :        [0-9]   +    (        '.'     [0-9]   +    )   ?     |       '.'     [0-9]   +   ;     fragment Symbol :        [+\-~`!*\^|?$_@]    ;     fragment Unicode :         ~  [\u0000-\u00FF\uD800-\uDBFF]     |      [\uD800-\uDBFF]    [\uDC00-\uDFFF]   ;     WS :        [ \t\r\n\f]   +    ->    channel (   HIDDEN )   ;     BLOCK_COMMENT :         '/*'     .    *  ?   (        '*/'      |       EOF    )    ->    channel (   HIDDEN )   ;     LINE_COMMENT :         '//'      ~  [\r\n]   *    ->    channel (   HIDDEN )   ;     XML_COMMENT :         '<!--'     .    *  ?   (        '-->'      |       EOF    )    ->    channel (   HIDDEN )   ;     fragment META_CHAR :         '#'     ;     fragment START_EMBED_CHAR :         '⟨'     ;     fragment END_EMBED_CHAR :         '⟩'     ;   mode  Embed ;     EMBED_END :         END_EMBED_CHAR     ->    popMode   ;    EMBED_NESTED :         START_EMBED_CHAR     ->    pushMode (   NestedEmbed )   ,    more  ;    EMBEDDED :        .     ->    more   ;  mode  NestedEmbed ;     NESTED_EMBED_END :         END_EMBED_CHAR     ->    popMode   ,    more  ;    NESTED_EMBED_NESTED :         START_EMBED_CHAR     ->    pushMode (   NestedEmbed )   ,    more  ;    NESTED_EMBEDDED :        .     ->    more   ;