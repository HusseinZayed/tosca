// Copyright (c) 2016 IBM Corporation.
/*
 * Normalize CRSX programs to Core CRSX.
 *
 * Eliminate syntactic sugars and perform various checks.
 *
 * In particular:
 * - Expand sorted concrete syntax
 */

import Parser::TransScript
import Core::Core
import Core::Utils
import Std::Core
import Std::String
import Std::Listdef
import Std::Num

// ----- API

// Convert TransScript to Core
func ToCore(String, TransScript_transscript_sort) -> Core_ccrsx_sort
rule ToCore(#filename, transscript⟦ ##decl+ ⟧)
→ ccrsx⟦
  import module Std::Core
  import module Std::Mapdef
  import module Std::Listdef

  ⟨cdecl+: NDecls(#decl+)⟩⟧

// ----- Declarations

func NDecls(List<TransScript_decl_sort>) -> List<Core_cdecl_sort>
rule NDecls(#cdecl+)
→ Flatten<Core_cdecl_sort>(Map<TransScript_decl_sort List>((x) -> NDecl(x), #cdecl+))

func NDecl(TransScript_decl_sort) -> List<Core_cdecl_sort>

/* Convert import module */
rule NDecl(decl⟦ import ##qconstructor ⟧)
→ cdecl+⟦ import module ⟨cqconstructor: NQconstructor(#qconstructor)⟩ ⟧

/* Convert import module */
rule NDecl(decl⟦ import module ##qconstructor ⟧)
→ cdecl+⟦ import module ⟨cqconstructor: NQconstructor(#qconstructor)⟩ ⟧

/* Convert enum to data sort */
rule NDecl(decl⟦ enum ##constructor ##sortParams? ##variant+ ⟧)
→ cdecl+⟦ data ⟨csortvars?: NMaybeSortParams(#sortParams?)⟩ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ( ⟨cform*: NVariants(#variant+)⟩ ) ⟧

/* Convert function.
   Fixity is only used by the parser and can be eliminated. Still need to access the constructor
*/

rule NDecl(decl⟦ ##anno* ##extern_TOK? func ##fnFixity ##sortParams? ##fnParamDecls? -> ##sort ##fnBody? ⟧)
→ cdecl+⟦
  ⟨canno*: Map<TransScript_anno_sort Core_canno_sort>((anno)->NAnno(anno), #anno*)⟩ ##extern_TOK? func ⟨csortvars?: NMaybeSortParams(#sortParams?)⟩ ⟨csort: NSort(#sort)⟩ ⟨CONSTRUCTOR: NConstructor(GetConstructor(#fnFixity))⟩  ⟨csorts?: NMaybeParamDecls(#fnParamDecls?)⟩
  ⟨cdecl+: NMaybeBody(#fnBody?, GetConstructor(#fnFixity), #fnParamDecls?)⟩
⟧

/* Convert rule */
rule NDecl(decl⟦ rule ##constructor ##args? → ##term* ⟧)
→ cdecl+⟦ rule ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟨cterms?: NMaybeArgs(#args?, TRUE)⟩ → ⟨cterm: NContractum(#term*)⟩ ⟧

// ---- Enum

func NVariants(List<TransScript_variant_sort>) -> List<Core_cform_sort>
  rule NVariants(variant+⟦   ⟧)
  → cform*⟦ ⟧

  rule NVariants(variant+⟦ | ##constructor ##variantArgs? ##variant+ ⟧)
  → cform*⟦ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟨csorts?: NMaybeVariantArgs(#variantArgs?)⟩ ⟨cform*: NVariants(#variant+)⟩ ⟧

  rule NVariants(variant+⟦ | allows-variable ##variant+ ⟧)
  → cform*⟦ allows-variable ⟨cform*: NVariants(#variant+)⟩ ⟧

func NMaybeVariantArgs(List<TransScript_variantArgs_sort>) -> List<Core_csorts_sort>
  rule NMaybeVariantArgs(variantArgs?⟦  ⟧ )
  → csorts?⟦⟧

  rule NMaybeVariantArgs(variantArgs?⟦()⟧ )
  → csorts?⟦⟧

  rule NMaybeVariantArgs(variantArgs?⟦ ( ##variantSort* ) ⟧)
  → csorts?⟦ ( ⟨csort*: Map<TransScript_variantSort_sort Core_csort_sort>((x)->NVariantSort(x), #variantSort*)⟩ ) ⟧

func NVariantSort(TransScript_variantSort_sort) -> Core_csort_sort
  rule NVariantSort(variantSort⟦ ##sort ⟧) → NSort(#sort)

// ---- Sort reference

func NSort(TransScript_sort_sort) -> Core_csort_sort
  rule NSort(sort⟦ ##sortScope? ##constructor ##sortArgs? ⟧)
  → NMaybeSortScope(#sortScope?, NParamSort(#constructor, #sortArgs?))

  rule NSort(sort⟦ ##sortScope? ##VARIABLE ⟧)
  → NMaybeSortScope(#sortScope?, csort⟦ ##VARIABLE ⟧)

  rule NSort(sort⟦ { ##sort1 : ##sort2 } ⟧)
  → csort⟦ { ⟨csort: NSort(#sort1)⟩ : ⟨csort: NSort(#sort2)⟩ } ⟧

func NMaybeSortScope(List<TransScript_sortScope_sort>, Core_csort_sort) -> Core_csort_sort
  rule NMaybeSortScope(sortScope?⟦ ⟧, #csort)
  → #csort

  rule NMaybeSortScope(sortScope?⟦ [ ##sort* ] -> ⟧, #csort)
  → NSortScope(#sort*, (), #csort)

  rule NMaybeSortScope(sortScope?⟦ ( ) -> ⟧, #csort)
  → csort⟦ thunk ##csort ⟧

  rule NMaybeSortScope(sortScope?⟦ ( ##sort* ) -> ⟧, #csort)
  → NFormalParamSorts(#sort*, #csort)

  rule NMaybeSortScope(sortScope?⟦ [ ##sort*1 ] ( ##sort*2 ) -> ⟧, #csort)
  → NSortScope(#sort*1, #sort*2, #csort)

func NSortScope(List<TransScript_sort_sort>, List<TransScript_sort_sort>, Core_csort_sort) -> Core_csort_sort
  rule NSortScope(sort*⟦ ⟧, #cformalParamSorts, #csort)
  → NFormalParamSorts(#cformalParamSorts, #csort)

  rule NSortScope(sort*⟦ ##sort ##sort* ⟧, #cformalParamSorts, #csort)
  → csort⟦ [ ⟨csort: NSort(#sort)⟩ ] ⟨csort: NSortScope(#sort*, #cformalParamSorts, #csort)⟩ ⟧

func NFormalParamSorts(List<TransScript_sort_sort>, Core_csort_sort) -> Core_csort_sort
  rule NFormalParamSorts(sort*⟦ ⟧, #csort)
  → #csort

  rule NFormalParamSorts(sort*⟦ ##sort ##sort* ⟧, #csort)
  → csort⟦ ( ⟨csort: NSort(#sort)⟩ ) ⟨csort: NFormalParamSorts(#sort*, #csort)⟩ ⟧

func NParamSort(TransScript_constructor_sort, List<TransScript_sortArgs_sort>) -> Core_csort_sort
  rule NParamSort(#constructor, #sortArgs?)
  → csort⟦ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟨csorts?: NMaybeSorts(#sortArgs?) ⟩ ⟧

func NMaybeSorts(List<TransScript_sortArgs_sort>) -> List<Core_csorts_sort>
  rule NMaybeSorts(sortArgs?⟦           ⟧) → csorts?⟦⟧
  rule NMaybeSorts(sortArgs?⟦< ##sort* >⟧) → csorts?⟦ ( ⟨csort*: Map<TransScript_sort_sort Core_csort_sort>((x)->NSort(x), #sort*) ⟩ ) ⟧

func NMaybeSortParams(List<TransScript_sortParams_sort>) -> List<Core_csortvars_sort>
  rule NMaybeSortParams(sortParams?⟦                     ⟧) → csortvars?⟦ ⟧
  rule NMaybeSortParams(sortParams?⟦ < ##variable_TOK+ > ⟧) → csortvars?⟦ ∀ ##variable_TOK+ . ⟧  // TODO: fix metaparser ugly _TOK

func NMaybeSortAnno(List<TransScript_sortAnno_sort>) -> List<Core_csortanno_sort>
  rule NMaybeSortAnno(sortAnno?⟦          ⟧) → csortanno?⟦⟧
  rule NMaybeSortAnno(sortAnno?⟦ : ##sort ⟧) → csortanno?⟦ : ⟨csort: NSort(#sort)⟩ ⟧

func NSortQualifiers(List<TransScript_sortQualifier_sort>) -> List<Core_csortqualifier_sort>
  rule NSortQualifiers(sortQualifier*⟦                           ⟧) → csortqualifier*⟦⟧
  rule NSortQualifiers(sortQualifier*⟦ ##sort :: ##sortQualifier*⟧) → csortqualifier*⟦ ⟨csort: NSort(#sort)⟩ :: ⟨csortqualifier*: NSortQualifiers(#sortQualifier*)⟩ ⟧

func NMaybeSortArgs(List<TransScript_sortArgs_sort>) -> List<Core_csortargs_sort>
  rule NMaybeSortArgs(sortArgs?⟦             ⟧) → csortargs?⟦ ⟧
  rule NMaybeSortArgs(sortArgs?⟦ < ##sort* > ⟧) → csortargs?⟦ <  ⟨csort*: Map<TransScript_sort_sort Core_csort_sort>((x)->NSort(x), #sort*)⟩ > ⟧

// ---- Annotation

func NAnno(TransScript_anno_sort) -> Core_canno_sort
rule NAnno(anno⟦ @ ##CONSTRUCTOR ⟧) → canno⟦ @ ##CONSTRUCTOR ⟧

// ---- Function declaration

/* Extract constructor from fixity */
func GetConstructor(TransScript_fnFixity_sort) -> TransScript_constructor_sort
  rule GetConstructor(fnFixity⟦ ##FIXITY ##NUMBER ##constructor ⟧) → #constructor
  rule GetConstructor(fnFixity⟦ ##constructor ⟧)                   → #constructor

func NMaybeParamDecls(List<TransScript_fnParamDecls_sort>) -> List<Core_csorts_sort>
  rule NMaybeParamDecls(fnParamDecls?⟦                ⟧) → csorts?⟦⟧
  rule NMaybeParamDecls(fnParamDecls?⟦ (            ) ⟧) → csorts?⟦⟧
  rule NMaybeParamDecls(fnParamDecls?⟦ ( ##fnParam* ) ⟧) → csorts?⟦ ( ⟨csort*: Map<TransScript_fnParam_sort Core_csort_sort>((x)->NParam(x), #fnParam*)⟩ ) ⟧

func NParam(TransScript_fnParam_sort) -> Core_csort_sort
  rule NParam(fnParam⟦ ##METAVAR : ##sort       ⟧) → NSort(#sort)
  rule NParam(fnParam⟦ ##METAVAR : eager ##sort ⟧) → csort⟦ data ⟨csort: NSort(#sort)⟩ ⟧
  rule NParam(fnParam⟦ ##sort                   ⟧) → NSort(#sort)
  rule NParam(fnParam⟦ eager ##sort             ⟧) → csort⟦ data ⟨csort: NSort(#sort)⟩ ⟧

func NMaybeBody(List<TransScript_fnBody_sort>, TransScript_constructor_sort, List<TransScript_fnParamDecls_sort>) -> List<Core_cdecl_sort>

  rule NMaybeBody(fnBody?⟦           ⟧, #constructor, #paramDecls?)
  → cdecl+⟦⟧

  rule NMaybeBody(fnBody?⟦ → ##term* ⟧, #constructor, #paramDecls?)
  → cdecl+⟦ rule ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟨cterms?: NMaybePatternArgs(#paramDecls?)⟩ → ⟨cterm: NContractum(#term*)⟩ ⟧

func NMaybePatternArgs(List<TransScript_fnParamDecls_sort>) -> List<Core_cterms_sort>
  rule NMaybePatternArgs(fnParamDecls?⟦                ⟧)  → cterms?⟦⟧
  rule NMaybePatternArgs(fnParamDecls?⟦ (            ) ⟧)  → cterms?⟦⟧
  rule NMaybePatternArgs(fnParamDecls?⟦ ( ##fnParam* ) ⟧)  → cterms?⟦ ( ⟨cterm*: Map<TransScript_fnParam_sort Core_cterm_sort>((x)->NPatternArg(x), #fnParam*)⟩) ⟧

func NPatternArg(TransScript_fnParam_sort) -> Core_cterm_sort
  rule NPatternArg(fnParam⟦ ##METAVAR : ##sort ⟧) → cterm⟦ ##METAVAR ⟧
//NPatternArg(fnParam⟦ ##sort             ⟧) → cterm⟦ ##METAVAR ⟧

// ---- Terms

func NContractum(List<TransScript_term_sort>) -> Core_cterm_sort

  // Just a single term
  rule NContractum(term*⟦ ##term                   ⟧) → NTerm(#term, FALSE)

  // This is a list... TODO
  rule NContractum(term*⟦ ##term , ##term2 ##term* ⟧) → NTerm(#term, FALSE)

func NTerm(TransScript_term_sort, Bool) -> Core_cterm_sort

  rule NTerm(term⟦ ##sortQualifier* ##constructor ##sortArgs? ##args? ##sortAnno? ⟧, #inpattern)
  → cterm⟦ ⟨csortqualifier*: NSortQualifiers(#sortQualifier*)⟩ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩
      ⟨csortargs?: NMaybeSortArgs(#sortArgs?)⟩ ⟨cterms?: NMaybeArgs(#args?, #inpattern)⟩ ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ ⟧

  rule NTerm(term⟦ ##STRING ⟧, #inpattern)
  → cterm⟦ ##STRING ⟧

  rule NTerm(term⟦ ##NUMBER ⟧, #inpattern)
  → cterm⟦ ##NUMBER ⟧

  rule NTerm(term⟦ ##groupOrList ⟧, #inpattern)
  → NGroupOrList(#groupOrList, #inpattern)

  rule NTerm(term⟦ ##VARIABLE ##sortAnno? ⟧, #inpattern)
  → cterm⟦ ##VARIABLE ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ ⟧

  rule NTerm(term⟦ ##METAVAR ##apply? ##subst? ##sortAnno? ⟧, #inpattern)
  → cterm⟦ ##METAVAR ⟨cterms?: NMaybeApply(#apply?, #inpattern)⟩ ⟨csubst?: NMaybeSubst(#subst?, #inpattern)⟩ ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ ⟧

  rule NTerm(term⟦ ##CONCRETE ⟧, #inpattern)
  → Error<Core_cterm_sort>("Internal error: concrete syntax must have already been expanded.")

  rule NTerm(term⟦ { ##kvs? } ⟧, TRUE)  → cterm⟦ { ⟨cmapentries?: NMaybeKVS(#kvs?)⟩ } ⟧
  rule NTerm(term⟦ {        } ⟧, FALSE) → cterm⟦ MapNew ⟧
  rule NTerm(term⟦ { ##kv*  } ⟧, FALSE) → FoldlP((entry map)->NKVContract(entry, map), NInitMap(#kv*), NTrimInitMap(#kv*))

func NMaybeArgs(List<TransScript_args_sort>, Bool) -> List<Core_cterms_sort>
  rule NMaybeArgs(args?⟦              ⟧, #inpattern) → cterms?⟦⟧
  rule NMaybeArgs(args?⟦ (          ) ⟧, #inpattern) → cterms?⟦ () ⟧
  rule NMaybeArgs(args?⟦ ( ##scope* ) ⟧, #inpattern) → cterms?⟦ ( ⟨cterm*: Map<TransScript_scope_sort Core_cterm_sort>((x)->NScope(x, #inpattern), #scope*)⟩ ) ⟧

func NScope(TransScript_scope_sort, Bool) -> Core_cterm_sort
  rule NScope(scope⟦ ##term      ⟧, #inpattern) → NTerm(#term, #inpattern)
  rule NScope(scope⟦ [ ##binders ⟧, #inpattern) → NBinders(#binders, #inpattern)
  rule NScope(scope⟦ ( ##formalParams ⟧, #inpattern) → NFormalParams(#formalParams, TRUE, #inpattern)

func NBinders(TransScript_binders_sort, Bool) -> Core_cterm_sort

  rule NBinders(binders⟦ b ##sortAnno?[] ##binders[b] ⟧, #inpattern)
  → cterm⟦ [ x ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ ] ⟨cterm: NBinders(#binders[x], #inpattern)⟩ ⟧

  rule NBinders(binders⟦ ] -> ##term ⟧, #inpattern) → NTerm(#term, #inpattern)

func NFormalParams(TransScript_formalParams_sort, Bool, Bool) -> Core_cterm_sort

  rule NFormalParams(formalParams⟦ f ##sortAnno?[] ##formalParams[f] ⟧, #empty, #inpattern)
  → cterm⟦ (f ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ ) ⟨cterm: NFormalParams(#formalParams[f], FALSE, #inpattern)⟩ ⟧

  rule NFormalParams(formalParams⟦ ) -> ##term          ⟧, FALSE, #inpattern) → NTerm(#term, #inpattern)
  rule NFormalParams(formalParams⟦ ) -> ##term          ⟧, TRUE, #inpattern) → cterm⟦ thunk ⟨cterm: NTerm(#term, #inpattern)⟩ ⟧

func NMaybeApply(List<TransScript_apply_sort>, Bool) -> List<Core_cterms_sort>
  rule NMaybeApply(apply?⟦             ⟧, #inpattern) → cterms?⟦⟧
  rule NMaybeApply(apply?⟦ (         ) ⟧, #inpattern) → cterms?⟦ () ⟧
  rule NMaybeApply(apply?⟦ ( ##term* ) ⟧, #inpattern) → cterms?⟦ ( ⟨cterm*: Map<TransScript_term_sort Core_cterm_sort>((x)->NTerm(x, #inpattern), #term*)⟩ ) ⟧

func NMaybeSubst(List<TransScript_subst_sort>, Bool) -> List<Core_csubst_sort>
  rule NMaybeSubst(subst?⟦             ⟧, #inpattern) → csubst?⟦⟧
  rule NMaybeSubst(subst?⟦ [         ] ⟧, #inpattern) → csubst?⟦⟧
  rule NMaybeSubst(subst?⟦ [ ##term* ] ⟧, #inpattern) → csubst?⟦ [ ⟨cterm*: Map<TransScript_term_sort Core_cterm_sort>((x)->NTerm(x, #inpattern), #term*)⟩ ] ⟧

func NGroupOrList(TransScript_groupOrList_sort, Bool) -> Core_cterm_sort
  rule NGroupOrList(groupOrList⟦ ()                           ⟧, #inpattern) → cterm⟦ Nil ⟧
  rule NGroupOrList(groupOrList⟦ ( ##term )                   ⟧, #inpattern) → NTerm(#term, #inpattern)
  rule NGroupOrList(groupOrList⟦ ( ##term , )                 ⟧, #inpattern) → cterm⟦ Cons( ⟨cterm: NTerm(#term, #inpattern)⟩, Nil) ⟧
  rule NGroupOrList(groupOrList⟦ ( ##term , ##term2 ##term* ) ⟧, #inpattern) → NList(term*⟦ ##term , ##term2 ##term* ⟧, #inpattern)

func NList(List<TransScript_term_sort>, Bool) -> Core_cterm_sort
  // TODO: fix meta parser to handle (+) properly. For now cannot match against one item.
  // TODO: robustness
rule NList(term*⟦                 ⟧, #inpattern) → cterm⟦ Nil ⟧
rule NList(term*⟦ ##term ##term*  ⟧, #inpattern) → cterm⟦ Cons( ⟨cterm: NTerm(#term, #inpattern)⟩, ⟨cterm: NList(#term*, #inpattern)⟩ ) ⟧

func NQconstructor(TransScript_qconstructor_sort) -> Core_cqconstructor_sort
rule NQconstructor(qconstructor⟦ ##sortQualifier* ##constructor ⟧) → cqconstructor⟦ ⟨csortqualifier*: NSortQualifiers(#sortQualifier*)⟩ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟧

func NConstructor(TransScript_constructor_sort) -> String
rule NConstructor(constructor⟦ ##CONSTRUCTOR ⟧) → #CONSTRUCTOR

func NMaybeKVS(List<TransScript_kvs_sort>) -> List<Core_cmapentries_sort>
rule NMaybeKVS(kvs?⟦       ⟧) → cmapentries?⟦⟧
rule NMaybeKVS(kvs?⟦ ##kv* ⟧) → cmapentries?⟦ ⟨cmapentry*: Map<TransScript_kv_sort Core_cmapentry_sort>((kv)->NKVPattern(kv), #kv*)⟩ ⟧

/* @return the first map reference from the given map entries list, or MapNew if none */
func NInitMap(List<TransScript_kv_sort>) -> Core_cterm_sort
rule NInitMap(kv*⟦                 ⟧) → cterm⟦ MapNew ⟧
rule NInitMap(kv*⟦ ##METAVAR ##kv* ⟧) → cterm⟦ ##METAVAR ⟧
rule NInitMap(kv*⟦ ##kv ##kv*      ⟧) → NInitMap(#kv*)

/* @return the given map entries list without the first map reference, or the full list if none */
func NTrimInitMap(List<TransScript_kv_sort>) -> List<TransScript_kv_sort>
rule NTrimInitMap(kv*⟦                 ⟧) → kv*⟦ ⟧
rule NTrimInitMap(kv*⟦ ##METAVAR ##kv* ⟧) → #kv*
rule NTrimInitMap(kv*⟦ ##kv ##kv*      ⟧) → kv*⟦ ##kv ⟨kv*: NTrimInitMap(#kv*)⟩ ⟧

func NKVPattern(TransScript_kv_sort) -> Core_cmapentry_sort
rule NKVPattern(kv⟦ ##METAVAR           ⟧) → cmapentry⟦ : ##METAVAR ⟧
rule NKVPattern(kv⟦ ¬ ##METAVAR         ⟧) → cmapentry⟦ ¬ ##METAVAR ⟧
rule NKVPattern(kv⟦ ##METAVAR : ##term  ⟧) → cmapentry⟦ ##METAVAR : ⟨cterm: NTerm(#term, TRUE)⟩ ⟧
rule NKVPattern(kv⟦ ##VARIABLE          ⟧) → cmapentry⟦ ##VARIABLE ⟧
rule NKVPattern(kv⟦ ¬ ##VARIABLE        ⟧) → cmapentry⟦ ¬ ##VARIABLE ⟧
rule NKVPattern(kv⟦ ##VARIABLE : ##term ⟧) → cmapentry⟦ ##VARIABLE : ⟨cterm: NTerm(#term, TRUE)⟩ ⟧
rule NKVPattern(kv⟦ ##STRING            ⟧) → cmapentry⟦ ##STRING ⟧
rule NKVPattern(kv⟦ ¬ ##STRING          ⟧) → cmapentry⟦ ¬ ##STRING ⟧
rule NKVPattern(kv⟦ ##STRING : ##term   ⟧) → cmapentry⟦ ##STRING : ⟨cterm: NTerm(#term, TRUE)⟩ ⟧

func NKVContract(TransScript_kv_sort, Core_cterm_sort) -> Core_cterm_sort
rule NKVContract(kv⟦ ##METAVAR           ⟧, #map) → cterm⟦ MapAddAll(⟨cterm: #map⟩, ##METAVAR) ⟧
rule NKVContract(kv⟦ ¬ ##METAVAR         ⟧, #map) → Error<Core_cterm_sort>("Fatal error: testing for non-occurrence of a key in map not allowed in contraction.")
rule NKVContract(kv⟦ ##METAVAR : ##term  ⟧, #map) → cterm⟦ MapPut(⟨cterm: #map⟩, ##METAVAR, ⟨cterm: NTerm(#term, FALSE)⟩) ⟧
rule NKVContract(kv⟦ ##VARIABLE          ⟧, #map) → Error<Core_cterm_sort>("Fatal error: testing for variable occurrence in map not allowed in contraction.")
rule NKVContract(kv⟦ ¬ ##VARIABLE        ⟧, #map) → Error<Core_cterm_sort>("Fatal error: testing for non-occurrence of a variable in map not allowed in contraction.")
rule NKVContract(kv⟦ ##VARIABLE : ##term ⟧, #map) → cterm⟦ MapPutVar(⟨cterm: #map⟩, ##VARIABLE, ⟨cterm: NTerm(#term, FALSE)⟩) ⟧
rule NKVContract(kv⟦ ##STRING            ⟧, #map) → Error<Core_cterm_sort>("Fatal error: testing for occurrence of a key in map not allowed in contraction.")
rule NKVContract(kv⟦ ¬ ##STRING          ⟧, #map) → Error<Core_cterm_sort>("Fatal error: testing for non-occurrence of a key in map not allowed in contraction.")
rule NKVContract(kv⟦ ##STRING : ##term   ⟧, #map) → cterm⟦ MapPut(⟨cterm: #map⟩, ##STRING, ⟨cterm: NTerm(#term, FALSE)⟩) ⟧
