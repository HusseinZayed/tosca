// Copyright (c) 2016 IBM Corporation.
/*
 * Normalize Tosca programs to Core Tosca.
 *
 * Eliminate syntactic sugars and perform various checks.
 *
 */

import parser::TransScript
import core::Core
import core::utils
import std::core
import std::string
import std::listdef
import std::num
import std::language

// ----- API

// Convert TransScript to Core
func ToCore(String, TransScript_transscript_sort) -> Core_ccrsx_sort
rule ToCore(#filename, transscript⟦ ##decl+ ⟧)
→ IfDef("nostd",
    ()->ccrsx⟦ ⟨cdecl+: NDecls(#decl+)⟩ ⟧,
    ()->ccrsx⟦
  import module std::core
  import module std::mapdef
  import module std::listdef

  ⟨cdecl+: NDecls(#decl+)⟩⟧)

// ----- Declarations

func NDecls(#cdecl+: List<TransScript_decl_sort>) -> List<Core_cdecl_sort>
→ Flatten(Map((x) -> NDecl(x), #cdecl+))

func NDecl(TransScript_decl_sort) -> List<Core_cdecl_sort>

  /* Convert import module */
  rule NDecl(decl⟦ import ##qidentifier ⟧)
  → cdecl+⟦ import module ⟨cqidentifier: NQIdentifier(#qidentifier)⟩ ⟧

  /* Convert import module */
  rule NDecl(decl⟦ import module ##qidentifier ⟧)
  → cdecl+⟦ import module ⟨cqidentifier: NQIdentifier(#qidentifier)⟩ ⟧

  /* Convert enum to data sort */
  rule NDecl(decl⟦ ##anno* enum ##identifierQualifier* ##constructor ##sortParams? ##variant+ ⟧)
  → cdecl+⟦ ⟨canno*: NAnnos(#anno*)⟩
             data ⟨csortvars?: NMaybeSortParams(#sortParams?)⟩ ⟨cidentifierqualifier*: Map((ident)->NIdentifierQualifier(ident), #identifierQualifier*)⟩
                  ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ( ⟨cform*: NVariants(#variant+)⟩ ) ⟧

  /* Convert aliases */
  rule NDecl(decl⟦ ##anno* type ##constructor ##sortParams? = ##sort ⟧)
  → cdecl+⟦ ⟨canno*: NAnnos(#anno*)⟩
             alias ⟨csortvars?: NMaybeSortParams(#sortParams?)⟩ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟨csort: NSort(#sort)⟩ ⟧

  /* Convert function. */
  rule NDecl(decl⟦ ##anno* ##EXTERN? func ##constructor ##sortParams? ##fnParamDecls? -> ##sort ##fnBody? ⟧)
  → cdecl+⟦
       ⟨canno*: NAnnos(#anno*)⟩
       ##EXTERN? func ⟨csortvars?: NMaybeSortParams(#sortParams?)⟩ ⟨csort: NSort(#sort)⟩ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩  ⟨csorts?: NMaybeParamDecls(#fnParamDecls?)⟩
                 ⟨cdecl+: NMaybeBody(#fnBody?, #constructor, #fnParamDecls?)⟩ ⟧

  /* Convert rule */
  rule NDecl(decl⟦ ##anno* rule ##constructor ##args? → ##term* ⟧)
  → cdecl+⟦ ⟨canno*: NAnnos(#anno*)⟩
             rule ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟨cterms?: NMaybeArgs(#args?, TRUE)⟩ → ⟨cterm: NTerms(#term*, FALSE)⟩ ⟧

// ---- Enumeration

func NVariants(List<TransScript_variant_sort>)  -> List<Core_cform_sort>

  rule NVariants(variant+⟦   ⟧)
  → cform*⟦ ⟧

  rule NVariants(variant+⟦ | ##constructor ##variantArgs? ##variant+ ⟧)
  → cform*⟦ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟨csortsdefault?: NMaybeVariantArgs(#variantArgs?)⟩ ⟨cform*: NVariants(#variant+)⟩ ⟧

  rule NVariants(variant+⟦ | allows-variable ##variant+ ⟧)
  → cform*⟦ allows-variable ⟨cform*: NVariants(#variant+)⟩ ⟧

  rule NVariants(variant+⟦ | variable ##variant+ ⟧)
  → cform*⟦ allows-variable ⟨cform*: NVariants(#variant+)⟩ ⟧

func NMaybeVariantArgs(List<TransScript_variantArgs_sort>) -> List<Core_csortsdefault_sort>

  rule NMaybeVariantArgs(variantArgs?⟦  ⟧)
  → csortsdefault?⟦⟧

  rule NMaybeVariantArgs(variantArgs?⟦()⟧)
  → csortsdefault?⟦⟧

  rule NMaybeVariantArgs(variantArgs?⟦ ( ##variantSort* ) ⟧)
  → csortsdefault?⟦ ( ⟨csortdefault*: Map((x)->NVariantSort(x), #variantSort*)⟩ ) ⟧

func NVariantSort(TransScript_variantSort_sort) -> Core_csortdefault_sort
rule NVariantSort(variantSort⟦ ##sort ##defaultValue? ⟧) → csortdefault⟦ ⟨csort: NSort(#sort)⟩ ⟨cdefaultvalue?: NMaybeDefaultValue(#defaultValue?)⟩ ⟧

func NMaybeDefaultValue(List<TransScript_defaultValue_sort>) -> List<Core_cdefaultvalue_sort>
rule NMaybeDefaultValue(defaultValue?⟦           ⟧) → cdefaultvalue?⟦⟧
rule NMaybeDefaultValue(defaultValue?⟦ = ##term  ⟧) → cdefaultvalue?⟦ = ⟨cterm: NTerm(#term, FALSE)⟩ ⟧

// ---- Sort


func NSort(TransScript_sort_sort) -> Core_csort_sort
rule NSort(sort⟦ ##anno* ##sortScope? ##paramSort ⟧) → NMaybeSortScope(NAnnos(#anno*), #sortScope?, #paramSort)

  /*rule NSort(sort⟦ ##sortScope? ##constructor ##sortArgs? ⟧)
  → NMaybeSortScope(#sortScope?, NParamSort(#constructor, #sortArgs?))

  rule NSort(sort⟦ ##sortScope? ##VARIABLE ⟧)
  → NMaybeSortScope(#sortScope?, csort⟦ ##VARIABLE ⟧)

  // Single map
  rule NSort(sort⟦ { ##sort1 : ##sort2 } ⟧)
  → csort⟦ { ⟨csort: NSort(#sort1)⟩ : ⟨csort: NSort(#sort2)⟩ } ⟧

  // Multi-maps
  rule NSort(sort⟦ { ##sortMap* } ⟧)
  → csort⟦ ⟨CONSTRUCTOR: NMultiMapWrapper(ListLength(#sortMap*))⟩ ( ⟨csort*:Flatten(Map((sortMap)->NSortMap(sortMap), #sortMap*))⟩ ) ⟧*/

func NMaybeSortScope(List<Core_canno_sort>, List<TransScript_sortScope_sort>, TransScript_paramSort_sort) -> Core_csort_sort

  rule NMaybeSortScope(#canno*, sortScope?⟦ ⟧, #paramSort)
  → NParamSort(#canno*, #paramSort)

  rule NMaybeSortScope(#canno*, sortScope?⟦ [ ##sort* ] -> ⟧, #paramSort)
  → NSortScope(#canno*, #sort*, (), #paramSort)

  rule NMaybeSortScope(#canno*, sortScope?⟦ ( ) -> ⟧, #paramSort)
  → csort⟦ ##canno* thunk ⟨csort: NParamSort(canno*⟦⟧, #paramSort)⟩ ⟧

  rule NMaybeSortScope(#canno*, sortScope?⟦ ( ##sort* ) -> ⟧, #paramSort)
  → NFormalParamSorts(#canno*, #sort*, #paramSort)

  rule NMaybeSortScope(#canno*, sortScope?⟦ [ ##sort*1 ] ( ##sort*2 ) -> ⟧, #paramSort)
  → NSortScope(#canno*, #sort*1, #sort*2, #paramSort)

func NSortScope(List<Core_canno_sort>, List<TransScript_sort_sort>, List<TransScript_sort_sort>, TransScript_paramSort_sort) -> Core_csort_sort

  rule NSortScope(#canno*, sort*⟦ ⟧, #cformalParamSorts, #paramSort)
  → NFormalParamSorts(#canno*, #cformalParamSorts, #paramSort)

  rule NSortScope(#canno*, sort*⟦ ##sort ##sort* ⟧, #cformalParamSorts, #paramSort)
  → csort⟦ ##canno* [ ⟨csort: NSort(#sort)⟩ ] ⟨csort: NSortScope(canno*⟦⟧, #sort*, #cformalParamSorts, #paramSort)⟩ ⟧

func NFormalParamSorts(List<Core_canno_sort>,  List<TransScript_sort_sort>, TransScript_paramSort_sort) -> Core_csort_sort

  rule NFormalParamSorts(#canno*, sort*⟦ ⟧, #paramSort)
  → NParamSort(#canno*, #paramSort)

  rule NFormalParamSorts(#canno*, sort*⟦ ##sort ##sort* ⟧, #paramSort)
  → csort⟦ ##canno* ( ⟨csort: NSort(#sort)⟩ ) ⟨csort: NFormalParamSorts(canno*⟦⟧, #sort*, #paramSort)⟩ ⟧

/*func NParamSort(#constructor: TransScript_constructor_sort, #sortArgs?: List<TransScript_sortArgs_sort>) -> Core_csort_sort
→ csort⟦ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟨csorts?: NMaybeSorts(#sortArgs?) ⟩ ⟧*/

func NParamSort(List<Core_canno_sort>, TransScript_paramSort_sort) -> Core_csort_sort

  rule NParamSort(#canno*, paramSort⟦ ##constructor ##sortArgs? ⟧)
  → csort⟦ ##canno* ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟨csorts?: NMaybeSorts(#sortArgs?) ⟩ ⟧

  rule NParamSort(#canno*, paramSort⟦ ##VARIABLE ⟧)
  → csort⟦ ##canno* ##VARIABLE ⟧

  // Single map
  rule NParamSort(#canno*, paramSort⟦ { ##sort1 : ##sort2 } ⟧)
  → csort⟦ ##canno* { ⟨csort: NSort(#sort1)⟩ : ⟨csort: NSort(#sort2)⟩ } ⟧

  // Multi-maps
  rule NParamSort(#canno*, paramSort⟦ { ##sortMap* } ⟧)
  → csort⟦ ##canno* ⟨CONSTRUCTOR: NMultiMapWrapper(ListLength(#sortMap*))⟩ ( ⟨csort*:Flatten(Map((sortMap)->NSortMap(sortMap), #sortMap*))⟩ ) ⟧


func NMaybeSorts(List<TransScript_sortArgs_sort>) -> List<Core_csorts_sort>
rule NMaybeSorts(sortArgs?⟦           ⟧) → csorts?⟦⟧
rule NMaybeSorts(sortArgs?⟦< ##sort* >⟧) → csorts?⟦ ( ⟨csort*: Map((x)->NSort(x), #sort*) ⟩ ) ⟧

func NMaybeSortParams(List<TransScript_sortParams_sort>) -> List<Core_csortvars_sort>
rule NMaybeSortParams(sortParams?⟦                 ⟧) → csortvars?⟦ ⟧
rule NMaybeSortParams(sortParams?⟦ < ##VARIABLE+ > ⟧) → csortvars?⟦ ∀ ##VARIABLE+ . ⟧

func NMaybeSortAnno(List<TransScript_sortAnno_sort>) -> List<Core_csortanno_sort>
rule NMaybeSortAnno(sortAnno?⟦          ⟧) → csortanno?⟦⟧
rule NMaybeSortAnno(sortAnno?⟦ : ##sort ⟧) → csortanno?⟦ : ⟨csort: NSort(#sort)⟩ ⟧

func NSortQualifiers(List<TransScript_sortQualifier_sort>) -> List<Core_csortqualifier_sort>
rule NSortQualifiers(sortQualifier*⟦                            ⟧) → csortqualifier*⟦⟧
rule NSortQualifiers(sortQualifier*⟦ ##sort :: ##sortQualifier* ⟧) → csortqualifier*⟦ ⟨csort: NSort(#sort)⟩ :: ⟨csortqualifier*: NSortQualifiers(#sortQualifier*)⟩ ⟧

func NMaybeSortArgs(List<TransScript_sortArgs_sort>) -> List<Core_csortargs_sort>
rule NMaybeSortArgs(sortArgs?⟦             ⟧) → csortargs?⟦ ⟧
rule NMaybeSortArgs(sortArgs?⟦ < ##sort* > ⟧) → csortargs?⟦ <  ⟨csort*: Map((x)->NSort(x), #sort*)⟩ > ⟧

func NSortMap(TransScript_sortMap_sort) -> List<Core_csort_sort>
rule NSortMap(sortMap⟦ ##sort1 : ##sort2 ⟧) → csort*⟦ ⟨csort: NSort(#sort1)⟩, ⟨csort: NSort(#sort2)⟩ ⟧

/* Generate wrapper construtor for given multimaps arity */
func NMultiMapWrapper(#arity: Numeric) -> String
→ ConcatString("MMap", FormatInteger(#arity))

// ---- Annotation

func NAnnos(#anno*: List<TransScript_anno_sort>) -> List<Core_canno_sort>
→ Map((anno)->NAnno(anno), #anno*)

func NAnno(TransScript_anno_sort) -> Core_canno_sort
rule NAnno(anno⟦ @ ##qidentifier ##args? ⟧) → canno⟦ @ ⟨cqidentifier: NQIdentifier(#qidentifier)⟩ ⟨cterms?: NMaybeArgs(#args?, FALSE)⟩ ⟧
rule NAnno(anno⟦ @ ##METAVAR ⟧) → canno⟦ @ ##METAVAR ⟧

// ---- Function declaration

func NMaybeParamDecls(List<TransScript_fnParamDecls_sort>) -> List<Core_csorts_sort>
rule NMaybeParamDecls(fnParamDecls?⟦                ⟧) → csorts?⟦⟧
rule NMaybeParamDecls(fnParamDecls?⟦ (            ) ⟧) → csorts?⟦⟧
rule NMaybeParamDecls(fnParamDecls?⟦ ( ##fnParam* ) ⟧) → csorts?⟦ ( ⟨csort*: Map((x)->NParam(x), #fnParam*)⟩ ) ⟧

func NParam(TransScript_fnParam_sort) -> Core_csort_sort
rule NParam(fnParam⟦ ##METAVAR : ##sort ⟧) → NSort(#sort)
rule NParam(fnParam⟦ ##sort             ⟧) → NSort(#sort)

// deprecated
rule NParam(fnParam⟦ ##METAVAR : eager ##sort ⟧) → csort⟦ data ⟨csort: NSort(#sort)⟩ ⟧
rule NParam(fnParam⟦ eager ##sort             ⟧) → csort⟦ data ⟨csort: NSort(#sort)⟩ ⟧

func NMaybeBody(List<TransScript_fnBody_sort>, TransScript_constructor_sort, List<TransScript_fnParamDecls_sort>) -> List<Core_cdecl_sort>

  rule NMaybeBody(fnBody?⟦           ⟧, #constructor, #paramDecls?)
  → cdecl+⟦⟧

  rule NMaybeBody(fnBody?⟦ → ##term* ⟧, #constructor, #paramDecls?)
  → cdecl+⟦ rule ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟨cterms?: NMaybePatternArgs(#paramDecls?)⟩ → ⟨cterm: NTerms(#term*, FALSE)⟩ ⟧

func NMaybePatternArgs(List<TransScript_fnParamDecls_sort>) -> List<Core_cterms_sort>
rule NMaybePatternArgs(fnParamDecls?⟦                ⟧)  → cterms?⟦⟧
rule NMaybePatternArgs(fnParamDecls?⟦ (            ) ⟧)  → cterms?⟦⟧
rule NMaybePatternArgs(fnParamDecls?⟦ ( ##fnParam* ) ⟧)  → cterms?⟦ ( ⟨cterm*: Map((x)->NPatternArg(x), #fnParam*)⟩) ⟧

func NPatternArg(TransScript_fnParam_sort) -> Core_cterm_sort
rule NPatternArg(fnParam⟦ ##METAVAR : ##sort ⟧) → cterm⟦ ##METAVAR ⟧
rule NPatternArg(fnParam⟦ ##sort ⟧)             → Error("Missing function parameter meta variable.") // TODO

// ---- Terms

func NTerms(List<TransScript_term_sort>, Bool) -> Core_cterm_sort
rule NTerms(term*⟦ ##annoterm ⟧, #inpattern) → NAnnoTerm(#annoterm, #inpattern)
rule NTerms(#term*             , #inpattern) → NList(#term*, #inpattern)

func NList(List<TransScript_term_sort>, Bool) -> Core_cterm_sort
rule NList(term*⟦ ##annoterm1 , ##annoterm2 ... ⟧, #inpattern) → cterm⟦ Cons( ⟨cterm: NAnnoTerm(#annoterm1, #inpattern)⟩, ⟨cterm: NAnnoTerm(#annoterm2, #inpattern)⟩ ) ⟧
rule NList(term*⟦ ##term ##term*                ⟧, #inpattern) → cterm⟦ Cons( ⟨cterm: NTerm(#term, #inpattern)⟩, ⟨cterm: NList(#term*, #inpattern)⟩ ) ⟧
rule NList(term*⟦                               ⟧, #inpattern) → cterm⟦ Nil ⟧

func NTerm(TransScript_term_sort, Bool) -> Core_cterm_sort
rule NTerm(term⟦ ##annoterm ⟧, #inpattern) → NAnnoTerm(#annoterm, #inpattern)

func NAnnoTerm(TransScript_annoterm_sort, Bool) -> Core_cterm_sort
rule NAnnoTerm(annoterm⟦ ##anno* ##aterm ⟧, #inpattern) → NATerm(NAnnos(#anno*), #aterm, #inpattern)

func NATerm(List<Core_canno_sort>, TransScript_aterm_sort, Bool) -> Core_cterm_sort

  rule NATerm(#canno*, aterm⟦ ##sortQualifier* ##constructor ##sortArgs? ##args? ##sortAnno? ⟧, #inpattern)
  → cterm⟦ ##canno* ⟨csortqualifier*: NSortQualifiers(#sortQualifier*)⟩ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩
      ⟨csortargs?: NMaybeSortArgs(#sortArgs?)⟩ ⟨cterms?: NMaybeArgs(#args?, #inpattern)⟩ ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ ⟧

  rule NATerm(#canno*, aterm⟦ ##STRING ⟧, #inpattern)
  → cterm⟦ ##canno* ##STRING ⟧

  rule NATerm(#canno*, aterm⟦ ##NUMBER ⟧, #inpattern)
  → cterm⟦ ##canno* ##NUMBER ⟧

  rule NATerm(#canno*, aterm⟦ ##groupOrList ⟧, #inpattern)
  → NGroupOrList(#groupOrList, #inpattern)

  rule NATerm(#canno*, aterm⟦ ##VARIABLE ##sortAnno? ⟧, #inpattern)
  → cterm⟦ ##canno* ##VARIABLE ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ ⟧

  rule NATerm(#canno*, aterm⟦ ##METAVAR ##apply? ##subst? ##sortAnno? ⟧, #inpattern)
  → cterm⟦ ##canno* ##METAVAR ⟨cterms?: NMaybeApply(#apply?, #inpattern)⟩ ⟨csubst?: NMaybeSubst(#subst?, #inpattern)⟩ ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ ⟧

  rule NATerm(#canno*, aterm⟦ ##CONCRETE ⟧, #inpattern)
  → Error("Internal error: concrete syntax must have already been expanded.")

  rule NATerm(#canno*, aterm⟦ ##METAVAR ##sortAnno? = ##term ⟧, TRUE)
  → cterm⟦ ##canno* ##METAVAR ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ = ⟨cterm: NTerm(#term, TRUE)⟩ ⟧

  rule NATerm(#canno*, aterm⟦ ##METAVAR ##sortAnno? = ##term ⟧, FALSE)
  → Error("Error: named terms are only allowed in patterns.")

  // Map pattern matching - single map
  rule NATerm(#canno*, aterm⟦ { ##optkvs } ⟧, TRUE)
  → NOptKVS(#optkvs)

  // Map pattern matching - multi maps - desugar
  rule NATerm(#canno*, aterm⟦ { ##optkvs* } ##sortAnno? ⟧, TRUE)
  → cterm⟦ ##canno* ⟨CONSTRUCTOR: NMultiMapWrapper(ListLength(#optkvs*))⟩ ( ⟨cterm*: Map((optkvs)->NOptKVS(optkvs), #optkvs*)⟩ ) ⟧

  // Map construction - empty single map
  rule NATerm(#canno*, aterm⟦ {        } ##sortAnno? ⟧, FALSE)
  → cterm⟦ ##canno* MapNew ⟧

  // Map construction - single map
  rule NATerm(#canno*, aterm⟦ { ##optkvs } ##sortAnno? ⟧, FALSE)
  → NOptKVSContract(#optkvs)

  // Map construction - multi maps
  rule NATerm(#canno*, aterm⟦ { ##optkvs* } ##sortAnno? ⟧, FALSE)
  → cterm⟦ ##canno* ⟨CONSTRUCTOR: NMultiMapWrapper(ListLength(#optkvs*))⟩ (⟨cterm*: Map((optkvs)->NOptKVSContract(optkvs), #optkvs*)⟩ ) ⟧

  rule NATerm(#canno*, aterm⟦ let ##METAVAR ##sortAnno? = ##term ##term2 ⟧, FALSE)
  → cterm⟦ ##canno* let ##METAVAR ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ = ⟨cterm: NTerm(#term, FALSE)⟩ ⟨cterm: NTerm(#term2, FALSE)⟩ ⟧

  rule NATerm(#canno*, #aterm = aterm⟦ let ##METAVAR ##sortAnno? = ##term ##term2 ⟧, TRUE)
  → Error(ConcatString("Error:invalid let expression in pattern", PrintTerm("", #aterm)))

  // Assertion error
  rule NATerm(#canno*, #aterm, #inpattern) → Error(ConcatString("Internal error: could not handle ", PrintTerm("", #aterm)))

func NMaybeArgs(List<TransScript_args_sort>, Bool) -> List<Core_cterms_sort>
rule NMaybeArgs(args?⟦              ⟧, #inpattern) → cterms?⟦⟧
rule NMaybeArgs(args?⟦ (          ) ⟧, #inpattern) → cterms?⟦ () ⟧
rule NMaybeArgs(args?⟦ ( ##scope* ) ⟧, #inpattern) → cterms?⟦ ( ⟨cterm*: Map((x)->NScope(x, #inpattern), #scope*)⟩ ) ⟧

func NScope(TransScript_scope_sort, Bool) -> Core_cterm_sort
rule NScope(scope⟦ ##term           ⟧, #inpattern) → NTerm(#term, #inpattern)
rule NScope(scope⟦ [ ##binders      ⟧, #inpattern) → NBinders(#binders, #inpattern)
rule NScope(scope⟦ ( ##formalParams ⟧, #inpattern) → NFormalParams(#formalParams, TRUE, #inpattern)

func NBinders(TransScript_binders_sort, Bool) -> Core_cterm_sort

  rule NBinders(binders⟦ b ##sortAnno? ##binders[b] ⟧, #inpattern)
  → cterm⟦ [ x ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ ] ⟨cterm: NBinders(#binders[x], #inpattern)⟩ ⟧

  rule NBinders(binders⟦ ] -> ##term ⟧, #inpattern)
  → NTerm(#term, #inpattern)

  rule NBinders(binders⟦ ] ( ##formalParams ⟧, #inpattern)
  → NFormalParams(#formalParams, TRUE, #inpattern)

func NFormalParams(TransScript_formalParams_sort, Bool, Bool) -> Core_cterm_sort

  rule NFormalParams(formalParams⟦ f ##sortAnno?[] ##formalParams[f] ⟧, #empty, #inpattern)
  → cterm⟦ (f ⟨csortanno?: NMaybeSortAnno(#sortAnno?)⟩ ) ⟨cterm: NFormalParams(#formalParams[f], FALSE, #inpattern)⟩ ⟧

  rule NFormalParams(formalParams⟦ ) -> ##term ⟧, FALSE, #inpattern)
  → NTerm(#term, #inpattern)

  rule NFormalParams(formalParams⟦ ) -> ##term ⟧, TRUE, #inpattern)
  → cterm⟦ thunk ⟨cterm: NTerm(#term, #inpattern)⟩ ⟧

func NMaybeApply(List<TransScript_apply_sort>, Bool) -> List<Core_cterms_sort>
rule NMaybeApply(apply?⟦             ⟧, #inpattern) → cterms?⟦⟧
rule NMaybeApply(apply?⟦ (         ) ⟧, #inpattern) → cterms?⟦ () ⟧
rule NMaybeApply(apply?⟦ ( ##term* ) ⟧, #inpattern) → cterms?⟦ ( ⟨cterm*: Map((x)->NTerm(x, #inpattern), #term*)⟩ ) ⟧

func NMaybeSubst(List<TransScript_subst_sort>, Bool) -> List<Core_csubst_sort>
rule NMaybeSubst(subst?⟦             ⟧, #inpattern) → csubst?⟦⟧
rule NMaybeSubst(subst?⟦ [         ] ⟧, #inpattern) → csubst?⟦⟧
rule NMaybeSubst(subst?⟦ [ ##term* ] ⟧, #inpattern) → csubst?⟦ [ ⟨cterm*: Map((x)->NTerm(x, #inpattern), #term*)⟩ ] ⟧

func NGroupOrList(TransScript_groupOrList_sort, Bool) -> Core_cterm_sort
rule NGroupOrList(groupOrList⟦ ()           ⟧, #inpattern) → cterm⟦ Nil ⟧
rule NGroupOrList(groupOrList⟦ ( ##term , ) ⟧, #inpattern) → cterm⟦ Cons( ⟨cterm: NTerm(#term, #inpattern)⟩, Nil) ⟧
rule NGroupOrList(groupOrList⟦ ( ##term* )  ⟧, #inpattern) → NTerms(#term*, #inpattern)

func NQIdentifier(TransScript_qidentifier_sort) -> Core_cqidentifier_sort
rule NQIdentifier(qidentifier⟦ ##identifierQualifier* ##identifier ⟧) → cqidentifier⟦ ⟨cidentifierqualifier*: Map((ident)->NIdentifierQualifier(ident), #identifierQualifier*)⟩ ⟨cidentifier: NIdentifier(#identifier)⟩ ⟧
rule NQIdentifier(qidentifier⟦ ##identifier                        ⟧) → cqidentifier⟦ ⟨cidentifier: NIdentifier(#identifier)⟩ ⟧

func NIdentifierQualifier(TransScript_identifierQualifier_sort) -> Core_cidentifierqualifier_sort
rule NIdentifierQualifier(identifierQualifier⟦ ##identifier :: ⟧) → cidentifierqualifier⟦ ⟨cidentifier: NIdentifier(#identifier)⟩ :: ⟧

func NIdentifier(TransScript_identifier_sort) -> Core_cidentifier_sort
rule NIdentifier(identifier⟦ ##CONSTRUCTOR ⟧) → cidentifier⟦ ##CONSTRUCTOR ⟧
rule NIdentifier(identifier⟦ ##VARIABLE ⟧)    → cidentifier⟦ ##VARIABLE ⟧

func NQConstructor(TransScript_qconstructor_sort) -> Core_cqconstructor_sort
rule NQConstructor(qconstructor⟦ ##sortQualifier* ##constructor ⟧) → cqconstructor⟦ ⟨csortqualifier*: NSortQualifiers(#sortQualifier*)⟩ ⟨CONSTRUCTOR: NConstructor(#constructor)⟩ ⟧

func NConstructor(TransScript_constructor_sort) -> String
rule NConstructor(constructor⟦ ##CONSTRUCTOR ⟧) → #CONSTRUCTOR

// --- Normalize Map

func NOptKVS(TransScript_optkvs_sort) -> Core_cterm_sort
rule NOptKVS(optkvs⟦ ##kvs? ⟧) → cterm⟦ { ⟨cmapentries?: NMaybeKVS(#kvs?)⟩ } ⟧

func NMaybeKVS(List<TransScript_kvs_sort>) -> List<Core_cmapentries_sort>
rule NMaybeKVS(kvs?⟦       ⟧) → cmapentries?⟦⟧
rule NMaybeKVS(kvs?⟦ ##kv* ⟧) → cmapentries?⟦ ⟨cmapentry*: Map((kv)->NKVPattern(kv), #kv*)⟩ ⟧

/* @return the first map reference from the given map entries list, or MapNew if none */
func NInitMap(List<TransScript_kv_sort>) -> Core_cterm_sort
rule NInitMap(kv*⟦                 ⟧) → cterm⟦ MapNew ⟧
rule NInitMap(kv*⟦ ##METAVAR ##kv* ⟧) → cterm⟦ ##METAVAR ⟧
rule NInitMap(kv*⟦ ##kv ##kv*      ⟧) → NInitMap(#kv*)

/* @return the given map entries list without the first map reference, or the full list if none */
func NTrimInitMap(List<TransScript_kv_sort>) -> List<TransScript_kv_sort>
rule NTrimInitMap(kv*⟦                 ⟧) → kv*⟦ ⟧
rule NTrimInitMap(kv*⟦ ##METAVAR ##kv* ⟧) → #kv*
rule NTrimInitMap(kv*⟦ ##kv ##kv*      ⟧) → kv*⟦ ##kv ⟨kv*: NTrimInitMap(#kv*)⟩ ⟧

func NKVPattern(TransScript_kv_sort) -> Core_cmapentry_sort
rule NKVPattern(kv⟦ ##METAVAR           ⟧) → cmapentry⟦ : ##METAVAR ⟧
rule NKVPattern(kv⟦ ¬ ##METAVAR         ⟧) → cmapentry⟦ ¬ ##METAVAR ⟧
rule NKVPattern(kv⟦ ##METAVAR : ##term  ⟧) → cmapentry⟦ ##METAVAR : ⟨cterm: NTerm(#term, TRUE)⟩ ⟧
rule NKVPattern(kv⟦ ##VARIABLE          ⟧) → cmapentry⟦ ##VARIABLE ⟧
rule NKVPattern(kv⟦ ¬ ##VARIABLE        ⟧) → cmapentry⟦ ¬ ##VARIABLE ⟧
rule NKVPattern(kv⟦ ##VARIABLE : ##term ⟧) → cmapentry⟦ ##VARIABLE : ⟨cterm: NTerm(#term, TRUE)⟩ ⟧
rule NKVPattern(kv⟦ ##STRING            ⟧) → cmapentry⟦ ##STRING ⟧
rule NKVPattern(kv⟦ ¬ ##STRING          ⟧) → cmapentry⟦ ¬ ##STRING ⟧
rule NKVPattern(kv⟦ ##STRING : ##term   ⟧) → cmapentry⟦ ##STRING : ⟨cterm: NTerm(#term, TRUE)⟩ ⟧

func NOptKVSContract(TransScript_optkvs_sort) -> Core_cterm_sort
rule NOptKVSContract(optkvs⟦       ⟧) → cterm⟦ MapNew ⟧
rule NOptKVSContract(optkvs⟦ ##kv* ⟧) → FoldlP((entry map)->NKVContract(entry, map), NInitMap(#kv*), NTrimInitMap(#kv*))

func NKVContract(TransScript_kv_sort, Core_cterm_sort) -> Core_cterm_sort
rule NKVContract(kv⟦ ##METAVAR           ⟧, #map) → cterm⟦ MapAddAll(⟨cterm: #map⟩, ##METAVAR) ⟧
rule NKVContract(kv⟦ ¬ ##METAVAR         ⟧, #map) → Error("Fatal error: testing for non-occurrence of a key in map not allowed in contraction.")
rule NKVContract(kv⟦ ##METAVAR : ##term  ⟧, #map) → cterm⟦ MapPut(⟨cterm: #map⟩, ##METAVAR, ⟨cterm: NTerm(#term, FALSE)⟩) ⟧
rule NKVContract(kv⟦ ##VARIABLE          ⟧, #map) → Error("Fatal error: testing for variable occurrence in map not allowed in contraction.")
rule NKVContract(kv⟦ ¬ ##VARIABLE        ⟧, #map) → Error("Fatal error: testing for non-occurrence of a variable in map not allowed in contraction.")
rule NKVContract(kv⟦ ##VARIABLE : ##term ⟧, #map) → cterm⟦ MapPut(⟨cterm: #map⟩, ##VARIABLE, ⟨cterm: NTerm(#term, FALSE)⟩) ⟧
rule NKVContract(kv⟦ ##STRING            ⟧, #map) → Error("Fatal error: testing for occurrence of a key in map not allowed in contraction.")
rule NKVContract(kv⟦ ¬ ##STRING          ⟧, #map) → Error("Fatal error: testing for non-occurrence of a key in map not allowed in contraction.")
rule NKVContract(kv⟦ ##STRING : ##term   ⟧, #map) → cterm⟦ MapPut(⟨cterm: #map⟩, ##STRING, ⟨cterm: NTerm(#term, FALSE)⟩) ⟧
