/*
 * Copyright (c) 2015 IBM Corporation.
 *
 * @author : m schett
 * @date   : 08/18/2015
 */

TermOps[(

$Use["std/list.crs"];
$Use["std/string.crs"];

/* ***************************************************** */
/*  MISC                                                 */
/* ***************************************************** */

/* Lhs
   @param `rule` a rule declaration
   @return `lhs` the **term** `lhs` which is the left-hand side of the rule
*/
Lhs[Core_cdecl_sort] :: Core_cterm_sort;
Lhs[%cdecl⟦ rule ##cterm → ##cterm2 ⟧] 
→ 
%cterm⟦ ##cterm ⟧;


Unwrap[$List[Core_cterms_sort]] :: $List[Core_cterm_sort];
Unwrap[ ( Core_cterms[#]; ) ] → #;
Unwrap[ () ] → ();

Wrap[$List[Core_cterm_sort]] :: $List[Core_cterms_sort];
Wrap[ () ] → ();
Wrap[ (#1;#2) ] → (Core_cterms[(#1;#2)];);

/* ***************************************************** */
/*  RENAMING                                             */
/* ***************************************************** */

// TODO-2016-02-03: does not handle assoc case

/* Rename
   @param `suffix` a string, which serves as suffix for the meta variables
   @param `term`   a term in which the meta variables will be renamed
   @return `term'` in which all meta variables `#X` are renamed to
                   `#Xsuffix` 
   @throws error if it encounters a nested bound variable with the same name
           e.g., [x]F([x]G(x))
   @note   prefixing with a $String did not work
 */
Rename[$String, Core_cterm_sort] :: Core_cterm_sort;
Rename[#suffix, #term] → RenameHelper[#suffix, (), #term];
  /* case: constructor */
  RenameHelper[$String, $List[Core_cvariable_sort], Core_cterm_sort] :: Core_cterm_sort;
  RenameHelper[#suffix, #BVs, 
               %cterm⟦ ##CONSTRUCTOR ##cterms? ⟧ ] 
  → 
  %cterm⟦ ##CONSTRUCTOR 
          ⟨cterms?: Wrap[Map[t.RenameHelper[#suffix, #BVs, t], Unwrap[#cterms?]]] ⟩ ⟧ ;
  
  /* case: literal */
  RenameHelper[#suffix, #BVs, 
              %cterm⟦ ##cliteral ⟧]
  → 
  %cterm⟦ ##cliteral ⟧;
  
  /* case: variable */
  RenameHelper[ #suffix, #BVs, %cterm⟦ ##cvariable ⟧ ] 
  → 
  %cterm⟦ ##cvariable ⟧ ;

  /* case: meta var */
  RenameHelper[#suffix, #BVs, %cterm⟦ ##METAVAR ##cterms? ⟧ ]
  → 
  %cterm⟦⟨METAVAR: ConcatString[ #METAVAR, #suffix]⟩ 
         ⟨cterms?: Wrap[Map[t.RenameHelper[#suffix, #BVs, t], Unwrap[#cterms?]]] ⟩ ⟧ ;
   
// TODO-2016-02-03: problem with bound terms
  /* case: bound term */
  RenameHelper[#suffix, #BVs,  %cterm⟦ [ ##VARIABLE ] ##cterm ⟧ ]
  → Foo; // DetectNestedBinders[Elem[#VARIABLE, #BVs], #suffix, #BVs, #VARIABLE, #cterm]; 
    /* according to Nipkow93, Sec. 5, nested binders with the same name are a problem */

    DetectNestedBinders[Boolean, $String, $List[Core_cvariable_sort], Core_cvariable_sort, Core_cterm_sort] :: Core_cterm_sort;
    DetectNestedBinders[FALSE, #suffix, #BVs, #VARIABLE, #cterm] 
    → %cterm⟦ [ ##VARIABLE ] ⟨cterm: RenameHelper[#suffix, Insert[#VARIABLE, #BVs], #cterm] ⟩ ⟧ ;
    DetectNestedBinders[TRUE, #suffix, #BVs, #VARIABLE, #t] 
    → Error[ConcatString["Rename: The term contains nested abstractions, e.g., [x]C([x]x). The offending variable is: ", Show[#VARIABLE]] ]; 

  
/* RenameRule
   @param `suffix` a string, which serves as suffix for all meta variables
   @param `rule`   a rule in which the meta variables will be renamed
   @return `rule'` in which all meta variables `#X` are renamed to `#Xsuffix` 
   @note   see [Rename] 
*/
RenameRule[$String, Core_cdecl_sort] :: Core_cdecl_sort;
RenameRule[#suff, %cdecl⟦ rule ##cterm → ##cterm2 ⟧] 
→ %cdecl⟦ rule ⟨cterm: Rename[#suff, #cterm]⟩ → ⟨cterm: Rename[#suff, #cterm2]⟩ ⟧;

/* RenameRules 
   @param  `rules`    a list of rules in which the meta variables will be renamed
   @return `rules'`  in which all meta variables `#X` are renamed to `#X_n`, whereby `n` in `1..Length[rules]`
   @note   see [RenameRule] 
*/
RenameRules[$List[Core_cdecl_sort]] :: $List[Core_cdecl_sort];
RenameRules[#rules] → RenameRulesHelper[1, #rules];
  RenameRulesHelper[$Numeric, $List[Core_cdecl_sort]] ::  $List[Core_cdecl_sort];
  RenameRulesHelper[#_, ()] → ();
  RenameRulesHelper[#n, (#r;#rules)] → Insert[ RenameRule[ConcatString["_", Show[#n]],#r], RenameRulesHelper[NumberPlus[#n,1], #rules]];



/* ***************************************************** */
/*  VARIABLES                                            */
/* ***************************************************** */

/* FreeVariables
   @param  `t` a term 
   @return the list of free variables in `t`
   @note   contains duplicates, if variable occurs more than once
*/
FreeVariables[Core_cterm_sort] :: $List[Core_cvariable_sort];
FreeVariables[ #t ] → MatchFreeVariables[ Variables[#t] ];
  MatchFreeVariables[VARS] :: $List[Core_cvariable_sort];
  MatchFreeVariables[Vars[#M, #BV, #FV]] → #FV;

MetaVariables[Core_cterm_sort] :: $List[$String /* Core_METAVAR_sort */ ];
MetaVariables[ #t ] → MatchMetaVariables[ Variables[#t] ];
  MatchMetaVariables[VARS] :: $List[ $String /* Core_METAVAR_sort */ ];
  MatchMetaVariables[Vars[#M, #BV, #FV]] → #M;

/* VARS
  data sort to hold meta variables, bound variables, and free variables
 */
VARS ::= ( Vars[ $List[$String],              /* meta variables  */ 
                 $List[Core_cvariable_sort],   /* bound variables */ 
                 $List[Core_cvariable_sort] ]; /* free Variables  */ );
/* Variables
   @param  `t` a term
   @return `VARS` which hold in  
           1. component: meta variables of `t`
           2. component: bound variables of `t`  
           3. component: free variables of `t`
   @note that the components may contain duplicates, in particular if `t` is not linear
*/
Variables[Core_cterm_sort] :: VARS;
Variables[ #term ] →  VariablesHelperBoundVar[(), #term ];
  /* needed to carry the bound variables throughout the computation */
  VariablesHelperBoundVar[$List[Core_cvariable_sort], Core_cterm_sort] :: VARS;
  VariablesHelperBoundVar[#BV, #t] →
  VariablesHelper[Vars[(),(),()], #BV, #t];

  /* case: constructor */
  VariablesHelper[VARS, $List[Core_cvariable_sort], Core_cterm_sort] :: VARS;
  VariablesHelper[Vars[#M, #BV, #FV], #_,
                  %cterm⟦ ##CONSTRUCTOR ##cterms? ⟧ ]  
  →    
  ConcatVars[Vars[#M, #BV, #FV],           
             Map[t . VariablesHelperBoundVar[#BV,t], Unwrap[#cterms?]]]; 
  /* case: meta variable */
  VariablesHelper[Vars[#M, #BV, #FV], #_,
                  %cterm⟦  ##METAVAR ##cterms? ⟧ ]
  →    
  ConcatVars[Vars[Insert[#METAVAR,#M], #BV, #FV],
             Map[t . VariablesHelperBoundVar[#BV,t], Unwrap[#cterms?]]];

  // TODO-2016-02-03: problem with bound term
  /* case: bound term */
  VariablesHelper[Vars[#M, #BV, #FV], #currBV, 
                  %cterm⟦ [ ##VARIABLE ] ##cterm ⟧] 
  → Foo2;
  // VariablesHelper[Vars[#M, Insert[#VARIABLE, #BV], #FV], Insert[#VARIABLE, #currBV], #cterm];
  
  /* case: variable */
  VariablesHelper[#VARS, #currBV, 
                  %cterm⟦ ##cvariable ⟧] 
  → 
    MatchVariablesHelper[Elem[#cvariable, #currBV], #cvariable, #VARS];
    /* match whether variable is bound in this branch or not */
      MatchVariablesHelper[Boolean, Core_cvariable_sort, VARS ] :: VARS; 
      MatchVariablesHelper[TRUE,  #variable, #VARS             ] → #VARS;
      MatchVariablesHelper[FALSE, #variable, Vars[#M, #BV, #FV]] → Vars[#M, #BV, Insert[#variable,#FV]]; 

/* ConcatVARS
   @param  `VARS`  an accumulator of VARS
   @param  `VARSs` an list of VARS
   @return the component-wise concatenation of each `VARS'` in `VARSs` to `VAR` 
*/
ConcatVars[VARS, $List[VARS] ] :: VARS;
ConcatVars[#VARS, #VARSs] → FoldlP[ vars varsAcc . ConcatVARSHelper[vars, varsAcc], #VARS, #VARSs];
  ConcatVARSHelper[VARS, VARS] :: VARS;
  ConcatVARSHelper[Vars[#M, #BV, #FV], Vars[#M2, #BV2, #FV2]] 
  → Vars[Concat[#M, #M2], Concat[#BV, #BV2], Concat[#FV, #FV2]];


/* ***************************************************** */
/*  Experimental Foldl                                   */
/* ***************************************************** */

// experimental/work in progress to fold over a term 

∀ a . TermFoldl[ v :: Core_cvariable_sort . $sort[a],
                 m :: $String  vs :: $List[a] . $sort[a],
                 c :: $String  ts :: $List[a] . $sort[a], Core_cterm_sort ] :: a;

 TermFoldl[v.#V[v], m xs.#M[m,xs], c ts.#F[c,ts], %cterm⟦ ##CONSTRUCTOR ##cterms? ⟧ ] 
 → 
 #F[#CONSTRUCTOR, Map[ t. TermFoldl[ v.#V[v], m xs.#M[m,xs], c ts.#F[c,ts], t], Unwrap[#cterms?]]];

  /* case: meta var */
  TermFoldl[v.#V[v], m xs.#M[m,xs], c ts.#F[c,ts], %cterm⟦ ##METAVAR ##cterms? ⟧ ]
 → #M[#METAVAR, Map[ t. TermFoldl[v.#V[v], m xs.#M[m,xs], c ts.#F[c,ts], t], Unwrap[#cterms?]]  ];
  

  // TODO-2016-02-03: problem with bound term
  /* case: bound term */
 TermFoldl[v.#V[v], m xs.#M[m,xs], c ts.#F[c,ts],  %cterm⟦ [ ##VARIABLE ] ##cterm  ⟧]
  → Foo3; 
   //#B[#VARIABLE, TermFoldl[v.#V[v], m xs.#M[m,xs], c ts.#F[c,ts], #cterm ]];


  /* case: variable */
 TermFoldl[v.#V[v], m xs.#M[m,xs], c ts.#F[c,ts], %cterm⟦ ##cvariable ⟧ ] 
  → #V[#cvariable] ;

// to use for Termfoldl with i.e.,
// TermFoldl[ x . Var[x], x ys . Meta[x,ys], c bs. Const[c,bs],  #term] == #term
Var[ Core_cvariable_sort ] :: Core_cterm_sort;
Var[ #cvariable ] → %cterm⟦ ##cvariable ⟧;

Meta[ $String, $List[Core_cterms_sort]] :: Core_cterm_sort;
Meta[#METAVAR, #cterms?] → %cterm⟦ ##METAVAR  ##cterms? ⟧;
 
Const[ $String /*Core_constructor_sort */, $List[Core_cterms_sort]] :: Core_cterm_sort;
Const[ #CONSTRUCTOR, #cterms? ] → %cterm⟦ ##CONSTRUCTOR ##cterms? ⟧;

)]
