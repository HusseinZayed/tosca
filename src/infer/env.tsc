// Copyright (c) 2016 IBM Corporation.

import std::core
import std::mapdef
import std::listdef
import std::pairdef
import std::string
import std::num
import core::Core
import systemdef

// --- Sort inference environment

/* Environment entry sort */
enum IEnvEntry | IContent(Content)       // read-only
               | ISystem(TSystem)        // read-only
               | ITerm(Core_cterm_sort)
               | ISort(Core_csort_sort)
               | IBool(Bool)
               | INum(Numeric)
               | IMapSort({String /* sort variable */: Core_csort_sort}) // Sort enviroment (usually called theta)
               | ISortArgs(List<PPair<String Core_csort_sort>>) // map declared sort parameter to actual sort argument
               | ISorts(List<List<PPair<String Core_csort_sort>>>) // Stack of (variable:sort) pairs
               | IVar({String: Core_csort_sort}) // Metavar and variable associated with sort
               | IMeta({String: PPair<List<Core_csort_sort> List<Core_csort_sort>>}) // Metavar apply and substitution argument sorts

/* Corresponding unwrappers */
func UnIContent(IEnvEntry) -> Content
rule UnIContent(IContent(#)) → #

func UnISystem(IEnvEntry) -> TSystem
rule UnISystem(ISystem(#)) → #

func UnITerm(IEnvEntry) -> Core_cterm_sort
rule UnITerm(ITerm(#)) → #

func UnIBool(IEnvEntry) -> Bool
rule UnIBool(IBool(#)) → #

func UnINum(IEnvEntry) -> Numeric
rule UnINum(INum(#)) → #

func UnISort(IEnvEntry) -> Core_csort_sort
rule UnISort(ISort(#)) → #

func UnIMapSort(IEnvEntry) -> {String : Core_csort_sort}
rule UnIMapSort(IMapSort(#)) → #

func UnISortArgs(IEnvEntry) -> List<PPair<String Core_csort_sort>>
rule UnISortArgs(ISortArgs(#)) → #

func UnISorts(IEnvEntry) -> List<List<PPair<String Core_csort_sort>>>
rule UnISorts(ISorts(#)) → #

func UnIVar(IEnvEntry) -> {String: Core_csort_sort}
rule UnIVar(IVar(#)) → #

func UnIMeta(IEnvEntry) -> {String: PPair<List<Core_csort_sort> List<Core_csort_sort>>}
rule UnIMeta(IMeta(#)) → #

/* Initialize environment */
func IEnvNew(#content:Content, #system:TSystem) -> {String:IEnvEntry}
→ IResetMetaArgs(ISetFormalSorts(ISetBoundVarSorts(IResetCounter(ResetSorts(ResetIVars(SetInPattern(
    ISetRemoveAliases(SetSystem(ISetContent(MapNew, #content), #system), HasOption(GetConfig(#system, "java"))), TRUE)))), ()), ()))

// --- Module content

func ISetContent(#env: {String : IEnvEntry}, #content: Content) -> {String : IEnvEntry}
→ ISetValue(#env, "content", IContent(#content))

func IGetContent(#env: {String : IEnvEntry}) -> Content
→ UnIContent(IGetValue(#env, "content"))

// --- System

func SetSystem(#env: {String : IEnvEntry}, #system: TSystem) -> {String : IEnvEntry}
→ ISetValue(#env, "system", ISystem(#system))

func GetSystem(#env: {String : IEnvEntry}) -> TSystem
→ UnISystem(IGetValue(#env, "system"))

// --- InPattern?

func SetInPattern(#env: {String : IEnvEntry}, #inpattern: Bool) -> {String : IEnvEntry}
→ ISetValue(#env, "inpattern", IBool(#inpattern))

func GetInPattern(#env: {String : IEnvEntry}) -> Bool
→ UnIBool(IGetValue(#env, "inpattern"))

// --- Declared sort variable to sort argument mapping

func SetSortArgsMap(#env: {String : IEnvEntry}, #mapping: List<PPair<String Core_csort_sort>>) -> {String : IEnvEntry}
→ ISetValue(#env, "sortargs", ISortArgs(#mapping))

func GetSortArgsMap(#env: {String : IEnvEntry}) -> List<PPair<String Core_csort_sort>>
→ UnISortArgs(IGetValue(#env, "sortargs"))

func GetSortArgs(#env: {String : IEnvEntry}) -> List<Core_csortargs_sort>
→ GetSortArgsAux(GetSortArgsMap(#env))

func GetSortArgsAux(List<PPair<String Core_csort_sort>>) -> List<Core_csortargs_sort>
rule GetSortArgsAux((          )) → csortargs?⟦⟧
rule GetSortArgsAux(Cons(#1, #2)) → csortargs?⟦ < ⟨csort*: UnZipS<String Core_csort_sort>(Cons(#1, #2))⟩ > ⟧

// --- Sort argument counter to generate unique sort argument name

func IResetCounter(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetCounter(#env, 1)

func IGetCounter(#env: {String : IEnvEntry}) -> Numeric
→ UnINum(IGetValue(#env, "counter"))

func ISetCounter(#env: {String : IEnvEntry}, #num: Numeric) -> {String : IEnvEntry}
→ ISetValue(#env, "counter", INum(#num))

func IIncCounter(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetValue(#env, "counter", INum(Plus(IGetCounter(#env), 1)))

// --- Sort environment

/* Reset sort environment */
func ResetSorts(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetValue(#env, "sorts", IMapSort(MapNew))

/* @return the sort environment */
func GetSorts(#env: {String : IEnvEntry}) -> {String:Core_csort_sort}
→ UnIMapSort(IGetValue(#env, "sorts"))

/* Set sort environment */
func SetSorts(#env: {String : IEnvEntry}, #sorts: {String:Core_csort_sort}) -> {String:IEnvEntry}
→ ISetValue(#env, "sorts", IMapSort(#sorts))

/* @return the sort associated to the given sort variable */
func GetSort(#env: {String : IEnvEntry}, #sortvar: String) -> Option<Core_csort_sort>
→ MapGet(GetSorts(#env), #sortvar)

func ISortEqual(Core_csort_sort, String) -> Bool
rule ISortEqual(csort⟦ ##VARIABLE ⟧, #sortvar) → StringEqual(#VARIABLE, #sortvar)
rule ISortEqual(#csort             , #sortvar) → FALSE

/* Add sort variable sort pair to the sort environment. Silently overrides the previous entry (if any) */
func PutSort(#env: {String : IEnvEntry}, #sortvar: String, #sort: Core_csort_sort) -> {String : IEnvEntry}
→ ISetValue(#env, "sorts", IMapSort(MapPut(GetSorts(#env), #sortvar, #sort)))

// --- Stack of bound variable sorts

func IGetBoundVarSorts(#env: {String : IEnvEntry}) -> List<List<PPair<String Core_csort_sort>>>
→ UnISorts(IGetValue(#env, "bvsorts"))

func ISetBoundVarSorts(#env: {String : IEnvEntry}, #sorts: List<List<PPair<String Core_csort_sort>>>) -> {String : IEnvEntry}
→ ISetValue(#env, "bvsorts", ISorts(#sorts))

func IAddBoundVarSort(#env: {String : IEnvEntry}, #var: String, #sort: Core_csort_sort) -> {String : IEnvEntry}
→ ISetBoundVarSorts(#env, IAddBinderSort(IGetBoundVarSorts(#env), #var, #sort))

func IGetBoundVarSort(#env: {String : IEnvEntry}, #var: String) -> Option<Core_csort_sort>
→ IGetBinderSort(IGetBoundVarSorts(#env), #var)

/* @return the top of the stack bound variable sort list */
func IGetDirectBoundVarSorts(#env: {String : IEnvEntry}) -> List<Core_csort_sort>
→ UnZipS(Head(IGetBoundVarSorts(#env)))

// --- Stack of formal parameters sorts

func IGetFormalSorts(#env: {String : IEnvEntry}) -> List<List<PPair<String Core_csort_sort>>>
→ UnISorts(IGetValue(#env, "fsorts"))

func ISetFormalSorts(#env: {String : IEnvEntry}, #sorts: List<List<PPair<String Core_csort_sort>>>) -> {String : IEnvEntry}
→ ISetValue(#env, "fsorts", ISorts(#sorts))

func IAddFormalSort(#env: {String : IEnvEntry}, #var: String,  #sort: Core_csort_sort) -> {String : IEnvEntry}
→ ISetFormalSorts(#env, IAddBinderSort(IGetFormalSorts(#env), #var, #sort))

func IGetFormalSort(#env: {String : IEnvEntry}, #var: String) -> Option<Core_csort_sort>
→ IGetBinderSort(IGetFormalSorts(#env), #var)

/* @return the top of the stack formal parameters sort list */
func IGetDirectFormalSorts(#env: {String : IEnvEntry}) -> List<Core_csort_sort>
→ UnZipS(Head(IGetFormalSorts(#env)))

// --- function manipulating both stack synchronously

func IPushBinderSorts(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetFormalSorts(ISetBoundVarSorts(#env, ((), IGetBoundVarSorts(#env)...)), ((), IGetFormalSorts(#env)...))

func IResetBinderSorts(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ IPushBinderSorts(IPopBinderSorts(#env))

func IPopBinderSorts(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetFormalSorts(ISetBoundVarSorts(#env, Tail(IGetBoundVarSorts(#env))), Tail(IGetFormalSorts(#env)))

func IAddBinderSort(List<List<PPair<String Core_csort_sort>>>, String, Core_csort_sort) -> List<List<PPair<String Core_csort_sort>>>
rule IAddBinderSort((#top, #rest...), #var, #sort) → (Append(PairCons(#var, #sort), #top), #rest...)
rule IAddBinderSort((              ), #var, #sort) → Error("Internal error: misused of binder sort stack in sort inference.")

func IGetBinderSort(#entries: List<List<PPair<String Core_csort_sort>>>, #var: String) -> Option<Core_csort_sort>
→ MaybeO((entries)->HeadO(LookUpVar(#var, entries)),
        PickFirst(#entries, (entry)->IsNotEmpty(LookUpVar(#var, entry))))

// --- Meta variable and variables (free/fresh)

func IGetVars(#env: {String : IEnvEntry}) -> {String: Core_csort_sort}
→ UnIVar(IGetValue(#env, "vars"))

func SetIVars(#env: {String : IEnvEntry}, #metas: {String: Core_csort_sort}) -> {String : IEnvEntry}
→ ISetValue(#env, "vars", IVar(#metas))

func ResetIVars(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ SetIVars(#env, MapNew())

func GetIMetaVar(#env: {String : IEnvEntry}, #metavar:String) -> Option<Core_csort_sort>
→ MapGet(IGetVars(#env), #metavar)

/* @return the sort corresponding to the given `#metavar`. Raises an error when there is no such sort */
func GetIMetaVarE(#env: {String : IEnvEntry}, #metavar:String) -> Core_csort_sort
→ IfPresent(MapGet(IGetVars(#env), #metavar), (sort)->sort, ()->Error(ConcatString("Error: undefined meta variable ", #metavar)))

func IGetVarSort(#env: {String : IEnvEntry}, #var:String) -> Option<Core_csort_sort>
→ MapGetVar(IGetVars(#env), #var)

func AddIMetaVar(#env: {String : IEnvEntry}, #metavar:String, #sort: Core_csort_sort) -> {String : IEnvEntry}
→ SetIVars(#env, MapPut(IGetVars(#env), #metavar, #sort))

/* Associate the given `#metavar` to the given `#sort`.
   Raises an error when the given `#metavar` is already associated with a sort
   @return the extended environment */
func AddIMetaVarE(#env: {String : IEnvEntry}, #metavar:String, #sort: Core_csort_sort) -> {String : IEnvEntry}
→ If(MapContains(IGetVars(#env), #metavar),
    ()->Error(ConcatString("Error: meta variable ", ConcatString(#metavar, " is already declared"))),
    ()->AddIMetaVar(#env, #metavar, #sort))

/* Associate the given `#var` to the given `#sort`, silently replacing any existing entry
   @return the extended environment */
func IAddVar(#env: {String : IEnvEntry}, #var:String, #sort: Core_csort_sort) -> {String : IEnvEntry}
→ SetIVars(#env, MapPutVar(IGetVars(#env), #var, #sort))

/* Associate the given `#var` to the given `#sort`, silently replacing any existing entry
   Raises an error when the given `#var` is already associated with a sort
   @return the extended environment */
func IAddVarE(#env: {String : IEnvEntry}, #var:String, #sort: Core_csort_sort) -> {String : IEnvEntry}
→ If(MapContains(IGetVars(#env), #var),
    ()->Error(ConcatString("Error: variable ", ConcatString(#var, " is already declared"))),
    ()->IAddVar(#env, #var, #sort))

// --- Meta variable apply/substitute arguments

func IResetMetaArgs(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetMetaArgs(#env, MapNew)

func IGetMetaArgs(#env: {String : IEnvEntry}) -> {String: PPair<List<Core_csort_sort> List<Core_csort_sort>>}
→ UnIMeta(IGetValue(#env, "metargs"))

func ISetMetaArgs(#env: {String : IEnvEntry}, #metargs: {String: PPair<List<Core_csort_sort> List<Core_csort_sort>>}) -> {String : IEnvEntry}
→ ISetValue(#env, "metargs", IMeta(#metargs))

func IAddMetaArgs(#env: {String : IEnvEntry}, #metavar: String, #metargs: PPair<List<Core_csort_sort> List<Core_csort_sort>>) -> {String : IEnvEntry}
→ ISetMetaArgs(#env, MapPut(IGetMetaArgs(#env), #metavar, #metargs))

func IGetMetaFormalArgs(#env: {String : IEnvEntry}, #metavar: String) -> List<Core_csort_sort>
→ IfPresent(MapGet(IGetMetaArgs(#env), #metavar), (pair)->Fst(pair), ()->())

func IGetMetaBoundArgs(#env: {String : IEnvEntry}, #metavar: String) -> List<Core_csort_sort>
→ IfPresent(MapGet(IGetMetaArgs(#env), #metavar), (pair)->Snd(pair), ()->())

// --- Dummy metavar counter. Use to generate unique meta variables

func IResetMetaCounter(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetMetaCounter(#env, 1)

func IGetMetaCounter(#env: {String : IEnvEntry}) -> Numeric
→ UnINum(IGetValue(#env, "mcounter"))

func ISetMetaCounter(#env: {String : IEnvEntry}, #num: Numeric) -> {String : IEnvEntry}
→ ISetValue(#env, "mcounter", INum(#num))

func IIncMetaCounter(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetMetaCounter(#env, Plus(IGetMetaCounter(#env), 1))

// --- Whether substitute sort aliases

func ISetRemoveAliases(#env: {String : IEnvEntry}, #value:Bool) -> {String : IEnvEntry}
→ ISetValue(#env, "aliases", IBool(#value))

func IGetRemoveAliases(#env: {String : IEnvEntry}) -> Bool
→ UnIBool(IGetValue(#env, "aliases"))

// --- Some helper functions

func IGetValue(#env: {String : IEnvEntry}, #key: String) -> IEnvEntry
→ UnSOME(MapGet(#env, #key))

func ISetValue(#env: {String : IEnvEntry}, #key: String, #value: IEnvEntry) -> {String : IEnvEntry}
→ MapPut(#env, #key, #value)

/* Search for the sort associated to the given `#var`, either free, fresh, bound, or formal */
// NOTE: nested IfPresent causes problems to Eclipse Neon (type error).
func IFindVarSort(#env: {String : IEnvEntry}, #var:String) -> Option<Core_csort_sort>
→ IfPresent(IGetVarSort(#env, #var),
    (sort)->SOME(sort),
    ()->IFindBoundVarSort(#env, #var))

func IFindBoundVarSort(#env: {String : IEnvEntry}, #var:String) -> Option<Core_csort_sort>
→ IfPresent(IGetFormalSort(#env, #var),
  (sort)->SOME(sort),
  ()->IGetBoundVarSort(#env, #var))
