// Copyright (c) 2016 IBM Corporation.

import Std::Core
import Std::Mapdef
import Std::Listdef
import Std::Pairdef
import Std::Num
import Core::Core
import Systemdef

// --- Sort inference environment

/* Environment entry sort */
enum IEnvEntry | EContent(Content) // read-only
              | ESystem(TSystem)        // read-only
              | ETerm(Core_cterm_sort)
              | ESort(Core_csort_sort)
              | EBool(Bool)
              | ENum(Numeric)
              | EMapMeta({String : Core_csort_sort})
              | EMapSort({String : Core_csort_sort}) // Sort enviroment (usually called theta)
              | ESortArgs(List<List<Pair<String String>>>) // sort variable to generic sort argument

/* Corresponding unwrappers */
func UnContent(IEnvEntry) -> Content
rule UnContent(EContent(#)) → #

func UnSystem(IEnvEntry) -> TSystem
rule UnSystem(ESystem(#)) → #

func UnTerm(IEnvEntry) -> Core_cterm_sort
rule UnTerm(ETerm(#)) → #

func UnBool(IEnvEntry) -> Bool
rule UnBool(EBool(#)) → #

func UnNum(IEnvEntry) -> Numeric
rule UnNum(ENum(#)) → #

func UnSort(IEnvEntry) -> Core_csort_sort
rule UnSort(ESort(#)) → #

func UnMapSort(IEnvEntry) -> {String : Core_csort_sort}
rule UnMapSort(EMapSort(#)) → #

func UnSortArgs(IEnvEntry) -> List<List<Pair<String String>>>
rule UnSortArgs(ESortArgs(#)) → #

/* Initialize environment */
func EnvNew(#content:Content, #system:TSystem) -> {String:IEnvEntry}
→ SetInPattern(SetSystem(SetContent(MapNew<String IEnvEntry>, #content), #system), TRUE)

/* Reset sort environment and sort variables stack */
func ResetEnv(#env:{String:IEnvEntry}) -> {String:IEnvEntry}
→ IResetCounter(ResetSortArgs(ResetSorts(#env)))


// --- Module content

func SetContent(#env: {String : IEnvEntry}, #content: Content) -> {String : IEnvEntry}
→ ISetValue(#env, "content", EContent(#content))

func GetContent(#env: {String : IEnvEntry}) -> Content
→ UnContent(IGetValue(#env, "content"))

// --- System

func SetSystem(#env: {String : IEnvEntry}, #system: TSystem) -> {String : IEnvEntry}
→ ISetValue(#env, "system", ESystem(#system))

func GetSystem(#env: {String : IEnvEntry}) -> TSystem
→ UnSystem(IGetValue(#env, "system"))

// --- InPattern?

func SetInPattern(#env: {String : IEnvEntry}, #inpattern: Bool) -> {String : IEnvEntry}
→ ISetValue(#env, "inpattern", EBool(#inpattern))

func GetInPattern(#env: {String : IEnvEntry}) -> Bool
→ UnBool(IGetValue(#env, "inpattern"))

// --- Stack of sort variable to sort variable argument mappings

/* Reset mapping stack */
func ResetSortArgs(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetValue(#env, "sortargs", ESortArgs(()))

func GetSortArgs(#env: {String : IEnvEntry}) -> List<List<Pair<String String>>>
→ UnSortArgs(IGetValue(#env, "sortargs"))

/* Push the given mapping onto the stack  */
func PushSortArgs(#env: {String : IEnvEntry}, #mapping: List<Pair<String String>>) -> {String : IEnvEntry}
→ ISetValue(#env, "sortargs", ESortArgs(Cons(#mapping, GetSortArgs(#env))))

func PopSortArgs(#env:{String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetValue(#env, "sortargs", ESortArgs(Tail<List>(GetSortArgs(#env))))

func TopSortArgs(#env:{String : IEnvEntry}) -> List<Core_csortargs_sort>
→ csortargs?⟦ < ⟨csort*: Map<Pair Core_csort_sort>((pair)->csort⟦ ⟨VARIABLE: Snd<String String>(pair)⟩ ⟧, Head<List>(GetSortArgs(#env)))⟩ > ⟧

func GetSortArg(#env: {String : IEnvEntry}, #sortvar:String) -> Option<String>
→ HeadO<String>(LookUp<String String>(#sortvar, Flatten<Pair>(GetSortArgs(#env))))

// --- Sort argument counter to generate unique sort argument name

func IResetCounter(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetCounter(#env, 1)

func IGetCounter(#env: {String : IEnvEntry}) -> Numeric
→ UnNum(IGetValue(#env, "counter"))

func ISetCounter(#env: {String : IEnvEntry}, #num: Numeric) -> {String : IEnvEntry}
→ ISetValue(#env, "counter", ENum(#num))

func IIncCounter(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetValue(#env, "counter", ENum(Plus(IGetCounter(#env), 1)))

// --- Sort environment

/* Reset sort environment */
func ResetSorts(#env: {String : IEnvEntry}) -> {String : IEnvEntry}
→ ISetValue(#env, "sorts", EMapSort(MapNew<String Core_csort_sort>))

/* @return the sort environment */
func GetSorts(#env: {String : IEnvEntry}) -> {String:Core_csort_sort}
→ UnMapSort(IGetValue(#env, "sorts"))

/* Set sort environment */
func SetSorts(#env: {String : IEnvEntry}, #sorts: {String:Core_csort_sort}) -> {String:IEnvEntry}
→ ISetValue(#env, "sorts", EMapSort(#sorts))

/* @return the sort associated to the given sort variable */
func GetSort(#env: {String : IEnvEntry}, #sortvar: String) -> Option<Core_csort_sort>
→ MapGet<String Core_csort_sort>(GetSorts(#env), #sortvar)

/* Add sort variable sort pair to the sort environment. Silently overrides the previous entry (if any) */
func PutSort(#env: {String : IEnvEntry}, #sortvar: String, #sort: Core_csort_sort) -> {String : IEnvEntry}
→ ISetValue(#env, "sorts", EMapSort(MapPut<String Core_csort_sort>(GetSorts(#env), #sortvar, #sort)))

// --- Some generic helper functions

func IGetValue(#env: {String : IEnvEntry}, #key: String) -> IEnvEntry
→ UnSOME<IEnvEntry>(MapGet<String IEnvEntry>(#env, #key))

func ISetValue(#env: {String : IEnvEntry}, #key: String, #value: IEnvEntry) -> {String : IEnvEntry}
→ MapPut<String IEnvEntry>(#env, #key, #value)
