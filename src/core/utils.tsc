// Copyright (c) 2016 IBM Corporation.
/*
 *  Various utility function related to the Core language
 */
import std::core
import std::listdef
import std::string
import std::language
import std::text::Text4
import core::Core

/* @return TRUE if the term is a meta-application. Ignore binders and formal parameters  */
func IsMeta(Core_cterm_sort) -> Bool
rule IsMeta(cterm⟦ ##METAVAR ##cterms? ##csubst? ##csortanno? ⟧) → TRUE
rule IsMeta(cterm⟦ { : ##METAVAR  } ##csortanno? ⟧)              → TRUE  // Equivalent to just #METAVAR.
rule IsMeta(cterm⟦ [ v ##csortanno? ] ##cterm[v] ⟧)              → IsMeta(#cterm[var:String])
rule IsMeta(cterm⟦ ( f ##csortanno? ) ##cterm[f] ⟧)              → IsMeta(#cterm[var:String])
rule IsMeta(cterm⟦ thunk ##cterm ⟧)                              → IsMeta(#cterm)
rule IsMeta(#term)                                               → FALSE

/* @return the given term without 'thunk' */
func StripThunk(Core_cterm_sort) -> Core_cterm_sort
rule StripThunk(cterm⟦ thunk ##cterm ⟧)  → #cterm
rule StripThunk(#cterm                )  → #cterm

/* Check whether the given annotation is in the given list */
func HasAnnotation(#anno: String, #anno*: List<Core_canno_sort>) -> Bool
→ HasOption<Core_canno_sort>(PickFirst<Core_canno_sort>(#anno*, (anno) -> EqualAnno(#anno, anno)))

/* Whether the 2 annotation are equals */
func EqualAnno(String, Core_canno_sort) -> Bool
rule EqualAnno(#anno, canno⟦ @ ##CONSTRUCTOR ⟧) → StringEqual(#CONSTRUCTOR, #anno)

/* Add annotation to list. Does not check if already there. */
func AddAnnotation(#anno: String, #anno*: List<Core_canno_sort>) ->  List<Core_canno_sort>
→ Cons(canno⟦ @ ⟨CONSTRUCTOR: #anno⟩ ⟧, #anno*)

/* @return the string concatenation represeting the given `#qualifiedIdentifier` */
func JoinQIdentifier(#cqiden: Core_cqidentifier_sort, #sep: String, #mangle:Bool) -> String
→ Join(QIdentifierList(#cqiden, #mangle), #sep)

/* @return string list of qualified identifiers */
func QIdentifierList(Core_cqidentifier_sort, Bool) -> List<String>
rule QIdentifierList(cqidentifier⟦ ##cidentifier* ##cidentifier ⟧, #mangle) → Append(IdentifierToString(#cidentifier, #mangle), Map((ident) -> IdentifierToString(ident, #mangle), #cidentifier*))
rule QIdentifierList(cqidentifier⟦ ##CONSTRUCTOR ⟧, #mangle) → (If(#mangle, ()->Mangle(#CONSTRUCTOR), ()->#CONSTRUCTOR),)

/* @return the qualified constructor converted to the equivalent qualified identifier */
func QConsToQIden(Core_cqconstructor_sort) -> Core_cqidentifier_sort
rule QConsToQIden(cqconstructor⟦ ##csortqualifier* ##CONSTRUCTOR ⟧) → cqidentifier⟦ ⟨cidentifier*: QConsToQIdens(#csortqualifier*)⟩ ##CONSTRUCTOR ⟧
rule QConsToQIden(cqconstructor⟦ ##CONSTRUCTOR  ⟧) → cqidentifier⟦ ##CONSTRUCTOR ⟧

func QConsToQIdens(List<Core_csortqualifier_sort>) -> List<Core_cidentifier_sort>
rule QConsToQIdens(csortqualifier*⟦ ##CONSTRUCTOR :: ##csortqualifier* ⟧) → cidentifier*⟦ ##CONSTRUCTOR :: ⟨cidentifier*: QConsToQIdens(#csortqualifier*)⟩ ⟧
rule QConsToQIdens(csortqualifier*⟦ ⟧) → cidentifier*⟦ ⟧

/* Convert qualified constructor to string, using given separator */
func QConsToString(#cqcons: Core_cqconstructor_sort, #sep: String) -> String
→ Join(QConsToStringList(#cqcons), #sep)

/* Get qualified constructor as a list of string. */
func QConsToStringList(Core_cqconstructor_sort) -> List<String>
rule QConsToStringList(cqconstructor⟦ ##csortqualifier* ##CONSTRUCTOR ⟧)
→ Append<String>(#CONSTRUCTOR, Map<Core_csortqualifier_sort String>((sort) -> QSortToString(sort), #csortqualifier*))

func QSortToString(Core_csortqualifier_sort) -> String
rule QSortToString(csortqualifier⟦ ##CONSTRUCTOR :: ⟧) → #CONSTRUCTOR

/* @return the string corresponding to the given `#identifier` */
func IdentifierToString(Core_cidentifier_sort, Bool) -> String
rule IdentifierToString(cidentifier⟦ ##CONSTRUCTOR ⟧, FALSE) → #CONSTRUCTOR
rule IdentifierToString(cidentifier⟦ ##VARIABLE    ⟧, FALSE) → #VARIABLE
rule IdentifierToString(cidentifier⟦ ##CONSTRUCTOR ⟧, TRUE ) → Mangle(#CONSTRUCTOR)
rule IdentifierToString(cidentifier⟦ ##VARIABLE    ⟧, TRUE ) → Mangle(#VARIABLE)

/* @return true if there is at least one sort in the given list */
func HasSorts(#csorts? :List<Core_csorts_sort>) -> Bool
→ IsNotEmpty<Core_csorts_sort>(#csorts?)

/* @return true if the sort declaration is parameterized */
func HasSortVars(Core_cdecl_sort) -> Bool
rule HasSortVars(cdecl⟦ data ##csortvars ##CONSTRUCTOR ##cforms ⟧)                                 → TRUE
rule HasSortVars(cdecl⟦ ##canno* ##EXTERN? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → TRUE
rule HasSortVars(#)                                                                                → FALSE

/* @return sort declaration sort parameters, or `NONE` */
func GetSortVars(Core_cdecl_sort) -> Option<Core_csortvars_sort>
rule GetSortVars(cdecl⟦ data ##csortvars ##CONSTRUCTOR ##cforms ⟧)                                 → SOME(#csortvars)
rule GetSortVars(cdecl⟦ ##canno* ##EXTERN? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → SOME(#csortvars)
rule GetSortVars(#)                                                                                → NONE

/* @return extract `csortvars?` from sort  */
func GetMaybeSortVars(Core_cdecl_sort) -> List<Core_csortvars_sort>
rule GetMaybeSortVars(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ##cforms ⟧)                             → #csortvars?
rule GetMaybeSortVars(cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧) → #csortvars?
rule GetMaybeSortVars(#cdecl                                                                       ) → ()

/* @return the list of annotations for the given declaration */
func GetAnnos(Core_cdecl_sort) -> List<Core_canno_sort>
rule GetAnnos(cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧) → #canno*
rule GetAnnos(#)                                                                             → ()

/* @return the conversion to `csort*` from `csorts?` */
func MaybeSortsToSorts(List<Core_csorts_sort>) -> List<Core_csort_sort>
rule MaybeSortsToSorts(csorts?⟦              ⟧)           → ()
rule MaybeSortsToSorts(csorts?⟦ ( ##csort* ) ⟧)           → #csort*

/* @return the conversion of `csort*` to `csorts?` */
func SortsToMaybeSorts(List<Core_csort_sort>) -> List<Core_csorts_sort>
rule SortsToMaybeSorts(csort*⟦⟧) → csorts?⟦⟧
rule SortsToMaybeSorts(#csort* ) → csorts?⟦ ( ##csort* ) ⟧

/* @return sort from sort annotation, or NONE */
func MaybeSortAnnoToSort(List<Core_csortanno_sort>) -> Option<Core_csort_sort>
rule MaybeSortAnnoToSort(csortanno?⟦ ⟧)           → NONE
rule MaybeSortAnnoToSort(csortanno?⟦ : ##csort ⟧) → SOME(#csort)

/* @return sort of the key for the given ``#mapsort` */
func GetMapKeySort(Core_cmapsort_sort) -> Core_csort_sort
rule GetMapKeySort(cmapsort⟦ ##csort1 : ##csort2 ⟧) → #csort1

func GetMapValueSort(Core_cmapsort_sort) -> Core_csort_sort
rule GetMapValueSort(cmapsort⟦ ##csort1 : ##csort2 ⟧) → #csort2

/* @return sort from term, or NONE */
func TermSort(Core_cterm_sort) -> Option<Core_csort_sort>
rule TermSort(cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? : ##csort ⟧) → SOME(#csort)
rule TermSort(cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? : ##csort ⟧)          → SOME(#csort)
rule TermSort(cterm⟦ ##STRING ⟧)                                                  → SOME(csort⟦ String ⟧)
rule TermSort(cterm⟦ ##NUMBER ⟧)                                                  → SOME(csort⟦ Numeric ⟧)
rule TermSort(cterm⟦ ##canno* ##VARIABLE : ##csort ⟧)                             → SOME(#csort)
rule TermSort(cterm⟦ { ##cmapentries } : ##csort ⟧)                               → SOME(#csort)
rule TermSort(cterm⟦ [ x ##csortanno? ] ##cterm[x] ⟧)                             → TermSort(#cterm[x])
rule TermSort(cterm⟦ ( x ##csortanno? ) ##cterm[x] ⟧)                             → TermSort(#cterm[x])
rule TermSort(cterm⟦ thunk ##cterm ⟧)                                             → TermSort(#cterm) // FIXME
rule TermSort(#)                                                                  → NONE

/* Create higher-order sort */
func HOSort(List<Core_csort_sort>, List<Core_csort_sort>, Core_csort_sort) -> Core_csort_sort
rule HOSort(Cons(#csort: Core_csort_sort, #csort*: List<Core_csort_sort>), #bvsorts, #sort) → csort⟦ ( ##csort ) ⟨csort: HOSort(#csort*, #bvsorts, #sort)⟩ ⟧
rule HOSort((), Cons(#csort: Core_csort_sort, #csort*: List<Core_csort_sort>), #sort)       → csort⟦ [ ##csort ] ⟨csort: HOSort((), #csort*, #sort)⟩ ⟧
rule HOSort((), (), #csort)                         → #csort


/* @return the convertion of the given optional sort to an optional sort annotation */
func MaybeSortToMaybeSortAnno(Option<Core_csort_sort>) -> List<Core_csortanno_sort>
rule MaybeSortToMaybeSortAnno(SOME(#csort)) → csortanno?⟦ : ##csort ⟧
rule MaybeSortToMaybeSortAnno(NONE        ) → csortanno?⟦⟧

/* @return `cterm*` from `cterms?` */
func MaybeTermsToTerms(List<Core_cterms_sort>) -> List<Core_cterm_sort>
rule MaybeTermsToTerms(cterms?⟦ ( ##cterm* ) ⟧) → #cterm*
rule MaybeTermsToTerms(#cterms?               ) → ()

/* @return `cterms?` from `cterms*` */
func TermsToMaybeTerms(List<Core_cterm_sort>) -> List<Core_cterms_sort>
rule TermsToMaybeTerms(()     ) → cterms?⟦⟧
rule TermsToMaybeTerms(#cterm*) → cterms?⟦ ( ##cterm* ) ⟧

/* Append the given `#term` to the given `#cterms?`  */
func AppendTerm(#term: Core_cterm_sort, #terms?: List<Core_cterms_sort>) -> List<Core_cterms_sort>
→ cterms?⟦ ( ⟨cterm*: Append(#term, MaybeTermsToTerms(#terms?))⟩ ) ⟧

/* @return `cterm*` from `csubst?` */
func MaybeSubstToTerms(List<Core_csubst_sort>) -> List<Core_cterm_sort>
rule MaybeSubstToTerms(csubst?⟦              ⟧) → ()
rule MaybeSubstToTerms(csubst?⟦ [ ##cterm* ] ⟧) → #cterm*

func GetFormalParamSorts(Core_csort_sort) -> List<Core_csort_sort>
rule GetFormalParamSorts(csort⟦ ( ##csort1 ) ##csort2 ⟧)  → Cons(#csort1, GetFormalParamSorts(#csort2))
rule GetFormalParamSorts(#csort                       )  → ()

func GetBoundVarSorts(Core_csort_sort) -> List<Core_csort_sort>
rule GetBoundVarSorts(csort⟦ [ ##csort1 ] ##csort2 ⟧)  → Cons(#csort1, GetBoundVarSorts(#csort2))
rule GetBoundVarSorts(#csort                       )  → ()

/* @return the sort without binder sorts */
func GetFOSort(Core_csort_sort) -> Core_csort_sort
rule GetFOSort(csort⟦ [ ##csort1 ] ##csort2 ⟧) → GetFOSort(#csort2)
rule GetFOSort(csort⟦ ( ##csort1 ) ##csort2 ⟧) → GetFOSort(#csort2)
rule GetFOSort(csort⟦ thunk ##csort ⟧) → GetFOSort(#csort)
rule GetFOSort(#sort) → #sort

/* @return a sort corresponding to the given sort declaration */
func DeclToSort(Core_cdecl_sort) -> Core_csort_sort
rule DeclToSort(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ##cforms ⟧)               → DataDeclToSort(#csortvars?, #CONSTRUCTOR)

// TODO: function
//rule DeclToSort(cdecl⟦ ##canno* ##EXTERN? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → SOME(#csortvars)
rule DeclToSort(#cdecl) → Error<Core_csort_sort>("Unimplemented")

func DataDeclToSort(List<Core_csortvars_sort>, String) -> Core_csort_sort
rule DataDeclToSort(csortvars?⟦⟧, #CONSTRUCTOR) → csort⟦ ##CONSTRUCTOR ⟧
rule DataDeclToSort(#csortvars?, #CONSTRUCTOR) → csort⟦ ##CONSTRUCTOR ( ⟨csort*:MaybeSortVarsToSorts(#csortvars?)⟩ ) ⟧

func MaybeSortVarsToSorts(List<Core_csortvars_sort>) -> List<Core_csort_sort>
rule MaybeSortVarsToSorts(csortvars?⟦                 ⟧) → csort*⟦⟧
rule MaybeSortVarsToSorts(csortvars?⟦ ∀ ##VARIABLE+ . ⟧) → Map((var)->csort⟦ ⟨VARIABLE: var⟩ ⟧, #VARIABLE+)

func VarsToMaybeSortVars(List<String>) -> List<Core_csortvars_sort>
rule VarsToMaybeSortVars(())         → csortvars?⟦⟧
rule VarsToMaybeSortVars(#VARIABLE+) → csortvars?⟦ ∀ ##VARIABLE+ . ⟧

/* @return the variable of the given sort variable, or an error */
func GetSortVarE(Core_csort_sort) -> String
rule GetSortVarE(csort⟦ ##VARIABLE ⟧) → #VARIABLE
rule GetSortVarE(#csort) → Error(ConcatString("Internal Error: not a variable sort: ", PrintSort(#csort)))

/* @return the list of sort variables in the given list of `#sorts` */
func SortVarsSorts(#sorts: List<Core_csort_sort>, #svars:List<String>) -> List<String>
→ FoldlP((sort svars)->SortVarsSort(sort, svars), #svars, #sorts)

/* @return the list of sort variables in the given `#sort` */
func SortVarsSort(Core_csort_sort, List<String>) -> List<String>
rule SortVarsSort(csort⟦ ##CONSTRUCTOR ##csorts? ⟧, #svars) → SortVarsSorts(MaybeSortsToSorts(#csorts?), #svars)
rule SortVarsSort(csort⟦ ##VARIABLE              ⟧, #svars) → ConditionalInsert(Not(HasOption(PickFirst(#svars, (v)->Equal(v, #VARIABLE)))), #VARIABLE, #svars)
rule SortVarsSort(csort⟦ [ ##csort ] ##csort2    ⟧, #svars) → SortVarsSort(#csort2, SortVarsSort(#csort, #svars))
rule SortVarsSort(csort⟦ ( ##csort ) ##csort2    ⟧, #svars) → SortVarsSort(#csort2, SortVarsSort(#csort, #svars))
rule SortVarsSort(csort⟦ { ##cmapsort }          ⟧, #svars) → #svars // TODO
rule SortVarsSort(csort⟦ data ##csort            ⟧, #svars) → SortVarsSort(#csort, #svars)
rule SortVarsSort(csort⟦ thunk ##csort           ⟧, #svars) → SortVarsSort(#csort, #svars)

/* @return `TRUE` is the given `cform` is `allows-variable` */
func IsAllowsVar(Core_cform_sort) -> Bool
rule IsAllowsVar(cform⟦ allows-variable ⟧) → TRUE
rule IsAllowsVar(#cform                  ) → FALSE

// --- Print utilities

/* Print the given `#sort` */
func PrintSort(#sort: Core_csort_sort) -> String
→ Trim(PrintTerm<Text4_text_sort>("text", Core_Print_csort(#sort)))
