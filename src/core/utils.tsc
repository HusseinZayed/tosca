// Copyright (c) 2016 IBM Corporation.
/*
 *  Various utility function related to the Core language
 */
import Std::Core
import Std::Listdef
import Std::String
import Std::Language
import Core::Core
import Text::Text4

/* @return TRUE if the term is a meta-application. Ignore binders and formal parameters  */
func IsMeta(Core_cterm_sort) -> Bool
rule IsMeta(cterm⟦ ##METAVAR ##cterms? ##csubst? ##csortanno? ⟧) → TRUE
rule IsMeta(cterm⟦ [ v ##csortanno? ] ##cterm ⟧)                 → IsMeta(#cterm[var:String])
rule IsMeta(cterm⟦ ( f ##csortanno? ) ##cterm ⟧)                 → IsMeta(#cterm[var:String])
rule IsMeta(cterm⟦ thunk ##cterm ⟧)                              → IsMeta(#cterm)
rule IsMeta(#term)                                              → FALSE

/* Check whether the given annotation is in the given list */
func HasAnnotation(#anno: String, #anno*: List<Core_canno_sort>) -> Bool
→ HasOption<Core_canno_sort>(PickFirst<Core_canno_sort>(#anno*, (anno) -> EqualAnno(#anno, anno)))

/* Whether the 2 annotation are equals */
func EqualAnno(String, Core_canno_sort) -> Bool
rule EqualAnno(#anno, canno⟦ @ ##CONSTRUCTOR ⟧) → StringEqual(#CONSTRUCTOR, #anno)

/* Add annotation to list. Does not check if already there. */
func AddAnnotation(#anno: String, #anno*: List<Core_canno_sort>) ->  List<Core_canno_sort>
→ Cons(canno⟦ @ ⟨CONSTRUCTOR: #anno⟩ ⟧, #anno*)

/* Get qualified constructor as a list of string. */
func QConsToStringList(Core_cqconstructor_sort) -> List<String>
rule QConsToStringList(cqconstructor⟦ ##csortqualifier* ##CONSTRUCTOR ⟧)
→ Append<String>(#CONSTRUCTOR, Map<Core_csortqualifier_sort String>((sort) -> QSortToString(sort), #csortqualifier*))

/* Convert qualified constructor to string, using given separator */
func QConsToString(#cqcons: Core_cqconstructor_sort, #sep: String) -> String
→ Join(QConsToStringList(#cqcons), #sep)

func QSortToString(Core_csortqualifier_sort) -> String
rule QSortToString(csortqualifier⟦ ##CONSTRUCTOR :: ⟧) → #CONSTRUCTOR

/* @return true if there is at least one sort in the given list */
func HasSorts(#csorts? :List<Core_csorts_sort>) -> Bool
→ IsNotEmpty<Core_csorts_sort>(#csorts?)

/* @return true if the sort declaration is parameterized */
func HasSortVars(Core_cdecl_sort) -> Bool
rule HasSortVars(cdecl⟦ data ##csortvars ##CONSTRUCTOR ##cforms ⟧)                                 → TRUE
rule HasSortVars(cdecl⟦ ##canno* ##extern_TOK? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → TRUE
rule HasSortVars(#)                                                                                → FALSE

/* @return sort declaration sort parameters, or `NONE` */
func GetSortVars(Core_cdecl_sort) -> Option<Core_csortvars_sort>
rule GetSortVars(cdecl⟦ data ##csortvars ##CONSTRUCTOR ##cforms ⟧)                                 → SOME(#csortvars)
rule GetSortVars(cdecl⟦ ##canno* ##extern_TOK? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → SOME(#csortvars)
rule GetSortVars(#)                                                                                → NONE

/* @return sort from sort annotation, or NONE */
func MaybeSortAnnoToSort(List<Core_csortanno_sort>) -> Option<Core_csort_sort>
rule MaybeSortAnnoToSort(csortanno?⟦ ⟧)           → NONE
rule MaybeSortAnnoToSort(csortanno?⟦ : ##csort ⟧) → SOME(#csort)

/* @return sort from term, or NONE */
func TermSort(Core_cterm_sort) -> Option<Core_csort_sort>
rule TermSort(cterm⟦ ##cqconstructor ##csortargs? ##cterms? : ##csort ⟧) → SOME(#csort)
rule TermSort(cterm⟦ ##METAVAR ##cterms? ##csubst? : ##csort ⟧)          → SOME(#csort)
rule TermSort(cterm⟦ ##STRING ⟧)                                         → SOME(csort⟦ String ⟧)
rule TermSort(cterm⟦ ##NUMBER ⟧)                                         → SOME(csort⟦ Numeric ⟧)
rule TermSort(cterm⟦ ##VARIABLE : ##csort ⟧)                             → SOME(#csort)
rule TermSort(cterm⟦ { ##cmapentries } ⟧)                                → NONE  // TODO:
rule TermSort(cterm⟦ [ x ##csortanno? ] ##cterm ⟧)                       → TermSort(#cterm)
rule TermSort(cterm⟦ ( x ##csortanno? ) ##cterm ⟧)                       → TermSort(#cterm)
rule TermSort(cterm⟦ thunk ##cterm ⟧)                                    → TermSort(#cterm)
rule TermSort(#)                                                         → NONE

/* @return a sort corresponding to the given sort declaration */
func DeclToSort(Core_cdecl_sort) -> Core_csort_sort
rule DeclToSort(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ##cforms ⟧)               → DataDeclToSort(#csortvars?, #CONSTRUCTOR)

// TODO: function
//rule DeclToSort(cdecl⟦ ##canno* ##extern_TOK? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → SOME(#csortvars)
rule DeclToSort(#cdecl) → Error<Core_csort_sort>("Unimplemented")

func DataDeclToSort(List<Core_csortvars_sort>, String) -> Core_csort_sort
rule DataDeclToSort(csortvars?⟦                    ⟧, #CONSTRUCTOR) → csort⟦ ##CONSTRUCTOR ⟧
rule DataDeclToSort(csortvars?⟦ ∀ ##variable_TOK+ .⟧, #CONSTRUCTOR) → csort⟦ ##CONSTRUCTOR ( ⟨csort*: Map<String Core_csort_sort>((var)->csort⟦ ⟨VARIABLE: var⟩ ⟧, #variable_TOK+)⟩ ) ⟧

// --- Print utilities

func PrintSort(#sort: Core_csort_sort) -> String
→ Trim(PrintTerm<Text4_text_sort>("text", Core_Print_csort(#sort)))
