// Copyright (c) 2016 IBM Corporation.
/*
 *  Various utility function related to the Core language
 */
import std::core
import std::listdef
import std::pairdef
import std::string
import std::language
import std::text::Text4
import core::Core

/* @return `TRUE` if the term is a meta-variable. Ignore binders and formal parameters  */
func IsMeta(Core_cterm_sort) -> Bool
rule IsMeta(cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno? ⟧) → TRUE
rule IsMeta(cterm⟦ ##canno* { : ##METAVAR  } ##csortanno? ⟧)              → TRUE  // Equivalent to just #METAVAR.
rule IsMeta(cterm⟦ ##canno* [ v ##csortanno? ] ##cterm[v] ⟧)              → IsMeta(#cterm[var:String])
rule IsMeta(cterm⟦ ##canno* ( f ##csortanno? ) ##cterm[f] ⟧)              → IsMeta(#cterm[var:String])
rule IsMeta(cterm⟦ ##canno* thunk ##cterm ⟧)                              → IsMeta(#cterm)
rule IsMeta(#term)                                               → FALSE


/* @return `TRUE` if the given `#term` is a meta variable of the given `#name`  */
func IsNamedMeta(Core_cterm_sort, String) -> Bool
rule IsNamedMeta(cterm⟦ ##METAVAR ##cterms? ##csubst? ##csortanno? ⟧, #name) → StringEqual(#METAVAR, #name)
rule IsNamedMeta(#term, #name)                                               → FALSE

// Extract meta variables, associated with their annotations, out of the given list of `#terms`.
func GetAnnoMetaVariables(List<Core_cterm_sort>) -> List<PPair<List<Core_canno_sort> String>>
rule GetAnnoMetaVariables(cterm*⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno? ##cterm* ⟧) → (PairCons(#canno*, #METAVAR), GetAnnoMetaVariables(#cterm*)...)
rule GetAnnoMetaVariables(cterm*⟦ ##cterm ##cterm* ⟧                                            ) → GetAnnoMetaVariables(#cterm*)
rule GetAnnoMetaVariables(cterm*⟦ ⟧                                                             ) → ()

// Extract meta variables of the given list of `#terms`.
func GetMetaVariables(List<Core_cterm_sort>) -> List<String>
rule GetMetaVariables(cterm*⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno? ##cterm* ⟧) → (#METAVAR, GetMetaVariables(#cterm*)...)
rule GetMetaVariables(cterm*⟦ ##cterm ##cterm* ⟧                                            ) → GetMetaVariables(#cterm*)
rule GetMetaVariables(cterm*⟦ ⟧                                                             ) → ()

/* @return the given `#term` without any binders, including thunk. */
func StripBinders(Core_cterm_sort) -> Core_cterm_sort
rule StripBinders(cterm⟦ ##canno* thunk ##cterm                 ⟧) → #cterm
rule StripBinders(cterm⟦ ##canno* ( f ##csortanno? ) ##cterm[f] ⟧) → StripBinders(#cterm[f])
rule StripBinders(cterm⟦ ##canno* [ v ##csortanno? ] ##cterm[v] ⟧) → StripBinders(#cterm[v])
rule StripBinders(#cterm                                        ) → #cterm

/* Check whether the given annotation is in the given list */
func HasAnnotation(#anno: String, #anno*: List<Core_canno_sort>) -> Bool
→ HasOption(PickFirst(#anno*, (anno) -> EqualAnno(#anno, anno)))

/* Get the first annotation of the given `#name` in the given `#list` */
func GetAnnotation(#anno: String, #anno*: List<Core_canno_sort>) -> Option<Core_canno_sort>
→ PickFirst(#anno*, (anno) -> EqualAnno(#anno, anno))

/* Get the first annotation arguments of the given `#name` in the given `#term` */
func GetTermAnnotationArgs(#anno: String, #term: Core_cterm_sort) -> List<Core_cterm_sort>
→ GetOAnnotationArgs(GetAnnotation(#anno, GetAnnotations(#term)))

/* Whether the 2 annotations are equals */
func EqualAnno(String, Core_canno_sort) -> Bool
rule EqualAnno(#anno, canno⟦ @ ##CONSTRUCTOR ##cterms? ⟧) → StringEqual(#CONSTRUCTOR, #anno)
rule EqualAnno(#anno, canno⟦ @ ##METAVAR               ⟧) → StringEqual(#METAVAR, ConcatString("#", #anno))

/* Add annotation to list. Does not check if already there. */
func AddAnnotation(#CONSTRUCTOR: String, #anno*: List<Core_canno_sort>) ->  List<Core_canno_sort>
→ (canno⟦ @ ##CONSTRUCTOR ⟧, #anno*...)

/* Remove the given annotation from the list. Only remove the first found annotation. */
func RemoveAnnotation(String, List<Core_canno_sort>) ->  List<Core_canno_sort>
rule RemoveAnnotation(#anno, (                 )) → ()
rule RemoveAnnotation(#anno, (#anno2, #annos...)) → if EqualAnno(#anno, #anno2) #annos else (#anno2, RemoveAnnotation(#anno, #annos)...)

/* Get the annotation arguments */
func GetAnnotationArgs(Core_canno_sort) -> List<Core_cterm_sort>
rule GetAnnotationArgs(canno⟦ @ ##CONSTRUCTOR ( ##cterm* ) ⟧) → #cterm*
rule GetAnnotationArgs(#canno                               ) → ()

/* Get the optional annotation arguments */
func GetOAnnotationArgs(Option<Core_canno_sort>) -> List<Core_cterm_sort>
rule GetOAnnotationArgs(SOME(canno⟦ @ ##CONSTRUCTOR ( ##cterm* ) ⟧)) → #cterm*
rule GetOAnnotationArgs(#canno                                     ) → ()

/* Extract the annotations list from the given `#term` */
func GetAnnotations(Core_cterm_sort) -> List<Core_canno_sort>
rule GetAnnotations(cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧) → #canno*
rule GetAnnotations(cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno?          ⟧) → #canno*
rule GetAnnotations(cterm⟦ ##canno* ##cliteral                                          ⟧) → #canno*
rule GetAnnotations(cterm⟦ ##canno* ##cvariable ##csortanno?                            ⟧) → #canno*
rule GetAnnotations(cterm⟦ ##canno* { ##cmapentries?  } ##csortanno?                    ⟧) → #canno*
rule GetAnnotations(cterm⟦ ##canno* [ v ##csortanno? ] ##cterm[v]                       ⟧) → #canno*
rule GetAnnotations(cterm⟦ ##canno* ( f ##csortanno? ) ##cterm[f]                       ⟧) → #canno*
rule GetAnnotations(cterm⟦ ##canno* thunk ##cterm                                       ⟧) → #canno*
rule GetAnnotations(cterm⟦ ##canno* ##METAVAR ##csortanno? = ##cterm                    ⟧) → #canno*
rule GetAnnotations(cterm⟦ ##canno* let ##METAVAR ##csortanno? = ##cterm ##cterm2       ⟧) → #canno*

/* Annotate the given `#term`. Existing annotations are preserved. Does not check for duplicate. */
func AnnotateTerm(Core_cterm_sort, List<Core_canno_sort>) -> Core_cterm_sort

  rule AnnotateTerm(cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧, #canno*2)
  → cterm⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧

  rule AnnotateTerm(cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno?          ⟧, #canno*2)
  → cterm⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ ##METAVAR ##cterms? ##csubst? ##csortanno?          ⟧

  rule AnnotateTerm(cterm⟦ ##canno* ##cliteral                                          ⟧, #canno*2)
  → cterm⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ ##cliteral                                          ⟧

  rule AnnotateTerm(cterm⟦ ##canno* ##cvariable ##csortanno?                            ⟧, #canno*2)
  → cterm⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ ##cvariable ##csortanno?                            ⟧

  rule AnnotateTerm(cterm⟦ ##canno* { ##cmapentries?  } ##csortanno?                    ⟧, #canno*2)
  → cterm⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ { ##cmapentries?  } ##csortanno?                    ⟧

  rule AnnotateTerm(cterm⟦ ##canno* [ v ##csortanno? ] ##cterm[v]                       ⟧, #canno*2)
  → cterm⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ [ v ##csortanno? ] ##cterm[v]                       ⟧

  rule AnnotateTerm(cterm⟦ ##canno* ( f ##csortanno? ) ##cterm[f]                       ⟧, #canno*2)
  → cterm⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ ( f ##csortanno? ) ##cterm[f]                       ⟧

  rule AnnotateTerm(cterm⟦ ##canno* thunk ##cterm                                       ⟧, #canno*2)
  → cterm⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ thunk ##cterm                                       ⟧

  rule AnnotateTerm(cterm⟦ ##canno* ##METAVAR ##csortanno? = ##cterm                    ⟧, #canno*2)
  → cterm⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ ##METAVAR ##csortanno? = ##cterm                    ⟧

  rule AnnotateTerm(cterm⟦ ##canno* let ##METAVAR ##csortanno? = ##cterm ##cterm2 ⟧, #canno*2)
  → cterm⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ let ##METAVAR ##csortanno? = ##cterm ##cterm2 ⟧

/* Annotate the given `#sort`. Existing annotations are preserved. Does not check for duplicate. */
func AnnotateSort(Core_csort_sort, List<Core_canno_sort>) -> Core_csort_sort
rule AnnotateSort(csort⟦ ##canno* ##CONSTRUCTOR ##csorts? ⟧, #canno*2) → csort⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ ##CONSTRUCTOR ##csorts? ⟧
rule AnnotateSort(csort⟦ ##canno* ##VARIABLE              ⟧, #canno*2) → csort⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ ##VARIABLE              ⟧
rule AnnotateSort(csort⟦ ##canno* [ ##csort ] ##csort2    ⟧, #canno*2) → csort⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ [ ##csort ] ##csort2    ⟧
rule AnnotateSort(csort⟦ ##canno* ( ##csort ) ##csort2    ⟧, #canno*2) → csort⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ ( ##csort ) ##csort2    ⟧
rule AnnotateSort(csort⟦ ##canno* { ##cmapsort }          ⟧, #canno*2) → csort⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ { ##cmapsort }          ⟧
rule AnnotateSort(csort⟦ ##canno* data ##csort            ⟧, #canno*2) → csort⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ data ##csort            ⟧
rule AnnotateSort(csort⟦ ##canno* thunk ##csort           ⟧, #canno*2) → csort⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ thunk ##csort           ⟧

/* Extract the annotations list from the given `#sort` */
func GetSortAnnotations(Core_csort_sort) -> List<Core_canno_sort>
rule GetSortAnnotations(csort⟦ ##canno* ##CONSTRUCTOR ##csorts? ⟧) → #canno*
rule GetSortAnnotations(csort⟦ ##canno* ##VARIABLE              ⟧) → #canno*
rule GetSortAnnotations(csort⟦ ##canno* [ ##csort ] ##csort2    ⟧) → #canno*
rule GetSortAnnotations(csort⟦ ##canno* ( ##csort ) ##csort2    ⟧) → #canno*
rule GetSortAnnotations(csort⟦ ##canno* { ##cmapsort }          ⟧) → #canno*
rule GetSortAnnotations(csort⟦ ##canno* data ##csort            ⟧) → #canno*
rule GetSortAnnotations(csort⟦ ##canno* thunk ##csort           ⟧) → #canno*

/* Remove the given `#anno` from the annotations on the given sort */
func RemoveSortAnnotation(String, Core_csort_sort) -> Core_csort_sort
rule RemoveSortAnnotation(#anno, csort⟦ ##canno* ##CONSTRUCTOR ##csorts? ⟧) → csort⟦ ⟨canno*: RemoveAnnotation(#anno, #canno*)⟩ ##CONSTRUCTOR ##csorts? ⟧
rule RemoveSortAnnotation(#anno, csort⟦ ##canno* ##VARIABLE              ⟧) → csort⟦ ⟨canno*: RemoveAnnotation(#anno, #canno*)⟩ ##VARIABLE              ⟧
rule RemoveSortAnnotation(#anno, csort⟦ ##canno* [ ##csort ] ##csort2    ⟧) → csort⟦ ⟨canno*: RemoveAnnotation(#anno, #canno*)⟩ [ ##csort ] ##csort2    ⟧
rule RemoveSortAnnotation(#anno, csort⟦ ##canno* ( ##csort ) ##csort2    ⟧) → csort⟦ ⟨canno*: RemoveAnnotation(#anno, #canno*)⟩ ( ##csort ) ##csort2    ⟧
rule RemoveSortAnnotation(#anno, csort⟦ ##canno* { ##cmapsort }          ⟧) → csort⟦ ⟨canno*: RemoveAnnotation(#anno, #canno*)⟩ { ##cmapsort }          ⟧
rule RemoveSortAnnotation(#anno, csort⟦ ##canno* data ##csort            ⟧) → csort⟦ ⟨canno*: RemoveAnnotation(#anno, #canno*)⟩ data ##csort            ⟧
rule RemoveSortAnnotation(#anno, csort⟦ ##canno* thunk ##csort           ⟧) → csort⟦ ⟨canno*: RemoveAnnotation(#anno, #canno*)⟩ thunk ##csort           ⟧


/* @return the string concatenation represeting the given `#qualifiedIdentifier` */
func JoinQIdentifier(#cqiden: Core_cqidentifier_sort, #sep: String, #mangle:Bool) -> String
→ Join(QIdentifierList(#cqiden, #mangle), #sep)

/* @return string list of qualified identifiers */
func QIdentifierList(Core_cqidentifier_sort, Bool) -> List<String>
rule QIdentifierList(cqidentifier⟦ ##cidentifierqualifier* ##cidentifier ⟧, #mangle) → Append(IdentifierToString(#cidentifier, #mangle), IdentifierQList(#cidentifierqualifier*, #mangle))
rule QIdentifierList(cqidentifier⟦ ##CONSTRUCTOR                         ⟧, #mangle) → (If(#mangle, ()->Mangle(#CONSTRUCTOR), ()->#CONSTRUCTOR),)

/* @return string list of identifier qualifier */
func IdentifierQList(List<Core_cidentifierqualifier_sort>, Bool) -> List<String>
rule IdentifierQList(#cidentifierqualifier*, #mangle) →  Map((ident) -> QIdentifierToString(ident, #mangle), #cidentifierqualifier*)

/* Convert qualified constructor to string, using given separator */
func QConsToString(#cqcons: Core_cqconstructor_sort, #sep: String) -> String
→ Join(QConsToStringList(#cqcons), #sep)

/* Get qualified constructor as a list of string. */
func QConsToStringList(Core_cqconstructor_sort) -> List<String>
rule QConsToStringList(cqconstructor⟦ ##csortqualifier* ##CONSTRUCTOR ⟧)
→ Append<String>(#CONSTRUCTOR, Map((sort) -> QSortToString(sort), #csortqualifier*))

func QSortToString(Core_csortqualifier_sort) -> String
rule QSortToString(csortqualifier⟦ ##CONSTRUCTOR :: ⟧) → #CONSTRUCTOR

/* @return the string corresponding to the given `#qualifiedIdentifier` */
func QIdentifierToString(Core_cidentifierqualifier_sort, Bool) -> String
rule QIdentifierToString(cidentifierqualifier⟦ ##cidentifier :: ⟧, #mangle) → IdentifierToString(#cidentifier, #mangle)

/* @return the string corresponding to the given `#identifier` */
func IdentifierToString(Core_cidentifier_sort, Bool) -> String
rule IdentifierToString(cidentifier⟦ ##CONSTRUCTOR ⟧, FALSE) → #CONSTRUCTOR
rule IdentifierToString(cidentifier⟦ ##VARIABLE    ⟧, FALSE) → #VARIABLE
rule IdentifierToString(cidentifier⟦ ##CONSTRUCTOR ⟧, TRUE ) → Mangle(#CONSTRUCTOR)
rule IdentifierToString(cidentifier⟦ ##VARIABLE    ⟧, TRUE ) → Mangle(#VARIABLE)

/* @return true if there is at least one sort in the given list */
func HasSorts(#csorts? :List<Core_csorts_sort>) -> Bool
→ IsNotEmpty<Core_csorts_sort>(#csorts?)

/* @return true if the sort declaration is parameterized */
func HasSortVars(Core_cdecl_sort) -> Bool
rule HasSortVars(cdecl⟦ ##canno* data ##csortvars ##CONSTRUCTOR ##cforms ⟧)                    → TRUE
rule HasSortVars(cdecl⟦ ##canno* ##EXTERN? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → TRUE
rule HasSortVars(#)                                                                            → FALSE

/* @return sort declaration sort parameters, or `NONE` */
func GetSortVars(Core_cdecl_sort) -> Option<Core_csortvars_sort>
rule GetSortVars(cdecl⟦  ##canno* data ##csortvars ##CONSTRUCTOR ##cforms ⟧)                   → SOME(#csortvars)
rule GetSortVars(cdecl⟦ ##canno* ##EXTERN? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → SOME(#csortvars)
rule GetSortVars(#)                                                                            → NONE

/* @return extract `csortvars?` from sort  */
func GetMaybeSortVars(Core_cdecl_sort) -> List<Core_csortvars_sort>
rule GetMaybeSortVars(cdecl⟦ ##canno* data ##csortvars? ##CONSTRUCTOR ##cforms ⟧)                    → #csortvars?
rule GetMaybeSortVars(cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧) → #csortvars?
rule GetMaybeSortVars(#cdecl                                                                       ) → ()

/* @return the list of annotations for the given declaration */
func GetAnnos(Core_cdecl_sort) -> List<Core_canno_sort>
rule GetAnnos(cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧) → #canno*
rule GetAnnos(#)                                                                             → ()

/* @return the conversion to `csort*` from `csortsdefault?` */
func MaybeSortsDefaultToSorts(List<Core_csortsdefault_sort>) -> List<Core_csort_sort>
rule MaybeSortsDefaultToSorts(csortsdefault?⟦                     ⟧) → ()
rule MaybeSortsDefaultToSorts(csortsdefault?⟦ ( ##csortdefault* ) ⟧) → Map((sortdefault)->SortDefaultToSort(sortdefault), #csortdefault*)

/* @return the list of optional default value from `#csortsdefault?` */
func MaybeSortsDefaultToDefault(List<Core_csortsdefault_sort>) -> List<List<Core_cdefaultvalue_sort>>
rule MaybeSortsDefaultToDefault(csortsdefault?⟦                     ⟧) → ()
rule MaybeSortsDefaultToDefault(csortsdefault?⟦ ( ##csortdefault* ) ⟧) → Map((sortdefault)->SortDefaultToDefault(sortdefault), #csortdefault*)

/* @return the conversion to `csorts?` from `csortsdefault?` */
func MaybeSortsDefaultToMaybeSorts(List<Core_csortsdefault_sort>) -> List<Core_csorts_sort>
rule MaybeSortsDefaultToMaybeSorts(csortsdefault?⟦                     ⟧) → csorts?⟦⟧
rule MaybeSortsDefaultToMaybeSorts(csortsdefault?⟦ ( ##csortdefault* ) ⟧) → csorts?⟦ ( ⟨csort*: Map((sortdefault)->SortDefaultToSort(sortdefault), #csortdefault*)⟩ ) ⟧

/* @return the conversion to `csortdefault*` from `csortsdefault?` */
func MaybeSortsDefaultToSortsDefault(List<Core_csortsdefault_sort>) -> List<Core_csortdefault_sort>
rule MaybeSortsDefaultToSortsDefault(csortsdefault?⟦                     ⟧) → csortdefault*⟦⟧
rule MaybeSortsDefaultToSortsDefault(csortsdefault?⟦ ( ##csortdefault* ) ⟧) → #csortdefault*

/* @return the sort from `#sortdefault` */
func SortDefaultToSort(Core_csortdefault_sort) -> Core_csort_sort
rule SortDefaultToSort(csortdefault⟦ ##csort ##cdefaultvalue? ⟧) → #csort

/* @return the optional default value  from `#sortdefault` */
func SortDefaultToDefault(Core_csortdefault_sort) -> List<Core_cdefaultvalue_sort>
rule SortDefaultToDefault(csortdefault⟦ ##csort ##cdefaultvalue? ⟧) → #cdefaultvalue?

/* @return the conversion to `csort*` from `csorts?` */
func MaybeSortsToSorts(List<Core_csorts_sort>) -> List<Core_csort_sort>
rule MaybeSortsToSorts(csorts?⟦              ⟧)           → ()
rule MaybeSortsToSorts(csorts?⟦ ( ##csort* ) ⟧)           → #csort*

/* @return the conversion of `csort*` to `csorts?` */
func SortsToMaybeSorts(List<Core_csort_sort>) -> List<Core_csorts_sort>
rule SortsToMaybeSorts(csort*⟦⟧) → csorts?⟦⟧
rule SortsToMaybeSorts(#csort* ) → csorts?⟦ ( ##csort* ) ⟧

/* @return sort from sort annotation, or NONE */
func MaybeSortAnnoToSort(List<Core_csortanno_sort>) -> Option<Core_csort_sort>
rule MaybeSortAnnoToSort(csortanno?⟦ ⟧)           → NONE
rule MaybeSortAnnoToSort(csortanno?⟦ : ##csort ⟧) → SOME(#csort)

/* @return sort of the key for the given ``#mapsort` */
func GetMapKeySort(Core_cmapsort_sort) -> Core_csort_sort
rule GetMapKeySort(cmapsort⟦ ##csort1 : ##csort2 ⟧) → #csort1

func GetMapValueSort(Core_cmapsort_sort) -> Core_csort_sort
rule GetMapValueSort(cmapsort⟦ ##csort1 : ##csort2 ⟧) → #csort2

/* @return sort from term, or NONE */
func TermSort(Core_cterm_sort) -> Option<Core_csort_sort>
rule TermSort(cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? : ##csort ⟧) → SOME(#csort)
rule TermSort(cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? : ##csort ⟧)          → SOME(#csort)
rule TermSort(cterm⟦ ##STRING ⟧)                                                  → SOME(csort⟦ String ⟧)
rule TermSort(cterm⟦ ##NUMBER ⟧)                                                  → SOME(csort⟦ Numeric ⟧)
rule TermSort(cterm⟦ ##canno* ##VARIABLE : ##csort ⟧)                             → SOME(#csort)
rule TermSort(cterm⟦ ##canno* { ##cmapentries } : ##csort ⟧)                      → SOME(#csort)
rule TermSort(cterm⟦ ##canno* [ x : ##csort ] ##cterm[x] ⟧)                       → IfPresent(TermSort(#cterm[x]), (s)->SOME(csort⟦ [ ##csort ] ⟨csort: s⟩ ⟧), ()->NONE)
rule TermSort(cterm⟦ ##canno* ( x : ##csort ) ##cterm[x] ⟧)                       → IfPresent(TermSort(#cterm[x]), (s)->SOME(csort⟦ ( ##csort ) ⟨csort: s⟩ ⟧), ()->NONE)
rule TermSort(cterm⟦ ##canno* thunk ##cterm ⟧)                                    → IfPresent(TermSort(#cterm), (s)->SOME(csort⟦ thunk ⟨csort: s⟩ ⟧), ()->NONE)
rule TermSort(cterm⟦ ##canno* ##METAVAR ##csortanno? = ##cterm ⟧)                 → TermSort(#cterm)
rule TermSort(cterm⟦ ##canno* let ##METAVAR ##csortanno? = ##cterm ##cterm2 ⟧)    → TermSort(#cterm2)
rule TermSort(#)                                                                 → NONE

/* Create higher-order sort */
func HOSort(List<Core_csort_sort>, List<Core_csort_sort>, Core_csort_sort) -> Core_csort_sort
rule HOSort(Cons(#csort: Core_csort_sort, #csort*: List<Core_csort_sort>), #bvsorts, #sort) → csort⟦ ( ##csort ) ⟨csort: HOSort(#csort*, #bvsorts, #sort)⟩ ⟧
rule HOSort((), Cons(#csort: Core_csort_sort, #csort*: List<Core_csort_sort>), #sort)       → csort⟦ [ ##csort ] ⟨csort: HOSort((), #csort*, #sort)⟩ ⟧
rule HOSort((), (), #csort)                         → #csort

/* @return the convertion of the given optional sort to an optional sort annotation */
func MaybeSortToMaybeSortAnno(Option<Core_csort_sort>) -> List<Core_csortanno_sort>
rule MaybeSortToMaybeSortAnno(SOME(#csort)) → csortanno?⟦ : ##csort ⟧
rule MaybeSortToMaybeSortAnno(NONE        ) → csortanno?⟦⟧

/* @return `cterm*` from `cterms?` */
func MaybeTermsToTerms(List<Core_cterms_sort>) -> List<Core_cterm_sort>
rule MaybeTermsToTerms(cterms?⟦ ( ##cterm* ) ⟧) → #cterm*
rule MaybeTermsToTerms(#cterms?               ) → ()

/* @return `cterms?` from `cterms*` */
func TermsToMaybeTerms(List<Core_cterm_sort>) -> List<Core_cterms_sort>
rule TermsToMaybeTerms(()     ) → cterms?⟦⟧
rule TermsToMaybeTerms(#cterm*) → cterms?⟦ ( ##cterm* ) ⟧

/* Append the given `#term` to the given `#cterms?`  */
func AppendTerm(#term: Core_cterm_sort, #terms?: List<Core_cterms_sort>) -> List<Core_cterms_sort>
→ cterms?⟦ ( ⟨cterm*: Append(#term, MaybeTermsToTerms(#terms?))⟩ ) ⟧

/* @return `cterm*` from `csubst?` */
func MaybeSubstToTerms(List<Core_csubst_sort>) -> List<Core_cterm_sort>
rule MaybeSubstToTerms(csubst?⟦              ⟧) → ()
rule MaybeSubstToTerms(csubst?⟦ [ ##cterm* ] ⟧) → #cterm*

/* @return ``#csubst?` from `cterm*?` */
func TermsToMaybeSubst(List<Core_cterm_sort>) -> List<Core_csubst_sort>
rule TermsToMaybeSubst(cterm*⟦⟧) → csubst?⟦⟧
rule TermsToMaybeSubst(#cterm* ) → csubst?⟦ [ ##cterm* ] ⟧

/* @return `cmapentry*` from `cmapentries?` */
func MaybeMapEntriestToMapEntries(List<Core_cmapentries_sort>) -> List<Core_cmapentry_sort>
rule MaybeMapEntriestToMapEntries(cmapentries?⟦              ⟧) → ()
rule MaybeMapEntriestToMapEntries(cmapentries?⟦ ##cmapentry* ⟧) → #cmapentry*

func GetFormalParamSorts(Core_csort_sort) -> List<Core_csort_sort>
rule GetFormalParamSorts(csort⟦ ##canno* ( ##csort1 ) ##csort2 ⟧)  → Cons(#csort1, GetFormalParamSorts(#csort2))
rule GetFormalParamSorts(#csort                       )  → ()

func GetBoundVarSorts(Core_csort_sort) -> List<Core_csort_sort>
rule GetBoundVarSorts(csort⟦ ##canno* [ ##csort1 ] ##csort2 ⟧)  → Cons(#csort1, GetBoundVarSorts(#csort2))
rule GetBoundVarSorts(#csort                       )  → ()

/* @return `TRUE` is the given `#csort` defines at least one scoped variable */
func HasBindersSort(Core_csort_sort) -> Bool
rule HasBindersSort(csort⟦ ##canno* [ ##csort ] ##csort2 ⟧) → TRUE
rule HasBindersSort(csort⟦ ##canno* ( ##csort ) ##csort2 ⟧) → HasBindersSort(#csort2)
rule HasBindersSort(csort⟦ ##canno* data ##csort ⟧)         → HasBindersSort(#csort)
rule HasBindersSort(csort⟦ ##canno* thunk ##csort ⟧)        → HasBindersSort(#csort)
rule HasBindersSort(#csort)                                → FALSE

/* @return `TRUE` is the given list of `#csorts` defines at least one scoped variable */
func HasBindersSorts(#csorts: List<Core_csort_sort>) -> Bool
→ HasOption(PickFirst(#csorts, (csort)->HasBindersSort(csort)))

/* @return the sort without binder sorts */
func GetFOSort(Core_csort_sort) -> Core_csort_sort
rule GetFOSort(csort⟦ ##canno* [ ##csort1 ] ##csort2 ⟧) → GetFOSort(#csort2)
rule GetFOSort(csort⟦ ##canno* ( ##csort1 ) ##csort2 ⟧) → GetFOSort(#csort2)
rule GetFOSort(csort⟦ ##canno* thunk ##csort ⟧)         → GetFOSort(#csort)
rule GetFOSort(#sort) → #sort

/* @return a sort corresponding to the given sort declaration */
func DeclToSort(Core_cdecl_sort) -> Core_csort_sort
rule DeclToSort(cdecl⟦ ##canno* data ##csortvars? ##CONSTRUCTOR ##cforms ⟧) → DataDeclToSort(#csortvars?, #CONSTRUCTOR)

// TODO: function
//rule DeclToSort(cdecl⟦ ##canno* ##EXTERN? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → SOME(#csortvars)
rule DeclToSort(#cdecl) → Error("Unimplemented")

func DataDeclToSort(List<Core_csortvars_sort>, String) -> Core_csort_sort
rule DataDeclToSort(csortvars?⟦⟧, #CONSTRUCTOR) → csort⟦ ##CONSTRUCTOR ⟧
rule DataDeclToSort(#csortvars?, #CONSTRUCTOR) → csort⟦ ##CONSTRUCTOR ( ⟨csort*:MaybeSortVarsToSorts(#csortvars?)⟩ ) ⟧

func MaybeSortVarsToSorts(List<Core_csortvars_sort>) -> List<Core_csort_sort>
rule MaybeSortVarsToSorts(csortvars?⟦                 ⟧) → csort*⟦⟧
rule MaybeSortVarsToSorts(csortvars?⟦ ∀ ##VARIABLE+ . ⟧) → Map((var)->csort⟦ ⟨VARIABLE: var⟩ ⟧, #VARIABLE+)

func VarsToMaybeSortVars(List<String>) -> List<Core_csortvars_sort>
rule VarsToMaybeSortVars(())         → csortvars?⟦⟧
rule VarsToMaybeSortVars(#VARIABLE+) → csortvars?⟦ ∀ ##VARIABLE+ . ⟧

/* @return the variable of the given sort variable, or an error */
func GetSortVarE(Core_csort_sort) -> String
rule GetSortVarE(csort⟦ ##canno* ##VARIABLE ⟧) → #VARIABLE
rule GetSortVarE(#csort) → Error(ConcatString("Internal Error: not a variable sort: ", PrintSort(#csort)))

/* @return the list of sort variables in the given list of `#sorts` */
func SortVarsSorts(#sorts: List<Core_csort_sort>, #svars:List<String>) -> List<String>
→ FoldlP((sort svars)->SortVarsSort(sort, svars), #svars, #sorts)

/* @return the list of sort variables in the given `#sort` */
func SortVarsSort(Core_csort_sort, List<String>) -> List<String>
rule SortVarsSort(csort⟦ ##canno* ##CONSTRUCTOR ##csorts? ⟧, #svars) → SortVarsSorts(MaybeSortsToSorts(#csorts?), #svars)
rule SortVarsSort(csort⟦ ##canno* ##VARIABLE              ⟧, #svars) → ConditionalInsert(Not(HasOption(PickFirst(#svars, (v)->Equal(v, #VARIABLE)))), #VARIABLE, #svars)
rule SortVarsSort(csort⟦ ##canno* [ ##csort ] ##csort2    ⟧, #svars) → SortVarsSort(#csort2, SortVarsSort(#csort, #svars))
rule SortVarsSort(csort⟦ ##canno* ( ##csort ) ##csort2    ⟧, #svars) → SortVarsSort(#csort2, SortVarsSort(#csort, #svars))
rule SortVarsSort(csort⟦ ##canno* { ##cmapsort }          ⟧, #svars) → #svars // TODO
rule SortVarsSort(csort⟦ ##canno* data ##csort            ⟧, #svars) → SortVarsSort(#csort, #svars)
rule SortVarsSort(csort⟦ ##canno* thunk ##csort           ⟧, #svars) → SortVarsSort(#csort, #svars)

/* @return `TRUE` is the given list of `cform*` contains `allows-variable` */
func IsAllowsVarForms(#cforms:List<Core_cform_sort>) -> Bool
→ HasOption(PickFirst(#cforms, (cform)->IsAllowsVar(cform)))

/* @return `TRUE` is the given `cform` is `allows-variable` */
func IsAllowsVar(Core_cform_sort) -> Bool
rule IsAllowsVar(cform⟦ allows-variable ⟧) → TRUE
rule IsAllowsVar(#cform                  ) → FALSE

/* @return `TRUE` if the two given lists have the same size and contains the same variables. */
func CheckSameVariables(List<String>, List<Core_cterm_sort>) -> Bool
rule CheckSameVariables((#x, #xs...), cterm*⟦ ##canno* ##VARIABLE ##csortanno? ##cterm* ⟧) → If(SameVariable(#x, #VARIABLE), ()->CheckSameVariables(#xs, #cterm*), ()->FALSE)
rule CheckSameVariables((          ), cterm*⟦                                           ⟧) → TRUE
rule CheckSameVariables(#vars       , #cterm*                                           ) → FALSE

/* @return `TRUE` if the given list of `#terms` contains only variables. */
func AllVariables(List<Core_cterm_sort>) -> Bool
rule AllVariables(cterm*⟦                                           ⟧) → TRUE
rule AllVariables(cterm*⟦ ##canno* ##VARIABLE ##csortanno? ##cterm* ⟧) → AllVariables(#cterm*)
rule AllVariables(#cterm*                                           ) → FALSE

/* @return all top-level variables occuring in the given list of terms, or the empty list if not all terms are variables */
func GetAllVariables(List<Core_cterm_sort>) -> List<String>
rule GetAllVariables(cterm*⟦ ##canno* ##VARIABLE ##csortanno?  ##cterm* ⟧) → (#VARIABLE, GetAllVariables(#cterm*)...)
rule GetAllVariables(#cterm*                                             ) → ()

// --- Print utilities

/* Print the given `#sort` */
func PrintSort(#sort: Core_csort_sort) -> String
→ Trim(PrintTerm("text", Core_Print_csort(#sort)))
