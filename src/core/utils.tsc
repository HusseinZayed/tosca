// Copyright (c) 2016 IBM Corporation.
/*
 *  Various utility function related to the Core language
 */
import std::core
import std::listdef
import std::string
import std::language
import std::text::Text4
import core::Core

/* @return TRUE if the term is a meta-application. Ignore binders and formal parameters  */
func IsMeta(Core_cterm_sort) -> Bool
rule IsMeta(cterm⟦ ##METAVAR ##cterms? ##csubst? ##csortanno? ⟧) → TRUE
rule IsMeta(cterm⟦ { : ##METAVAR  } ##csortanno? ⟧)              → TRUE  // Equivalent to just #METAVAR. 
rule IsMeta(cterm⟦ [ v ##csortanno? ] ##cterm[v] ⟧)              → IsMeta(#cterm[var:String])
rule IsMeta(cterm⟦ ( f ##csortanno? ) ##cterm[f] ⟧)              → IsMeta(#cterm[var:String])
rule IsMeta(cterm⟦ thunk ##cterm ⟧)                              → IsMeta(#cterm)
rule IsMeta(#term)                                               → FALSE

/* @return the given term without 'thunk' */
func StripThunk(Core_cterm_sort) -> Core_cterm_sort
rule StripThunk(cterm⟦ thunk ##cterm ⟧)  → #cterm
rule StripThunk(#cterm                )  → #cterm

/* Check whether the given annotation is in the given list */
func HasAnnotation(#anno: String, #anno*: List<Core_canno_sort>) -> Bool
→ HasOption<Core_canno_sort>(PickFirst<Core_canno_sort>(#anno*, (anno) -> EqualAnno(#anno, anno)))

/* Whether the 2 annotation are equals */
func EqualAnno(String, Core_canno_sort) -> Bool
rule EqualAnno(#anno, canno⟦ @ ##CONSTRUCTOR ⟧) → StringEqual(#CONSTRUCTOR, #anno)

/* Add annotation to list. Does not check if already there. */
func AddAnnotation(#anno: String, #anno*: List<Core_canno_sort>) ->  List<Core_canno_sort>
→ Cons(canno⟦ @ ⟨CONSTRUCTOR: #anno⟩ ⟧, #anno*)

/* @return the string concatenation represeting the given `#qualifiedIdentifier` */
func JoinQIdentifier(#cqiden: Core_cqidentifier_sort, #sep: String) -> String
→ Join(QIdentifierList(#cqiden), #sep)

/* @return string list of qualified identifier s*/
func QIdentifierList(Core_cqidentifier_sort) -> List<String>
rule QIdentifierList(cqidentifier⟦ ##cidentifier* ##cidentifier ⟧) → Append(IdentifierToString(#cidentifier), Map((ident) -> IdentifierToString(ident), #cidentifier*))
rule QIdentifierList(cqidentifier⟦ ##CONSTRUCTOR ⟧) → (#CONSTRUCTOR,)

/* @return the qualified constructor converted to the equivalent qualified identifier */
func QConsToQIden(Core_cqconstructor_sort) -> Core_cqidentifier_sort
rule QConsToQIden(cqconstructor⟦ ##csortqualifier* ##CONSTRUCTOR ⟧) → cqidentifier⟦ ⟨cidentifier*: QConsToQIdens(#csortqualifier*)⟩ ##CONSTRUCTOR ⟧
rule QConsToQIden(cqconstructor⟦ ##CONSTRUCTOR  ⟧) → cqidentifier⟦ ##CONSTRUCTOR ⟧

func QConsToQIdens(List<Core_csortqualifier_sort>) -> List<Core_cidentifier_sort>
rule QConsToQIdens(csortqualifier*⟦ ##CONSTRUCTOR :: ##csortqualifier* ⟧) → cidentifier*⟦ ##CONSTRUCTOR :: ⟨cidentifier*: QConsToQIdens(#csortqualifier*)⟩ ⟧
rule QConsToQIdens(csortqualifier*⟦ ⟧) → cidentifier*⟦ ⟧

/* Convert qualified constructor to string, using given separator */
func QConsToString(#cqcons: Core_cqconstructor_sort, #sep: String) -> String
→ Join(QConsToStringList(#cqcons), #sep)

/* Get qualified constructor as a list of string. */
func QConsToStringList(Core_cqconstructor_sort) -> List<String>
rule QConsToStringList(cqconstructor⟦ ##csortqualifier* ##CONSTRUCTOR ⟧)
→ Append<String>(#CONSTRUCTOR, Map<Core_csortqualifier_sort String>((sort) -> QSortToString(sort), #csortqualifier*))

func QSortToString(Core_csortqualifier_sort) -> String
rule QSortToString(csortqualifier⟦ ##CONSTRUCTOR :: ⟧) → #CONSTRUCTOR

/* @return the string corresponding to the given `#identifier` */
func IdentifierToString(Core_cidentifier_sort) -> String
rule IdentifierToString(cidentifier⟦ ##CONSTRUCTOR ⟧) → #CONSTRUCTOR
rule IdentifierToString(cidentifier⟦ ##VARIABLE    ⟧) → #VARIABLE

/* @return true if there is at least one sort in the given list */
func HasSorts(#csorts? :List<Core_csorts_sort>) -> Bool
→ IsNotEmpty<Core_csorts_sort>(#csorts?)

/* @return true if the sort declaration is parameterized */
func HasSortVars(Core_cdecl_sort) -> Bool
rule HasSortVars(cdecl⟦ data ##csortvars ##CONSTRUCTOR ##cforms ⟧)                                 → TRUE
rule HasSortVars(cdecl⟦ ##canno* ##extern_TOK? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → TRUE
rule HasSortVars(#)                                                                                → FALSE

/* @return sort declaration sort parameters, or `NONE` */
func GetSortVars(Core_cdecl_sort) -> Option<Core_csortvars_sort>
rule GetSortVars(cdecl⟦ data ##csortvars ##CONSTRUCTOR ##cforms ⟧)                                 → SOME(#csortvars)
rule GetSortVars(cdecl⟦ ##canno* ##extern_TOK? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → SOME(#csortvars)
rule GetSortVars(#)                                                                                → NONE

/* @return extract `csortvars?` from sort  */
func GetMaybeSortVars(Core_cdecl_sort) -> List<Core_csortvars_sort>
rule GetMaybeSortVars(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ##cforms ⟧)                                 → #csortvars?
rule GetMaybeSortVars(cdecl⟦ ##canno* ##extern_TOK? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧) → #csortvars?
rule GetMaybeSortVars(#cdecl                                                                          ) → ()

/* @return extract `csort*` from `csorts?` */
func MaybeSortsToSorts(List<Core_csorts_sort>) -> List<Core_csort_sort>
rule MaybeSortsToSorts(csorts?⟦              ⟧)           → ()
rule MaybeSortsToSorts(csorts?⟦ ( ##csort* ) ⟧)           → #csort*

/* @return sort from sort annotation, or NONE */
func MaybeSortAnnoToSort(List<Core_csortanno_sort>) -> Option<Core_csort_sort>
rule MaybeSortAnnoToSort(csortanno?⟦ ⟧)           → NONE
rule MaybeSortAnnoToSort(csortanno?⟦ : ##csort ⟧) → SOME(#csort)

/* @return sort of the key for the given ``#mapsort` */
func GetMapKeySort(Core_cmapsort_sort) -> Core_csort_sort
rule GetMapKeySort(cmapsort⟦ ##csort1 : ##csort2 ⟧) → #csort1

func GetMapValueSort(Core_cmapsort_sort) -> Core_csort_sort
rule GetMapValueSort(cmapsort⟦ ##csort1 : ##csort2 ⟧) → #csort2

/* @return sort from term, or NONE */
func TermSort(Core_cterm_sort) -> Option<Core_csort_sort>
rule TermSort(cterm⟦ ##cqconstructor ##csortargs? ##cterms? : ##csort ⟧) → SOME(#csort)
rule TermSort(cterm⟦ ##METAVAR ##cterms? ##csubst? : ##csort ⟧)          → SOME(#csort)
rule TermSort(cterm⟦ ##STRING ⟧)                                         → SOME(csort⟦ String ⟧)
rule TermSort(cterm⟦ ##NUMBER ⟧)                                         → SOME(csort⟦ Numeric ⟧)
rule TermSort(cterm⟦ ##VARIABLE : ##csort ⟧)                             → SOME(#csort)
rule TermSort(cterm⟦ { ##cmapentries } ⟧)                                → NONE  // TODO:
rule TermSort(cterm⟦ [ x ##csortanno? ] ##cterm[x] ⟧)                    → TermSort(#cterm[x])
rule TermSort(cterm⟦ ( x ##csortanno? ) ##cterm[x] ⟧)                    → TermSort(#cterm[x])
rule TermSort(cterm⟦ thunk ##cterm ⟧)                                    → TermSort(#cterm)
rule TermSort(#)                                                         → NONE

/* @return `cterm*` from `cterms?` */
func MaybeTermsToTerms(List<Core_cterms_sort>) -> List<Core_cterm_sort>
rule MaybeTermsToTerms(cterms?⟦              ⟧) → ()
rule MaybeTermsToTerms(cterms?⟦ ()           ⟧) → ()
rule MaybeTermsToTerms(cterms?⟦ ( ##cterm* ) ⟧) → #cterm*

/* @return `cterm*` from `csubst?` */
func MaybeSubstToTerms(List<Core_csubst_sort>) -> List<Core_cterm_sort>
rule MaybeSubstToTerms(csubst?⟦              ⟧) → ()
rule MaybeSubstToTerms(csubst?⟦ [ ##cterm* ] ⟧) → #cterm*

func GetFormalParamSorts(Core_csort_sort) -> List<Core_csort_sort>
rule GetFormalParamSorts(csort⟦ ( ##csort1 ) ##csort2 ⟧)  → Cons(#csort1, GetFormalParamSorts(#csort2))
rule GetFormalParamSorts(#csort                       )  → ()

func GetBoundVarSorts(Core_csort_sort) -> List<Core_csort_sort>
rule GetBoundVarSorts(csort⟦ [ ##csort1 ] ##csort2 ⟧)  → Cons(#csort1, GetBoundVarSorts(#csort2))
rule GetBoundVarSorts(#csort                       )  → ()

/* @return the sort without binder sorts */
func GetFOSort(Core_csort_sort) -> Core_csort_sort
rule GetFOSort(csort⟦ [ ##csort1 ] ##csort2 ⟧) → GetFOSort(#csort2)
rule GetFOSort(csort⟦ ( ##csort1 ) ##csort2 ⟧) → GetFOSort(#csort2)
rule GetFOSort(#sort) → #sort

/* @return a sort corresponding to the given sort declaration */
func DeclToSort(Core_cdecl_sort) -> Core_csort_sort
rule DeclToSort(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ##cforms ⟧)               → DataDeclToSort(#csortvars?, #CONSTRUCTOR)

// TODO: function
//rule DeclToSort(cdecl⟦ ##canno* ##extern_TOK? func ##csortvars ##csort ##CONSTRUCTOR ##csorts? ⟧) → SOME(#csortvars)
rule DeclToSort(#cdecl) → Error<Core_csort_sort>("Unimplemented")

func DataDeclToSort(List<Core_csortvars_sort>, String) -> Core_csort_sort
rule DataDeclToSort(csortvars?⟦                    ⟧, #CONSTRUCTOR) → csort⟦ ##CONSTRUCTOR ⟧
rule DataDeclToSort(csortvars?⟦ ∀ ##variable_TOK+ .⟧, #CONSTRUCTOR) → csort⟦ ##CONSTRUCTOR ( ⟨csort*: Map<String Core_csort_sort>((var)->csort⟦ ⟨VARIABLE: var⟩ ⟧, #variable_TOK+)⟩ ) ⟧


// --- Print utilities

/* Print the given `#sort` */
func PrintSort(#sort: Core_csort_sort) -> String
→ Trim(PrintTerm<Text4_text_sort>("text", Core_Print_csort(#sort)))
