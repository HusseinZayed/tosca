// Copyright (c) 2016 IBM Corporation.

import std::core
import std::mapdef
import std::listdef
import std::pairdef
import core::Core

/*
  Substitute with extensions. The following substitutions are supported:
  - variables are substituted by their associated term.
  - meta-variables are substituted by their associated meta-variable (like renaming)
*/
func Substitute(Core_cterm_sort, {String : Core_cterm_sort}) -> Core_cterm_sort
rule Substitute(cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧, #subst) → cterm⟦ ##canno* ##cqconstructor ##csortargs? ⟨cterms?: SubstMaybeTerms(#cterms?, #subst)⟩ ##csortanno? ⟧
rule Substitute(cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno?          ⟧, #subst) → cterm⟦ ##canno* ⟨METAVAR: SubstMetaVar(#METAVAR, #subst)⟩ ⟨cterms?: SubstMaybeTerms(#cterms?, #subst)⟩ ⟨csubst?: SubstMaybeSubst(#csubst?, #subst)⟩ ##csortanno? ⟧
rule Substitute(cterm⟦ ##canno* ##cliteral                                          ⟧, #subst) → cterm⟦ ##canno* ##cliteral ⟧

// TODO: replace when issue #20 is fixed
//rule Substitute(cterm⟦ ##VARIABLE ##csortanno?                             ⟧, #subst) → cterm⟦ ⟨VARIABLE: SubstVariable(#VARIABLE, #subst)⟩ ##csortanno? ⟧
rule Substitute(cterm⟦ ##canno* ##VARIABLE ##csortanno?                             ⟧, #subst) → SubstVariable(#VARIABLE, #csortanno?, #subst)

rule Substitute(cterm⟦ ##canno* { ##cmapentries? } ##csortanno?                     ⟧, #subst) → cterm⟦ ##canno* { ⟨cmapentries?: SubstMaybeMapEntries(#cmapentries?, #subst)⟩ } ##csortanno? ⟧
rule Substitute(cterm⟦ ##canno* [ x ##csortanno? ] ##cterm[x]                       ⟧, #subst) → cterm⟦ ##canno* [ x ##csortanno? ] ⟨cterm: Substitute(@NoSubst #cterm[x], #subst)⟩ ⟧
rule Substitute(cterm⟦ ##canno* ( f ##csortanno? ) ##cterm[f]                       ⟧, #subst) → cterm⟦ ##canno* ( f ##csortanno? ) ⟨cterm: Substitute(@NoSubst #cterm[f], #subst)⟩ ⟧
rule Substitute(cterm⟦ ##canno* thunk ##cterm                                       ⟧, #subst) → cterm⟦ ##canno* thunk ⟨cterm: Substitute(#cterm, #subst)⟩ ⟧
rule Substitute(cterm⟦ ##canno* ##METAVAR ##csortanno? = ##cterm                    ⟧, #subst) → cterm⟦ ##canno* ⟨METAVAR: SubstMetaVar(#METAVAR, #subst)⟩ ##csortanno? = ⟨cterm: Substitute(#cterm, #subst)⟩ ⟧
rule Substitute(cterm⟦ ##canno* let ##METAVAR ##csortanno? = ##cterm ##cterm2       ⟧, #subst) → cterm⟦ ##canno* let ⟨METAVAR: SubstMetaVar(#METAVAR, #subst)⟩ ##csortanno? = ⟨cterm: Substitute(#cterm, #subst)⟩  ⟨cterm: Substitute(#cterm2, #subst)⟩ ⟧

func SubstMaybeTerms(List<Core_cterms_sort>, {String : Core_cterm_sort}) -> List<Core_cterms_sort>
rule SubstMaybeTerms(cterms?⟦              ⟧, #subst) → cterms?⟦ ⟧
rule SubstMaybeTerms(cterms?⟦ (          ) ⟧, #subst) → cterms?⟦ () ⟧
rule SubstMaybeTerms(cterms?⟦ ( ##cterm* ) ⟧, #subst) → cterms?⟦ ( ⟨cterm*: SubstTerms(#cterm*, #subst)⟩ ) ⟧

func SubstMaybeSubst(List<Core_csubst_sort>, {String : Core_cterm_sort}) -> List<Core_csubst_sort>
rule SubstMaybeSubst(csubst?⟦              ⟧, #subst) → csubst?⟦ ⟧
rule SubstMaybeSubst(csubst?⟦ [ ##cterm* ] ⟧, #subst) → csubst?⟦ [ ⟨cterm*: SubstTerms(#cterm*, #subst)⟩ ] ⟧

func SubstTerms(List<Core_cterm_sort>, {String : Core_cterm_sort}) -> List<Core_cterm_sort>
rule SubstTerms(cterm*⟦                  ⟧, #subst) → cterm*⟦ ⟧
rule SubstTerms(cterm*⟦ ##cterm ##cterm* ⟧, #subst) → cterm*⟦ ⟨cterm: Substitute(#cterm, #subst)⟩ ⟨cterm*: SubstTerms(#cterm*, #subst)⟩ ⟧

func SubstMetaVar(#metavar: String, #subst: {String : Core_cterm_sort}) -> String
→ IfPresent(MapGet(#subst, #metavar), (substitute) -> SubstGetMetaVar(substitute), ()->#metavar)

func SubstGetMetaVar(Core_cterm_sort) -> String
rule SubstGetMetaVar(cterm⟦ ##METAVAR ⟧) → #METAVAR
rule SubstGetMetaVar(#cterm) → Error("Fatal Error: invalid meta-variable substitute. Only meta-variables are allowed.")

// TODO: #VARIABLE because of issue #20
func SubstVariable(#VARIABLE: String, #csortanno?: List<Core_csortanno_sort>, #subst: {String : Core_cterm_sort}) -> Core_cterm_sort
→ IfPresent(MapGetVar(#subst, #VARIABLE), (substitute) -> substitute, ()->cterm⟦ ##VARIABLE ##csortanno? ⟧)

func SubstMaybeMapEntries(List<Core_cmapentries_sort>, {String : Core_cterm_sort}) -> List<Core_cmapentries_sort>
rule SubstMaybeMapEntries(cmapentries?⟦              ⟧, #subst) → cmapentries?⟦⟧
rule SubstMaybeMapEntries(cmapentries?⟦ ##cmapentry* ⟧, #subst) → cmapentries?⟦ ⟨cmapentry*: SubstMapEntries(#cmapentry*, #subst)⟩ ⟧

func SubstMapEntries(List<Core_cmapentry_sort>, {String : Core_cterm_sort}) -> List<Core_cmapentry_sort>
rule SubstMapEntries(cmapentry*⟦                          ⟧, #subst) → cmapentry*⟦⟧
rule SubstMapEntries(cmapentry*⟦ ##cmapentry ##cmapentry* ⟧, #subst) → cmapentry*⟦ ⟨cmapentry: SubstMapEntry(#cmapentry, #subst)⟩ ⟨cmapentry*: SubstMapEntries(#cmapentry*, #subst)⟩ ⟧

func SubstMapEntry(Core_cmapentry_sort, {String : Core_cterm_sort}) -> Core_cmapentry_sort
rule SubstMapEntry(cmapentry⟦ : ##METAVAR ⟧, #subst) → cmapentry⟦ : ⟨METAVAR: SubstMetaVar(#METAVAR, #subst)⟩ ⟧
//  DO THE REST WHEN REAL SUPPORT FOR MAP

/* Sort variable substitution */
func SubstSort(Core_csort_sort, List<PPair<String Core_csort_sort>>) -> Core_csort_sort
rule SubstSort(csort⟦ ##canno* ##CONSTRUCTOR ##csorts? ⟧, #subst) → csort⟦ ##canno* ##CONSTRUCTOR ⟨csorts?: SubstSortMaybeSorts(#csorts?, #subst)⟩ ⟧
rule SubstSort(csort⟦ ##canno* ##VARIABLE              ⟧, #subst) → IfPresent(HeadO(LookUp(#VARIABLE, #subst)), (sort)->sort, ()->csort⟦ ##canno* ##VARIABLE ⟧)
rule SubstSort(csort⟦ ##canno* [ ##csort1 ] ##csort2   ⟧, #subst) → csort⟦ ##canno* [ ⟨csort: SubstSort(#csort1, #subst)⟩ ] ⟨csort: SubstSort(#csort2, #subst)⟩ ⟧
rule SubstSort(csort⟦ ##canno* ( ##csort1 ) ##csort2   ⟧, #subst) → csort⟦ ##canno* ( ⟨csort: SubstSort(#csort1, #subst)⟩ ) ⟨csort: SubstSort(#csort2, #subst)⟩ ⟧
rule SubstSort(csort⟦ ##canno* { ##cmapsort* }         ⟧, #subst) → csort⟦ ##canno* { ⟨cmapsort*: SubstMapSorts(#cmapsort*, #subst)⟩ } ⟧
rule SubstSort(csort⟦ ##canno* thunk ##csort           ⟧, #subst) → csort⟦ ##canno* thunk ⟨csort: SubstSort(#csort, #subst)⟩ ⟧
rule SubstSort(csort⟦ ##canno* data ##csort            ⟧, #subst) → csort⟦ ##canno* data ⟨csort: SubstSort(#csort, #subst)⟩ ⟧

func SubstSortMaybeSorts(List<Core_csorts_sort>, List<PPair<String Core_csort_sort>>) -> List<Core_csorts_sort>
rule SubstSortMaybeSorts(csorts?⟦             ⟧, #subst) → csorts?⟦⟧
rule SubstSortMaybeSorts(csorts?⟦ ( ##csort*) ⟧, #subst) → csorts?⟦ ( ⟨csort*: SubstSortSorts(#csort*, #subst)⟩ ) ⟧

func SubstSortSorts(List<Core_csort_sort>, List<PPair<String Core_csort_sort>>) -> List<Core_csort_sort>
rule SubstSortSorts(csort*⟦ ##csort ##csort*  ⟧, #subst) → csort*⟦ ⟨csort: SubstSort(#csort, #subst)⟩ ⟨csort*: SubstSortSorts(#csort*, #subst)⟩ ⟧
rule SubstSortSorts(csort*⟦                   ⟧, #subst) → csort*⟦⟧

func SubstMapSorts(List<Core_cmapsort_sort>, List<PPair<String Core_csort_sort>>) -> List<Core_cmapsort_sort>
rule SubstMapSorts(cmapsort*⟦ ##csort1 : ##csort2 ##cmapsort* ⟧, #subst) → cmapsort*⟦ ⟨csort: SubstSort(#csort1, #subst)⟩ : ⟨csort: SubstSort(#csort2, #subst)⟩ ⟨cmapsort*: SubstMapSorts(#cmapsort*, #subst)⟩  ⟧
rule SubstMapSorts(cmapsort*⟦                                 ⟧, #subst) → cmapsort*⟦ ⟧
