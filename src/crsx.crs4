// Copyright (c) 2015 IBM Corporation.
/*
 Tosca command line
*/

import Systemdef
import Normalizer
import Checker
import Infer::Infer
import Cg::Cgjava
import Std::Core
import Std::Listdef
import Std::String
import Std::Language
import Core::Core
import Parser::TransScript
import Text::Text4

//--- API

/* Compile the TransScript program located to the given url
   @param `String` a url
   @return a compile TransScript program in Java (for now)
*/
func Compile(String) -> Text4_text_sort
rule Compile(#url)
→ IfDef<Text4_text_sort>("to-core",
    ()->CompileToCore(#url),
    ()->CompileSystem(InitSystem(#url)))

// --- Helper functions

func CompileSystem(TSystem) -> Text4_text_sort
rule CompileSystem(#system)
→ MaybeLoadModule(#system, PickNotLoaded(#system))

func MaybeLoadModule(TSystem, Option<Module>) -> Text4_text_sort

// Done loading all modules. Generate code.
rule MaybeLoadModule(#system, NONE)
→ TransScriptToJava(InferSystem(#system))

rule MaybeLoadModule(#system, SOME(Module::Module(#url:String, Content::NOTLOADED)))
→ CompileSystem(PutModule(#system, #url, Module(#url, LoadModule(#url))))

func LoadModule(String) -> Content
rule LoadModule(#url)
→ Loaded(CheckCore(LoadCore(If<Core_ccrsx_sort>(EndsWith(#url, ".crsc"), ()->ParseCore(#url), ()->ParseTransScript(#url)))))

func ParseCore(String) -> Core_ccrsx_sort
rule ParseCore(#url) → ParseResource<Core_ccrsx_sort>("ccrsx", #url)

func ParseTransScript(String) -> Core_ccrsx_sort
rule ParseTransScript(#url) → ToCore(#url, ParseResource<TransScript_transscript_sort>("transscript", #url))

//--- Compilation to Core (for debugging)

func CompileToCore(String) -> Text4_text_sort
rule CompileToCore(#url)
→ Core_Print_ccrsx(ParseTransScript(#url))
