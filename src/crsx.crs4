// Copyright (c) 2015 IBM Corporation.
/*
 CRSX command line
*/

import Systemdef
import Normalizer
import Cg::Cgjava
import Std::Core
import Std::Listdef
import Std::String
import Core::Core
import Text::Text4

//--- API

/* Compile the TransScript program located to the given url
   @param `String` a url
   @return a compile TransScript program in Java (for now)
*/
func Compile(String) -> Text4_text_sort
rule Compile(#url)
→ IfDef("to-core",
    CompileToCore(#url),
    CompileSystem(InitSystem(#url)))

func CompileSystem(TSystem) -> Text4_text_sort
rule CompileSystem(#system)
→ MaybeLoadModule(#system, PickNotLoaded(#system))

func MaybeLoadModule(TSystem, Option<Module>) -> Text4_text_sort

// Done loading all modules. Generate code.
rule MaybeLoadModule(#system, NONE)
→ TransScriptToJava(#system)

rule MaybeLoadModule(#system, SOME(Module::Module(#url:String, Content::NOTLOADED)))
→ CompileSystem(PutModule(#system, #url, Module(#url, LoadModule(#url))))

func LoadModule(String) -> Content
rule LoadModule(#url)
→ Loaded(LoadCore(If(EndsWith(#url, ".crsc"), ParseCore(#url), ParseTransScript(#url))))

func ParseCore(String) -> Core_ccrsx_sort
rule ParseCore(#url) → ParseResource("ccrsx", #url)

func ParseTransScript(String) -> Core_ccrsx_sort
rule ParseTransScript(#url) → ToCore(#url, ParseResource("transscript", #url))

//--- Compilation to Core (for debugging)

func CompileToCore(String) -> Text4_text_sort
rule CompileToCore(#url)
/*→ Core_Print_ccrsx(ParseCrsx(#url))*/
→ ParseTransScript(#url)
