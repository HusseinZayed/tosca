// Copyright (c) 2016 IBM Corporation.
import std::core
import std::mapdef
import std::listdef
import std::pairdef
import std::string
import std::language
import std::num
import core::Core
import core::utils
import core::subst
import systemdef

// --- API

/* Convert closures in the given module. */
func ClosureConvertM(#system: TSystem, #module: Module) -> Module
→ IfConfigDef(#system, "cpp",
    (v) -> Debug(ConcatString("Closure convert ", GetModuleURL(#module)), ()->SetModuleContent(#module, FoldlP(
                                       (key content) -> CCRules(key, UnSOME(GetRulesForKeyC(content, key)), content),
                                       GetModuleContent(#module),
                                       MapKeys(GetRulesM(#module))))),
    ( ) -> #module)

/* Convert the given rules.
   Store each converted rule in an environment and update the module content on the way up.
 */
func CCRules(#key: String, #rules: List<Core_cdecl_sort>, #content: Content) -> Content
→ CCRulesUp(#key, FoldlP((rul env) -> CCRule(env, rul), CCEnvNew(#key, #content), #rules))

func CCRulesUp(#key: String, #env: CCEnv) -> Content
→ PutRulesC(CCEnvContent(#env), #key, CCEnvRules(#env))

func CCRule(CCEnv, Core_cdecl_sort) -> CCEnv
rule CCRule(#env, #rule = cdecl⟦ ##canno* rule ##cterm1 → ##cterm2 ⟧)
→ CCRuleUp(#canno*, #cterm1, CCPatternTerm(#env, #cterm1, CCNewBinderStack, (env)->CCTerm(env, #cterm2)))

func CCRuleUp(List<Core_canno_sort>, Core_cterm_sort, PPair<CCEnv Core_cterm_sort>) -> CCEnv
rule CCRuleUp(#canno*, #cterm1, PairCons(#env, #cterm2))
→ let #rule = cdecl⟦ ##canno* rule ##cterm1 → ##cterm2 ⟧
  CCEnvAddRule(#env, #rule)

// --- Pattern traversal: record variable and meta-variable sorts

func CCPatternTerm(CCEnv, Core_cterm_sort, CCBinders, (CCEnv)-> PPair<CCEnv Core_cterm_sort>) -> PPair<CCEnv Core_cterm_sort>

  rule CCPatternTerm(#env, cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧, #binders, #cont)
  → CCPatternMaybeTerms(#env, #cterms?, #binders, #cont)

  rule CCPatternTerm(#env, cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? : ##csort ⟧, #binders, #cont)
  → CCPatternMaybeTerms(CCEnvAddMetaVar(#env, #METAVAR, CCMeta(#METAVAR, HOSort(CCGetBinderSorts(MaybeTermsToTerms(#cterms?), #binders),
                                                                                 CCGetBinderSorts(MaybeSubstToTerms(#csubst?), #binders), #csort))),
                           #cterms?, #binders, (env)->CCPatternMaybeSubst(env, #csubst?, #binders, #cont))

  rule CCPatternTerm(#env, cterm⟦ ##canno* ##cliteral ⟧, #binders, #cont)
  → #cont(#env)

  // TODO: maybe a bit too brittle. Should check variable is not bound.
  rule CCPatternTerm(#env, cterm⟦ ##canno* ##VARIABLE : ##csort ⟧, #binders, #cont)
  → #cont(CCEnvAddVar(#env, #VARIABLE, CCVar(#VARIABLE, #csort)))

   // bound var and formal argument occurrences don't have a sort. No need to record anyway: it's been done before.
  rule CCPatternTerm(#env, cterm⟦ ##canno* ##VARIABLE ⟧, #binders, #cont)
  → #cont(#env)

  // Record binder sort that might bind a meta-variable
  rule CCPatternTerm(#env, cterm⟦ ##canno* [ x : ##csort ] ##cterm[x] ⟧, #binders, #cont)
  → CCPatternTerm(#env, #cterm[x], CCBinderAdd(#binders, PairCons(x, #csort)), #cont)

  // Record binder sort that might bind a meta-variable
  rule CCPatternTerm(#env, cterm⟦ ##canno* ( f : ##csort ) ##cterm[f] ⟧, #binders, #cont)
  → CCPatternTerm(#env, #cterm[f], CCBinderAdd(#binders, PairCons(f, #csort)), #cont)

  rule CCPatternTerm(#env, cterm⟦ ##canno* { ##cmapentries? } : { ##cmapsort } ⟧, #binders, #cont)
  → CCPatternMaybeMapEntries(#env, #cmapentries?, #cmapsort, #binders, #cont)


  rule CCPatternTerm(#env, cterm⟦ ##canno* ##METAVAR : ##csort = ##cterm ⟧, #binders, #cont)
  → CCPatternTerm(CCEnvAddMetaVar(#env, #METAVAR, CCMeta(#METAVAR, #csort)), #cterm, #binders, #cont)

  rule CCPatternTerm(#env, cterm⟦ ##canno* thunk ##cterm ⟧, #binders, #cont)
  → Error("Internal Error: invalid thunk in pattern.")

  rule CCPatternTerm(#env, #cterm, #binders, #cont) → Error(ConcatString("Internal Error: missing sort annotation\n", PrintTerm("", #cterm)))

func CCPatternMaybeTerms(CCEnv, List<Core_cterms_sort>, CCBinders, (CCEnv)-> PPair<CCEnv Core_cterm_sort>) -> PPair<CCEnv Core_cterm_sort>

  rule CCPatternMaybeTerms(#env, cterms?⟦ ( ##cterm* ) ⟧, #binders, #cont) → CCPatternTerms(#env, #cterm*, #binders,#cont)
  rule CCPatternMaybeTerms(#env, #cterms?               , #binders, #cont) → #cont(#env)

func CCPatternTerms(CCEnv, List<Core_cterm_sort>, CCBinders, (CCEnv)-> PPair<CCEnv Core_cterm_sort>) -> PPair<CCEnv Core_cterm_sort>

  rule CCPatternTerms(#env, cterm*⟦ ##cterm ##cterm* ⟧, #binders, #cont) → CCPatternTerm(#env, #cterm, #binders, (env)->CCPatternTerms(env, #cterm*, #binders, #cont))
  rule CCPatternTerms(#env, cterm*⟦                  ⟧, #binders, #cont) → #cont(#env)

func CCPatternMaybeSubst(CCEnv, List<Core_csubst_sort>, CCBinders, (CCEnv)-> PPair<CCEnv Core_cterm_sort>) -> PPair<CCEnv Core_cterm_sort>

  rule CCPatternMaybeSubst(#env, csubst?⟦ [ ##cterm* ] ⟧, #binders, #cont) → CCPatternTerms(#env, #cterm*, #binders, #cont)
  rule CCPatternMaybeSubst(#env, #csubst?               , #binders, #cont) → #cont(#env)

func CCPatternMaybeMapEntries(CCEnv, List<Core_cmapentries_sort>, Core_cmapsort_sort, CCBinders, (CCEnv)-> PPair<CCEnv Core_cterm_sort>) -> PPair<CCEnv Core_cterm_sort>

  rule CCPatternMaybeMapEntries(#env, cmapentries?⟦ ##cmapentry* ⟧, #cmapsort, #binders, #cont) → CCPatternMapEntries(#env, #cmapentry*, #cmapsort, #binders, #cont)
  rule CCPatternMaybeMapEntries(#env, cmapentries?⟦              ⟧, #cmapsort, #binders, #cont) → #cont(#env)

func CCPatternMapEntries(CCEnv, List<Core_cmapentry_sort>, Core_cmapsort_sort, CCBinders, (CCEnv)-> PPair<CCEnv Core_cterm_sort>) -> PPair<CCEnv Core_cterm_sort>

  rule CCPatternMapEntries(#env, cmapentry*⟦ ##cmapentry ##cmapentry* ⟧, #cmapsort, #binders, #cont) → CCPatternMapEntry(#env, #cmapentry, #cmapsort, #binders, (env)->CCPatternMapEntries(env, #cmapentry*, #cmapsort, #binders, #cont))
  rule CCPatternMapEntries(#env, cmapentry*⟦                          ⟧, #cmapsort, #binders, #cont) → #cont(#env)

func CCPatternMapEntry(CCEnv, Core_cmapentry_sort, Core_cmapsort_sort, CCBinders, (CCEnv)-> PPair<CCEnv Core_cterm_sort>) -> PPair<CCEnv Core_cterm_sort>

  rule CCPatternMapEntry(#env, cmapentry⟦ : ##METAVAR          ⟧, #cmapsort                       , #binders, #cont) → #cont(CCEnvAddMetaVar(#env, #METAVAR, CCMeta(#METAVAR, csort⟦ { ##cmapsort } ⟧)))
  rule CCPatternMapEntry(#env, cmapentry⟦ ¬ ##METAVAR          ⟧, #cmapsort                       , #binders, #cont) → #cont(CCEnvAddMetaVar(#env, #METAVAR, CCMeta(#METAVAR, csort⟦ { ##cmapsort } ⟧)))
  rule CCPatternMapEntry(#env, cmapentry⟦ ##METAVAR : ##cterm  ⟧, cmapsort⟦ ##csort1 : ##csort2 ⟧ , #binders, #cont) → CCPatternTerm(CCEnvAddMetaVar(#env, #METAVAR, CCMeta(#METAVAR, #csort1)), #cterm, #binders, #cont)
  rule CCPatternMapEntry(#env, cmapentry⟦ ##VARIABLE           ⟧, #cmapsort                       , #binders, #cont) → #cont(CCEnvAddVar(#env, #VARIABLE, CCVar(#VARIABLE, csort⟦ String ⟧))) // TODO: sort
  rule CCPatternMapEntry(#env, cmapentry⟦ ¬ ##VARIABLE         ⟧, #cmapsort                       , #binders, #cont) → #cont(CCEnvAddVar(#env, #VARIABLE, CCVar(#VARIABLE, csort⟦ String ⟧))) // TODO: sort
  rule CCPatternMapEntry(#env, cmapentry⟦ ##VARIABLE : ##cterm ⟧, #cmapsort                       , #binders, #cont) → CCPatternTerm(CCEnvAddVar(#env, #VARIABLE, CCVar(#VARIABLE, csort⟦ String ⟧)), #cterm, #binders, #cont)  // TODO: sort
  rule CCPatternMapEntry(#env, cmapentry⟦ ##STRING             ⟧, #cmapsort                       , #binders, #cont) → #cont(#env)
  rule CCPatternMapEntry(#env, cmapentry⟦ ¬ ##STRING           ⟧, #cmapsort                       , #binders, #cont) → #cont(#env)
  rule CCPatternMapEntry(#env, cmapentry⟦ ##STRING : ##cterm   ⟧, #cmapsort                       , #binders, #cont) → CCPatternTerm(#env, #cterm, #binders, #cont)

// --- Pre-traversal handlers

/* Traverse down the term given term and search for closures */
// TODO: extract boilerplate
func CCTerm(CCEnv, Core_cterm_sort) -> PPair<CCEnv Core_cterm_sort>
rule CCTerm(#env, cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧) → CCConsUp(#canno*, #cqconstructor, #csortargs?, CCMaybeTerms(#env, #cterms?), #csortanno?)
rule CCTerm(#env, cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno? ⟧)          → CCMetaUp(#canno*, #METAVAR, CCMaybeTerms(#env, #cterms?), #csubst?, #csortanno?)
rule CCTerm(#env, cterm⟦ ##canno* ##VARIABLE : ##csort ⟧)                                → PairCons(CCEnvAddVar(#env, #VARIABLE, CCVar(#VARIABLE, #csort)), cterm⟦ ##canno* ##VARIABLE : ##csort ⟧)
rule CCTerm(#env, cterm⟦ ##canno* [ x : ##csort ] ##cterm[x] ⟧)                          → CCBinderUp(#canno*, #csort, [x] -> PairCons(x, CCTerm(CCEnvBind(#env, x, #csort), @NoSubst #cterm[x])))
rule CCTerm(#env, cterm⟦ ##canno* ( f ##csortanno? ) ##cterm[f] ⟧)                       → CCFormal(CCEnvResetParams(#env), cterm⟦ ##canno* ( f ##csortanno? ) ##cterm[f] ⟧, cterm⟦ ##canno* ( f ##csortanno? ) ##cterm[f] ⟧)
rule CCTerm(#env, cterm⟦ ##canno* thunk ##cterm ⟧)                                       → CCThunkUp(#canno*, CCThunk(CCEnvResetParams(#env), #cterm))
rule CCTerm(#env, cterm⟦ ##canno* ##METAVAR ##csortanno? = ##cterm ⟧)                    → Error("Internal Error: named terms cannot occur in contraction.")
rule CCTerm(#env, cterm⟦ ##canno* let ##METAVAR : ##csort = ##cterm ##cterm2 ⟧)          → CCLetExpr(#canno*, #METAVAR, #csort, CCTerm(CCEnvAddMetaVar(#env, #METAVAR, CCMeta(#METAVAR, #csort)), #cterm), #cterm2)
rule CCTerm(#env, #cterm)                                                                → PairCons(#env, #cterm) // literal, and map (since only occur in pattern) don't need to be lifted!

/* Traverses terms */
func CCMaybeTerms(CCEnv, List<Core_cterms_sort>) -> PPair<CCEnv List<Core_cterms_sort>>
rule CCMaybeTerms(#env, cterms?⟦ ( ##cterm* ) ⟧) → CCMaybeTermsUp(CCTerms(#env, #cterm*))
rule CCMaybeTerms(#env, #cterms?              ) → PairCons(#env, #cterms?)

func CCTerms(CCEnv, List<Core_cterm_sort>) -> PPair<CCEnv List<Core_cterm_sort>>
rule CCTerms(#env, cterm*⟦                  ⟧) → PairCons(#env, cterm*⟦⟧)
rule CCTerms(#env, cterm*⟦ ##cterm ##cterm* ⟧) → CCTermsUp(CCTerm(#env, #cterm), #cterm*)

// --- Process formal parameters. Setup environment for possible lifting.

func CCFormal(CCEnv, Core_cterm_sort, Core_cterm_sort /* original lambda term */) -> PPair<CCEnv Core_cterm_sort>
rule CCFormal(#env, cterm⟦ ##canno* ( f : ##csort ) ##cterm[f] ⟧, #lambda) → CCFormalUp(#canno*, #csort, [f] -> CCFormal(CCEnvAddParam(#env, f, #csort),  @NoSubst #cterm[f], #lambda))
rule CCFormal(#env, cterm⟦ ##canno* ( f           ) ##cterm[f] ⟧, #lambda) → Error("Fatal error: missing formal parameter type in lambda (needed by closure converter)")
rule CCFormal(#env, #cterm, #lambda)                                       → CCFormal2(#env, #cterm, #lambda)

func CCFormal2(CCEnv, Core_cterm_sort, Core_cterm_sort) -> PPair<CCEnv Core_cterm_sort>

  // Don't lift if of the form (x)(y)->#(x, y)
  rule CCFormal2(#env, cterm⟦ ##canno* ##METAVAR ##cterms? ##csortanno? ⟧, #lambda)
  → let #cterm =  cterm⟦ ##canno* ##METAVAR ##cterms? ##csortanno? ⟧
    if CCMustConvertMaybeTerms(CCEnvGetParams(#env), #cterms?, FALSE)
      CCLift(#env, #cterm, #lambda, CCCapture(#env, #cterm, {}))
    else
      CCTerm(#env, #cterm)

  rule CCFormal2(#env, #cterm, #lambda)
  → if CCMustConvert(#env, #cterm, TRUE)
      CCLift(#env, #cterm, #lambda, CCCapture(#env, #cterm, {}))
    else
      CCTerm(#env, #cterm)

// --- Process thunk.

func CCThunk(#env: CCEnv, #cterm: Core_cterm_sort) -> PPair<CCEnv Core_cterm_sort>
→ if CCMustConvert(#env, #cterm, TRUE)
    CCLift(#env, #cterm, cterm⟦ thunk ##cterm ⟧, CCCapture(#env, #cterm, {}))
  else
    CCTerm(#env, #cterm)

// --- Closure conversion happens here

func CCLift(CCEnv, Core_cterm_sort, Core_cterm_sort, {String : Core_cterm_sort}) -> PPair<CCEnv Core_cterm_sort>
rule CCLift(#env, #cterm, #lambda, #captures)
→ let #updatedRHS = cterm⟦ ⟨CONSTRUCTOR: CCName(#env)⟩ ⟨csortargs?: CCMaybeSortArgs(CCMaybeSortVars(#env, CCEnvName(#env)))⟩ ⟨cterms?: TermsToMaybeTerms(Concat(CCCallArgs(CCEnvParams(#env)), MapValues(#captures)))⟩ ⟨csortanno?: MaybeSortToMaybeSortAnno(TermSort(#cterm))⟩⟧ // Updated function call to lifted function
  PairCons(
    CCLiftedDecl(#env, CCEnvName(#env), #cterm, #lambda, #captures) /* New lifted function creation */, #updatedRHS)

func CCMaybeSortArgs(List<Core_csortvars_sort>) -> List<Core_csortargs_sort>
rule CCMaybeSortArgs(csortvars?⟦⟧) → csortargs?⟦⟧
rule CCMaybeSortArgs(#csortvars? ) → csortargs?⟦ < ⟨csort*: MaybeSortVarsToSorts(#csortvars?)⟩ > ⟧

func CCCallArgs(List<PPair<String Core_csort_sort>>) -> List<Core_cterm_sort>
rule CCCallArgs((                                      )) → cterm*⟦⟧
rule CCCallArgs((PairCons(#VARIABLE, #csort), #pairs...)) → cterm*⟦ ##VARIABLE : ##csort ⟨cterm*: CCCallArgs(#pairs)⟩ ⟧

/* Produce a unique, deterministic, function name */
func CCName(#env: CCEnv) -> String
→ ConcatString(CCEnvName(#env), ConcatString("CC", FormatNumber(CCEnvCounter(#env))))

/* Generate lifted function sort and associated rule. Recursively CC the lifted function. */
func CCLiftedDecl(#env: CCEnv, #name: String, #cterm: Core_cterm_sort, #lambda: Core_cterm_sort, #captures: {String : Core_cterm_sort}) -> CCEnv
→ CCLiftedDeclCC(#env, CCName(#env), CCLiftedFunSort(#env, #name, #cterm, #captures), CCLiftedRule(#env, CCName(#env), #lambda, #captures))

func CCLiftedDeclCC(#env: CCEnv, #name:String, #funcdecl: Core_cdecl_sort, #ruledecl: Core_cdecl_sort ) -> CCEnv
→ //Debug(PrintTerm("", #funcdecl), ()->
  //Debug(PrintTerm("", #ruledecl), ()->
  CCEnvIncCounter(CCEnvSetContent(#env,
                                  CCRules(#name,
                                         (#ruledecl,),
                                         PutRulesC(PutFuncSortC(CCEnvContent(#env), #funcdecl, FALSE), #name, (#ruledecl,)))))
    //                                     ))

func CCMaybeSortVars(#env: CCEnv, #name:String) -> List<Core_csortvars_sort>
→ GetMaybeSortVars(UnSOME(GetFuncSort(CCEnvContent(#env), #name)))

// -- Generate sort for the lifted function

func CCLiftedFunSort(#env : CCEnv, #name: String, #cterm: Core_cterm_sort, #captures: {String : Core_cterm_sort}) -> Core_cdecl_sort
→ CCLiftedFunSort2(#env, #cterm, Concat(UnZipS(CCEnvParams(#env)), CCCaptureSorts(MapValues(#captures))))

func CCLiftedFunSort2(#env : CCEnv, #cterm: Core_cterm_sort, #sorts: List<Core_csort_sort>) -> Core_cdecl_sort
→ let #csort = CCReturnSort(TermSort(#cterm))
  cdecl⟦ func ⟨csortvars?: CCUsedSortVars((#csort, #sorts...))⟩ ##csort ⟨CONSTRUCTOR: CCName(#env)⟩ ⟨csortsdefault?: SortsToMaybeSortsDefault(#sorts)⟩ ⟧

func CCReturnSort(Option<Core_csort_sort>) -> Core_csort_sort
rule CCReturnSort(NONE)         → Error("Fatal error: missing term sort annotation (needed by closure converter)")
rule CCReturnSort(SOME(#csort)) → GetFOSort(#csort)

func CCCaptureSorts(#terms: List<Core_cterm_sort>) -> List<Core_csort_sort>
→ Map((term)->UnSOME(TermSort(term)), #terms)

/* Gets the list of sort variables used in the given list of `#sorts`, recursively */
func CCUsedSortVars(#sorts: List<Core_csort_sort>) -> List<Core_csortvars_sort>
→ VarsToMaybeSortVars(SortVarsSorts(#sorts, ()))

// -- Generate rule for the lifted function.

func CCLiftedRule(#env: CCEnv, #name: String, #lambda: Core_cterm_sort, #captures: {String : Core_cterm_sort}) -> Core_cdecl_sort
→ let #cterms? = TermsToMaybeTerms(Concat(CCLiftedPattern(#name, 0, CCEnvParams(#env)), MapValues(#captures)))
  cdecl⟦ rule ⟨CONSTRUCTOR: #name⟩ ##cterms? → ⟨cterm: CCLiftedContractum(#name, #lambda, 0, {})⟩ ⟧

func CCLiftedPattern(String, Numeric, List<PPair<String Core_csort_sort>>) -> List<Core_cterm_sort>

  rule CCLiftedPattern(#name, #i, (PairCons(#param, #csort), #params...))
  → cterm*⟦ ⟨METAVAR: CCMetaVar(#name, #i)⟩ : ##csort ⟨cterm*: CCLiftedPattern(#name, Plus(#i, 1), #params)⟩ ⟧

  rule CCLiftedPattern(#name, #i, ())
  → cterm*⟦⟧

// TODO: don't use builtin substitution due to issue #24
func CCLiftedContractum(String, Core_cterm_sort, Numeric, {String : Core_cterm_sort}) -> Core_cterm_sort

  rule CCLiftedContractum(#name, cterm⟦ ##canno* ( f : ##csort ) ##cterm[f] ⟧, #i, #subst)
  → CCLiftedContractum(#name, #cterm[f], Plus(#i, 1), MapPutVar(#subst, f, cterm⟦ ⟨METAVAR: CCMetaVar(#name, #i)⟩ : ##csort ⟧))

  rule CCLiftedContractum(#name, cterm⟦ ##canno* thunk ##cterm ⟧, #i, #subst)
  → CCLiftedContractum(#name, #cterm, #i, #subst)

  rule CCLiftedContractum(#name, #cterm, #i, #subst)
  → Substitute(#cterm, #subst)

func CCMetaVar(#name: String, #i: Numeric) -> String
→ ConcatString("#", ConcatString(#name, FormatNumber(Plus(#i, 1))))

// --- Compute captured variable and meta-variables

func CCCapture(CCEnv, Core_cterm_sort, {String : Core_cterm_sort}) -> {String : Core_cterm_sort}

  rule CCCapture(#env, cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧, #cptrs) → CCCaptureMaybeTerms(#env, #cterms?, #cptrs)
  rule CCCapture(#env, cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno?          ⟧, #cptrs) → CCCaptureMaybeSubst(#env, #csubst?, CCCaptureMaybeTerms(#env, #cterms?, CCCaptureMeta(#env, #METAVAR, CCEnvGetMetaVar(#env, #METAVAR), #cptrs)))
  rule CCCapture(#env, cterm⟦ ##cliteral                                                   ⟧, #cptrs) → #cptrs
  rule CCCapture(#env, cterm⟦ ##canno* ##VARIABLE ##csortanno?                             ⟧, #cptrs) → CCCaptureVar(#env, #VARIABLE, #cptrs)
  rule CCCapture(#env, cterm⟦ ##canno* { ##cmapentries? } ##csortanno?                     ⟧, #cptrs) → Error("CC: map capture not implemented yet")
  rule CCCapture(#env, cterm⟦ ##canno* [ x ##csortanno? ] ##cterm[x]                       ⟧, #cptrs) → CCCapture(#env, #cterm[x], #cptrs)
  rule CCCapture(#env, cterm⟦ ##canno* ( f ##csortanno? ) ##cterm[f]                       ⟧, #cptrs) → CCCapture(#env, #cterm[f], #cptrs)
  rule CCCapture(#env, cterm⟦ ##canno* thunk ##cterm                                       ⟧, #cptrs) → CCCapture(#env, #cterm, #cptrs)
  rule CCCapture(#env, cterm⟦ ##METAVAR ##csortanno? = ##cterm                             ⟧, #cptrs) → CCCapture(#env, #cterm, #cptrs)
  rule CCCapture(#env, cterm⟦ ##canno* let ##METAVAR : ##csort = ##cterm ##cterm2          ⟧, #cptrs) → CCCapture(#env, #cterm2, CCCapture(#env, #cterm, #cptrs))

func CCCaptureMaybeTerms(CCEnv, List<Core_cterms_sort>, {String : Core_cterm_sort}) -> {String : Core_cterm_sort}

  rule CCCaptureMaybeTerms(#env, cterms?⟦ ( ##cterm* ) ⟧, #cptrs) → CCCaptureTerms(#env, #cterm*, #cptrs)
  rule CCCaptureMaybeTerms(#env, #cterms?              , #cptrs) → #cptrs

func CCCaptureTerms(CCEnv, List<Core_cterm_sort>, {String : Core_cterm_sort}) -> {String : Core_cterm_sort}

  rule CCCaptureTerms(#env, cterm*⟦ ##cterm ##cterm* ⟧, #cptrs) → CCCaptureTerms(#env, #cterm*, CCCapture(#env, #cterm, #cptrs))
  rule CCCaptureTerms(#env, cterm*⟦                  ⟧, #cptrs) → #cptrs

func CCCaptureMaybeSubst(CCEnv, List<Core_csubst_sort>, {String : Core_cterm_sort}) -> {String : Core_cterm_sort}

  rule CCCaptureMaybeSubst(#env, csubst?⟦ [ ##cterm* ] ⟧, #cptrs) → CCCaptureTerms(#env, #cterm*, #cptrs)
  rule CCCaptureMaybeSubst(#env, #csubst?              , #cptrs) → #cptrs

func CCCaptureMeta(#env: CCEnv, #METAVAR: String, #ovarentry: Option<CCVarEntry>, #cptrs: {String : Core_cterm_sort}) -> {String : Core_cterm_sort}
→ if HasOption(#ovarentry)
    let #varentry = UnSOME(#ovarentry)
    IfPresent(MapGet(#cptrs, #METAVAR),
      (term)->#cptrs, // already captured.
      ()->MapPut(#cptrs, #METAVAR, CCBoundTerm(GetBoundVarSorts(CCGetSort(#varentry)), GetFormalParamSorts(CCGetSort(#varentry)), #METAVAR, cterm*⟦⟧, GetFOSort(CCGetSort(#varentry)))))
  else
    #cptrs // metavar not in the environment: it's local defined under the closure. Do not capture it.

func CCCaptureVar(#env: CCEnv, #VARIABLE: String, #cptrs:{String : Core_cterm_sort}) -> {String : Core_cterm_sort}
→ IfPresent(MapGetVar(#cptrs, #VARIABLE),
    (term)->#cptrs, // already captured.
    ()->CCCaptureVar2(#env, #VARIABLE, #cptrs))

func CCCaptureVar2(#env: CCEnv, #VARIABLE: String, #cptrs:{String : Core_cterm_sort}) -> {String : Core_cterm_sort}
→ IfPresent(CCEnvGetVar(#env, #VARIABLE),
    (entry)->MapPutVar(#cptrs, #VARIABLE, cterm⟦ ##VARIABLE : ⟨csort: CCGetSort(entry)⟩ ⟧),
    ()-> CCCaptureBoundVar(#env, CCEnvGetBVar(#env, #VARIABLE), #VARIABLE, #cptrs))

func CCCaptureBoundVar(#env: CCEnv, #ocsort: Option<Core_csort_sort>, #VARIABLE: String, #cptrs:{String : Core_cterm_sort}) -> {String : Core_cterm_sort}
→ IfPresent(#ocsort,
    (csort)->MapPutVar(#cptrs, #VARIABLE,  cterm⟦ ##VARIABLE : ⟨csort: csort⟩ ⟧), // override entry if already there. fine.
    ()->#cptrs) // bound variable or fresh variable inside lambda. No need to capture.

/* Bind the given `#cterm` with bound variables of the given `#csorts` */
func CCBoundTerm(List<Core_csort_sort>, List<Core_csort_sort>, String, List<Core_cterm_sort>, Core_csort_sort) -> Core_cterm_sort
rule CCBoundTerm(csort*⟦                  ⟧, #paramSorts, #METAVAR, #csubst*, #csort ) → CCBoundTerm2(#paramSorts, #METAVAR, TermsToMaybeSubst(#csubst*), cterm*⟦⟧, #csort)
rule CCBoundTerm(csort*⟦ ##csort ##csort* ⟧, #paramSorts, #METAVAR, #csubst*, #csort2) → cterm⟦ [ x : ##csort ] ⟨cterm: CCBoundTerm(#csort*, #paramSorts, #METAVAR, Append(cterm⟦ x ⟧, #csubst*), #csort2)⟩ ⟧

func CCBoundTerm2(List<Core_csort_sort>, String, List<Core_csubst_sort>, List<Core_cterm_sort>, Core_csort_sort) -> Core_cterm_sort
rule CCBoundTerm2(csort*⟦                  ⟧, #METAVAR, #csubst?, #cterm*, #csort ) → cterm⟦ ##METAVAR ⟨cterms?: TermsToMaybeTerms(#cterm*)⟩ ##csubst? : ##csort ⟧
rule CCBoundTerm2(csort*⟦ ##csort ##csort* ⟧, #METAVAR, #csubst?, #cterm*, #csort2) → cterm⟦ ( x : ##csort ) ⟨cterm: CCBoundTerm2(#csort*, #METAVAR, #csubst?, Append(cterm⟦ x ⟧, #cterm*), #csort2)⟩ ⟧

// --- Post traversal handlers

func CCConsUp(List<Core_canno_sort>, Core_cqconstructor_sort, List<Core_csortargs_sort>, PPair<CCEnv List<Core_cterms_sort>>, List<Core_csortanno_sort>) -> PPair<CCEnv Core_cterm_sort>
rule CCConsUp(#canno*, #cqconstructor, #csortargs?, PairCons(#env, #cterms?), #csortanno?) → PairCons(#env, cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧)

func CCMetaUp(List<Core_canno_sort>, String, PPair<CCEnv List<Core_cterms_sort>>, List<Core_csubst_sort>, List<Core_csortanno_sort>) -> PPair<CCEnv Core_cterm_sort>
rule CCMetaUp(#canno*, #METAVAR, PairCons(#env, #cterms?), #csubst?, #csortanno?) → PairCons(#env, cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno? ⟧)

func CCBinderUp(List<Core_canno_sort>, Core_csort_sort, [String] -> PPair<String PPair<CCEnv Core_cterm_sort>>) -> PPair<CCEnv Core_cterm_sort>
rule CCBinderUp(#canno*, #csort, [x] -> PairCons(#x, PairCons(#env, #cterm[x])))
→ PairCons(CCEnvUnBind(#env, #x), cterm⟦ ##canno* [ x : ##csort ] ##cterm[x] ⟧ )

func CCFormalUp(List<Core_canno_sort>, Core_csort_sort, [String] -> PPair<CCEnv Core_cterm_sort>) -> PPair<CCEnv Core_cterm_sort>
rule CCFormalUp(#canno*, #csort, [f] -> PairCons(#env, #cterm[f])) → PairCons(#env, cterm⟦ ##canno* ( f : ##csort ) ##cterm[f] ⟧)

func CCThunkUp(List<Core_canno_sort>, PPair<CCEnv Core_cterm_sort>) -> PPair<CCEnv Core_cterm_sort>
rule CCThunkUp(#canno*, PairCons(#env, #cterm)) → PairCons(#env, cterm⟦ ##canno* thunk ##cterm ⟧)

func CCMaybeTermsUp(PPair<CCEnv List<Core_cterm_sort>>) -> PPair<CCEnv List<Core_cterms_sort>>
rule CCMaybeTermsUp(PairCons(#env, #cterm*)) → PairCons(#env, cterms?⟦ ( ##cterm* ) ⟧)

func CCTermsUp(PPair<CCEnv Core_cterm_sort>, List<Core_cterm_sort>) -> PPair<CCEnv List<Core_cterm_sort>>
rule CCTermsUp(PairCons(#env, #cterm), #cterm*) → UnPair(CCTerms(#env, #cterm*), (env cterms) -> PairCons(env, cterm*⟦ ##cterm ⟨cterm*: cterms⟩ ⟧))

func CCLetExpr(List<Core_canno_sort>, String, Core_csort_sort, PPair<CCEnv Core_cterm_sort>, Core_cterm_sort) ->PPair<CCEnv Core_cterm_sort>
rule CCLetExpr(#canno*, #METAVAR,  #csort, PairCons(#env, #cterm), #cterm2)
→ CCLetUp(#canno*, #METAVAR, #csort, #cterm, CCTerm(#env, #cterm2))

func CCLetUp(List<Core_canno_sort>, String, Core_csort_sort, Core_cterm_sort, PPair<CCEnv Core_cterm_sort>) ->PPair<CCEnv Core_cterm_sort>
rule CCLetUp(#canno*, #METAVAR,  #csort, #cterm, PairCons(#env, #cterm2))
→ PairCons(#env, cterm⟦ ##canno* let ##METAVAR : ##csort = ##cterm ##cterm2 ⟧)

// -- Test whether closure convertion is needed or not

/* @return `TRUE` when:
   - the given `#term` is a lambda not of the form (x1) .. (xn) -> F(x1 .. xn, #1 .. #M)
   where F is a function and #1 .. #M are captured variables and meta-variables.
   - the given `#term` is a lambda not the form (x1) .. (xn) -> #(x1 .. xn). Triggered when `#allowsCaptured` is `FALSE`
*/
func CCMustConvert(CCEnv, Core_cterm_sort, Bool) -> Bool

  rule CCMustConvert(#env, cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧, #allowsCaptured)
  → CCMustConvertMaybeTerms(CCEnvGetParams(#env), #cterms?, #allowsCaptured)

  rule CCMustConvert(#env, #cterm, #allowsCaptured)
  → TRUE

func CCMustConvertMaybeTerms(List<PPair<String Core_csort_sort>>, List<Core_cterms_sort>, Bool) -> Bool

  rule CCMustConvertMaybeTerms(()     , cterms?⟦              ⟧, #allowsCaptured) → FALSE
  rule CCMustConvertMaybeTerms(()     , cterms?⟦ (          ) ⟧, #allowsCaptured) → FALSE
  rule CCMustConvertMaybeTerms(#params, cterms?⟦              ⟧, #allowsCaptured) → TRUE
  rule CCMustConvertMaybeTerms(#params, cterms?⟦ (          ) ⟧, #allowsCaptured) → TRUE
  rule CCMustConvertMaybeTerms(#params, cterms?⟦ ( ##cterm* ) ⟧, #allowsCaptured) → CCMustConvertTerms(#params, #cterm*, #allowsCaptured)

func CCMustConvertTerms(List<PPair<String Core_csort_sort>>, List<Core_cterm_sort>, Bool) -> Bool

  rule CCMustConvertTerms((), cterm*⟦⟧, #allowsCaptured)
  → FALSE

  rule CCMustConvertTerms((), cterm*⟦ ##cterm ##cterm* ⟧, #allowsCaptured)
  → if #allowsCaptured
      CCConvertCaptured(cterm*⟦ ##cterm ##cterm* ⟧)
    else
      TRUE

  rule CCMustConvertTerms((PairCons(var, #sort), #params...), cterm*⟦ ##canno* ##VARIABLE ##csortanno? ##cterm*  ⟧, #allowsCaptured)
  → if SameVariable(var, #VARIABLE)
      CCMustConvertTerms(#params, #cterm*, #allowsCaptured)
    else
      TRUE

  rule CCMustConvertTerms(#params, #cterm*, #allowsCaptured)
  → TRUE

// Check the rest of the arguments are all valid captured arguments.
func CCConvertCaptured(List<Core_cterm_sort>) -> Bool

  rule CCConvertCaptured(cterm*⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ##cterm* ⟧) → TRUE
  rule CCConvertCaptured(cterm*⟦ ##canno* ##METAVAR                     ##csortanno?          ##cterm* ⟧) → CCConvertCaptured(#cterm*)
  rule CCConvertCaptured(cterm*⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno?          ##cterm* ⟧) → TRUE
  rule CCConvertCaptured(cterm*⟦ ##canno* ##cliteral                                          ##cterm* ⟧) → TRUE   // We could decide not to convert for literal.
  rule CCConvertCaptured(cterm*⟦ ##canno* ##VARIABLE ##csortanno?                             ##cterm* ⟧) → CCConvertCaptured(#cterm*)
  rule CCConvertCaptured(cterm*⟦ ##canno* { ##cmapentries? } ##csortanno?                     ##cterm* ⟧) → TRUE
  rule CCConvertCaptured(cterm*⟦ ##canno* [ x ##csortanno? ] ##cterm[x]                       ##cterm* ⟧) → Or(CCConvertBound((x,), #cterm[x]), CCConvertCaptured(#cterm*))
  rule CCConvertCaptured(cterm*⟦ ##canno* ( f ##csortanno? ) ##cterm[f]                       ##cterm* ⟧) → Or(CCConvertFormal((f,), #cterm[f]), CCConvertCaptured(#cterm*))
  rule CCConvertCaptured(cterm*⟦ ##canno* thunk ##cterm                                       ##cterm* ⟧) → TRUE
  rule CCConvertCaptured(cterm*⟦ ##canno* let ##METAVAR ##csortanno? = ##cterm ##cterm2       ##cterm* ⟧) → Error("Internal Error: let expression as function argument not supported yet.")
  rule CCConvertCaptured(cterm*⟦ ##METAVAR ##csortanno? = ##cterm                             ##cterm* ⟧) → Error("Internal Error: named terms cannot occur in contraction.")
  rule CCConvertCaptured(cterm*⟦                                                                       ⟧) → FALSE

func CCConvertBound(List<String>, Core_cterm_sort) -> Bool

  rule CCConvertBound(#bound, cterm⟦ ##canno* [ x ##csortanno? ] ##cterm[x]     ⟧)   → CCConvertBound(Append(x, #bound), #cterm[x])
  rule CCConvertBound(#bound, cterm⟦ ##canno* ##METAVAR [ ##cterm* ] ##csortanno? ⟧) → Not(CheckSameVariables(#bound, #cterm*))
  rule CCConvertBound(#bound, #cterm)                                                → TRUE

func CCConvertFormal(List<String>, Core_cterm_sort) -> Bool

  rule CCConvertFormal(#formal, cterm⟦ ##canno* ( f ##csortanno? ) ##cterm[f]       ⟧) → CCConvertFormal(Append(x, #formal), #cterm[x])
  rule CCConvertFormal(#formal, cterm⟦ ##canno* ##METAVAR ( ##cterm* ) ##csortanno? ⟧) → Not(CheckSameVariables(#formal, #cterm*))
  rule CCConvertFormal(#formal, #cterm)                                                → TRUE

// -- Formal and bound

enum CCBinders | CCBinders(List<PPair<String Core_csort_sort>>)

func CCNewBinderStack -> CCBinders
→ CCBinders(())

func CCBinderAdd(CCBinders, PPair<String Core_csort_sort>) -> CCBinders
rule CCBinderAdd(CCBinders(#), #binder) → CCBinders((#binder, #...))

func CCGetBinderSorts(List<Core_cterm_sort>, CCBinders) -> List<Core_csort_sort>
rule CCGetBinderSorts(#cterm*, CCBinders(#binders)) → Map((term)->CCFindSort(term, #binders), #cterm*)

func CCFindSort(Core_cterm_sort, List<PPair<String Core_csort_sort>>) -> Core_csort_sort

  rule CCFindSort(cterm⟦ ##canno* ##VARIABLE ##csortanno? ⟧, (PairCons(#var, #sort), #binders...))
  → if SameVariable(#VARIABLE, #var)
      #sort
    else
      CCFindSort(cterm⟦ ##VARIABLE ⟧, #binders)

  rule CCFindSort(cterm⟦ ##canno* ##VARIABLE ##csortanno? ⟧, ())
  → Error("Internal Error: undefined binder.")

// -- Environment

enum CCVarEntry | CCMeta(String, Core_csort_sort /* Higher-order sort */) | CCVar(String, Core_csort_sort)

func CCGetSort(CCVarEntry) -> Core_csort_sort
rule CCGetSort(CCMeta(#, #csort)) → #csort
rule CCGetSort(CCVar (#, #csort)) → #csort

enum CCEnv | CCEnv(
                 String,                               // Function constructor
                 Content,                              // The module content
                 List<Core_cdecl_sort>,                // List of converted rules
                 List<PPair<String Core_csort_sort>>,  // List of formal parameters with sorts
                 Numeric,                              // A counter
                 {String:CCVarEntry},                  // Free, fresh and meta variables
                 {String:Core_csort_sort}              // In-scope bound variables
             )


func CCEnvNew(#name: String, #content: Content) -> CCEnv
→ CCEnv(#name, #content, (), (), 1, {}, {})

// --- Function name

func CCEnvName(CCEnv) -> String
rule CCEnvName(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars)) → #name

// --- Module content

func CCEnvContent(CCEnv) -> Content
rule CCEnvContent(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars)) → #content

func CCEnvSetContent(CCEnv, Content) -> CCEnv
rule CCEnvSetContent(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars), #newcontent) → CCEnv(#name, #newcontent, #rules, #params, #counter, #vars, #bvars)

// --- List of converted rules

func CCEnvRules(CCEnv) -> List<Core_cdecl_sort>
rule CCEnvRules(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars)) → #rules

func CCEnvAddRule(CCEnv, Core_cdecl_sort) -> CCEnv
rule CCEnvAddRule(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars), #rule) → CCEnv(#name, #content, Append(#rule, #rules), #params, #counter, #vars, #bvars)

// ---  List of formal parameters with sorts

func CCEnvParams(CCEnv) -> List<PPair<String  Core_csort_sort>>
rule CCEnvParams(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars)) → #params

func CCEnvResetParams(CCEnv) -> CCEnv
rule CCEnvResetParams(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars)) → CCEnv(#name, #content, #rules, (), #counter, #vars, #bvars)

func CCEnvAddParam(CCEnv, String, Core_csort_sort) -> CCEnv
rule CCEnvAddParam(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars), #param, #sort) → CCEnv(#name, #content, #rules, Append(PairCons(#param, #sort), #params), #counter, #vars, #bvars)

func CCEnvGetParams(CCEnv) -> List<PPair<String Core_csort_sort>>
rule CCEnvGetParams(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars)) → #params

// --- CC counter

func CCEnvCounter(CCEnv) -> Numeric
rule CCEnvCounter(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars)) → #counter

func CCEnvIncCounter(CCEnv) -> CCEnv
rule CCEnvIncCounter(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars)) → CCEnv(#name, #content, #rules, #params, Plus(#counter, 1), #vars, #bvars)

// --- Free, fresh and meta variables

func CCEnvVars(CCEnv) -> {String:CCVarEntry}
rule CCEnvVars(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars)) → #vars

func CCEnvAddVar(CCEnv, String, CCVarEntry) -> CCEnv
rule CCEnvAddVar(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars), #var, #entry) → CCEnv(#name, #content, #rules, #params, #counter, MapPutVar(#vars, #var, #entry), #bvars)

func CCEnvGetVar(CCEnv, String) -> Option<CCVarEntry>
rule CCEnvGetVar(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars), #var) → MapGetVar(#vars, #var)

func CCEnvAddMetaVar(CCEnv, String, CCVarEntry) -> CCEnv
rule CCEnvAddMetaVar(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars), #metavar, #entry) → CCEnv(#name, #content, #rules, #params, #counter, MapPut(#vars, #metavar, #entry), #bvars)

func CCEnvGetMetaVar(CCEnv, String) -> Option<CCVarEntry>
rule CCEnvGetMetaVar(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars), #meta) → MapGet(#vars, #meta)

// --- Bound variables

func CCEnvBind(CCEnv, String, Core_csort_sort) -> CCEnv
rule CCEnvBind(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars), #bvar, #csort) → CCEnv(#name, #content, #rules, #params, #counter, #vars, MapPutVar(#bvars, #bvar, #csort))

func CCEnvGetBVar(CCEnv, String) -> Option<Core_csort_sort>
rule CCEnvGetBVar(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars), #bvar) → MapGetVar(#bvars, #bvar)

func CCEnvUnBind(CCEnv, String) -> CCEnv
rule CCEnvUnBind(CCEnv(#name, #content, #rules, #params, #counter, #vars, #bvars), #bvar) → CCEnv(#name, #content, #rules, #params, #counter, #vars, MapRemove(#bvars, #bvar))
