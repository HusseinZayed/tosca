/*
 * Copyright (c) 2015 IBM Corporation.
 *
 * @author : m schett
 * @date   : 08/25/2015
 */

Specify[(

$Use["std/core.crs"];
$Use["std/list.crs"];
$Use["std/pair.crs"];

$Use["unification/mgu.crs"];
$Use["unification/unification.crs"];

$Use["utils/wrap.crs"];
$Use["utils/unwrap.crs"];
$Use["utils/termops.crs"];
$Use["utils/crsxequs.crs"];


/* Disclaimer: Work in Progress --- neither working nor tested */

OverlapOrder ::=  ( /* the terms do not unify */
                    INCOMPARABLE;   
                    /* the terms are a renaming of each other */
                    RENAMING;      //areVariants  
                    /* the first term Is[An]Instance of the second term, 
                        wrt. to the given substitution [one of those things is redundant] */
                    IsInstance[Crsx_term_sort, Mgu, Crsx_term_sort]; 
                    /* the first term Is[A]Generalization of the second term */
                    IsGeneralization[Crsx_term_sort, Mgu, Crsx_term_sort]; 
                   /* the first term and the second term unify with the given mgu,
                      but neither is an instance of the other */
                    AreParallel[Crsx_term_sort, Mgu, Crsx_term_sort]; );

ComputeOverlapOrder[Crsx_term_sort, Crsx_term_sort ] :: OverlapOrder;
ComputeOverlapOrder[ #t1, #t2 ] → 
   MatchUnifier[UnifyTerms[#t1, #t2], #t1, #t2];
   /* checks whether a unifier between #t1 and #t2 exists */
   MatchUnifier[Mgu, Crsx_term_sort, Crsx_term_sort] :: OverlapOrder;
   MatchUnifier[FAIL,         #t1, #t2] → INCOMPARABLE;
   MatchUnifier[Mgu[#theta],  #t1, #t2] 
   → MatchInstance[RestrictDomain[Mgu[#theta], #t1], 
                   RestrictDomain[Mgu[#theta], #t2], Mgu[#theta], #t1, #t2];
   /* if there is a unifier, it computes whether one term is an instance */
   MatchInstance[Option[Mgu], Option[Mgu], Mgu, Crsx_term_sort, Crsx_term_sort ] :: OverlapOrder;
   MatchInstance[NONE,        NONE,          #mgu, #t1, #t2] → AreParallel[#t1, #mgu, #t2];
   MatchInstance[SOME[#mgu1],  SOME[#mgu2],  #mguP, #t1, #t2] → RENAMING;
   MatchInstance[SOME[#mgu1], NONE,          #mguP, #t1, #t2] → IsGeneralization[#t1, #mguP, #t2];
   MatchInstance[NONE,        SOME[#mgu2],   #mguP, #t1, #t2] → IsInstance[#t1, #mguP, #t2];


∀ l a . Tree[l,a] ::= ( Leaf[a]; Branch[ a , $List[Pair[l,Tree[l,a]]]]; Empty; );

∀ l a . Root[ Tree[l,a] ] :: a;
Root[ Leaf[#] ] → #;
Root[ Branch[#, #succs]] → #;

∀ l a . Succs[ Tree[l,a] ] :: $List[ Tree[l,a]  ];
Succs[ Leaf[#] ] → ();
Succs[ Branch[#, #succs]] → Map[ x.Snd[x], #succs];


INIT_TREE[Crsx_sortDeclaration_sort] :: Tree[Mgu, Crsx_ruleDeclaration_sort];
INIT_TREE[ #sortDeclaration ] → 
Branch[ %ruleDeclaration⟦ ⟨pattern: WrapPattern[BluePrint[#sortDeclaration]]⟩ → F_LLBACK ⟧, () ];


// input: a list of rules
// output: a list of trees, ordered by instances
ComputeInstanceOrder[Crsx_sortDeclaration_sort, $List[Crsx_ruleDeclaration_sort]] :: Tree[Mgu, Crsx_ruleDeclaration_sort];
ComputeInstanceOrder[#sortDeclaration, #ruleDeclarations] 
→ FoldlP[r tree . InsertRule[r, tree], INIT_TREE[#sortDeclaration], #ruleDeclarations];


InsertRule[Crsx_ruleDeclaration_sort, Tree[Mgu, Crsx_ruleDeclaration_sort]] :: Tree[Mgu, Crsx_ruleDeclaration_sort];
InsertRule[ #r1, Branch[ #r2, #succs]]
→ MatchInsert[ComputeOverlapOrder[Lhs[#r1], 
                                  Lhs[#r2]], #r1, Branch[ #r2, #succs]];

MatchInsert[OverlapOrder, Crsx_ruleDeclaration_sort, Tree[Mgu, Crsx_ruleDeclaration_sort]] :: Tree[Mgu, Crsx_ruleDeclaration_sort];
// missing if root is overlapped twice!
MatchInsert[RENAMING, #r1, Branch[#r2, #succs]] →  Branch[#r1, #succs]; 


MatchInsert[IsInstance[#lhs1, #mgu, #lhs2], #r1, Branch[#r2, #succs]] →  
Branch[ #r2, InsertInSuccs[#r1, #mgu, #succs ]];


InsertInSuccs[Crsx_ruleDeclaration_sort, Mgu, $List[Pair[Mgu,Tree[Mgu, Crsx_ruleDeclaration_sort]]]] :: $List[Pair[Mgu,Tree[Mgu, Crsx_ruleDeclaration_sort]]];
InsertInSuccs[ #r, #mgu, () ] → ( PairCons[ #mgu, Branch[ #r, ()]];  );
InsertInSuccs[ #r, #mgu, (PairCons[#mgu2, #t];#ts)] → MatchInsertSuccs[ComputeOverlapOrder[Lhs[#r], 
                                  Lhs[Root[#t]]], #r, #mgu, PairCons[#mgu2,#t], #ts, ()];

MatchInsertSuccs[ OverlapOrder, 
                  Crsx_ruleDeclaration_sort, 
                  Mgu,
                  Pair[Mgu,Tree[Mgu, Crsx_ruleDeclaration_sort]],
                  $List[ Pair[Mgu,Tree[Mgu, Crsx_ruleDeclaration_sort]]], 
                  $List[  Pair[Mgu,Tree[Mgu, Crsx_ruleDeclaration_sort]]]
                ] :: $List[Pair[Mgu,Tree[Mgu, Crsx_ruleDeclaration_sort]]];

MatchInsertSuccs[RENAMING, #r, #mgu1, PairCons[#mgu, #t], #ts, #acc] → ErrorRenaming[#r, Root[#t]];
MatchInsertSuccs[AreParallel[#lhs1, #mgu, #lhs2], #r, #mgu1, PairCons[#mgu, #t], #ts, #acc] → ErrorParallelOverlap[#mgu, #r, Root[#t]];


// r and rt of current are not comparable 
// try to insert in rest
//MatchInsertSuccs[INCOMPARABLE, #r, #mgu1, #t, #ts, ()] → (#t; InsertInSuccs[#r, #mgu1, #ts]);

//MatchInsertSuccs[IsInstance[#lhs1, #mgu, #lhs2], #r, #mgu1, #t, #ts, #acc] →  (InsertRule[#r,#t]; #ts); 


//MatchInsertSuccs[IsInstance[#lhs1, #mgu, #lhs2], #r, #mgu, #t, #ts, SOME[#foo]] → Error["AAAH!"];

/*
MatchInsertSuccs[IsGeneralization[#lhs1, #mgu, #lhs2], #r, #mgu, #t, (#t2;#ts), #acc] 
→  MatchInsertSuccs[ ComputeOverlapOrder[Lhs[#r], Lhs[Root[#t2]]],#r, #mgu, #t2, #ts, (PairCons[#mgu,#t]; #acc)]; 


/*
ComputeInstanceOrder[$List[Crsx_ruleDeclaration_sort]] :: Tree[Mgu, Crsx_ruleDeclaration_sort];
ComputeInstanceOrder[#rules] → FoldlP[r trees . InsertInstance[r, trees, ()], (Empty;), #rules];

InsertInstance[ Crsx_ruleDeclaration_sort, $List[Tree[Mgu, Crsx_ruleDeclaration_sort]], $List[Tree[Mgu, Crsx_ruleDeclaration_sort]] ] :: Tree[Mgu, Crsx_ruleDeclaration_sort];
InsertInstance[ #r, (), ()] → ( Leaf[#r]; );
InsertInstance[ #r, (), #acc] → ( Branch[ #r, #acc ]; );
InsertInstance[ #r, (#t; #ts), #acc] 
→ MatchInsert[ComputeOverlapOrder[Lhs[#r], 
                                  Lhs[Root[#t]]], #r, #t, #ts, #acc /* generalization collect ];

//MatchInsert[OverlapOrder, Crsx_ruleDeclaration_sort, Tree[Mgu, Crsx_ruleDeclaration_sort], $List[Tree[Mgu, Crsx_ruleDeclaration_sort]]]:: $List[Tree[Mgu, Crsx_ruleDeclaration_sort]]; 
MatchInsert[INCOMPARABLE, #r, #t, #ts, #acc]                → (#t; InsertInstance[#r, #ts, #acc]);
MatchInsert[RENAMING,     #r, #t, #ts, #acc]                → ErrorRenaming[#r, Root[#t]];

MatchInsert[AreParallel[#lhs1, #mgu, #lhs2], #r, #t, #ts, #acc] → ErrorParallelOverlap[#mgu, #r, Root[#t]];

MatchInsert[IsInstance[#lhs1, #mgu, #lhs2], #r, #t, #ts, #acc] →  (InsertInTree[#mgu, #r, #t]; #ts); 

MatchInsert[IsGeneralization[#lhs1, #mgu, #lhs2], #r, #t, (#t2;#ts), #acc] →  MatchInsert[ ComputeOverlap[Lhs[#r], Lhs[Root[#t2]]],
                                                                                     #r, #t2, #ts, (PairCons[#mgu,#t]; #acc)
                                                                                   ]; 


InsertInTree[Mgu, Crsx_ruleDeclaration_sort, Tree[Mgu, Crsx_ruleDeclaration_sort] ] :: Tree[Mgu, Crsx_ruleDeclaration_sort];
InsertInTree[ #mgu, #r, Leaf[#t]] →  Branch[#t, (PairCons[#mgu, Leaf[#r]];) ];
// based on mgu some optimization should be possible!
InsertInTree[ #mgu, #r, Branch[#t, #ts]] → Branch[ #t, SuccsHack[#r, #ts] ];

//SuccsHack[ #r,#ts ] → InsertInstance[#r, Map[ x.Snd[x], #ts] , ()];
*/


ErrorParallelOverlap[ Mgu, Crsx_ruleDeclaration_sort, Crsx_ruleDeclaration_sort ] :: $List[Pair[Mgu,Tree[Mgu, Crsx_ruleDeclaration_sort]]];
ErrorParallelOverlap[ #mgu, #r1, #r2] → 
Error[ ConcatString[ "I am very sorry to inform you, that two of your rules are ambiguous. \n",
       ConcatString[  Show[#r1], //TextToString[Crsx_Print_ruleDeclaration[#r1]],
       ConcatString[ "and \n",
       ConcatString[  Show[#r2], 
       ConcatString[ "\n with the term : \n",
                     Show[ApplySubst[ #mgu, Lhs[#r1]]]]]]]] 
     ]; 

ErrorRenaming[Crsx_ruleDeclaration_sort, Crsx_ruleDeclaration_sort ] :: $List[Pair[Mgu,Tree[Mgu, Crsx_ruleDeclaration_sort]]];
ErrorRenaming[ #r1, #r2] → 
Error[ ConcatString[ "I am very sorry to inform you, that two of your rules are only a renaming of each other. \n",
       ConcatString[  Show[#r1], 
       ConcatString[ "and \n",
                      Show[#r2]]]] 
     ]; 


)]