// Copyright (c) 2016 IBM Corporation.

import std::core
import std::listdef
import std::mapdef
import std::pairdef
import std::string
import std::language
import std::num

import systemdef
import core::Core
import core::utils

// -- API

/*
   Perform various analysis on the given `#module`

   More specifically:
   - Add @Fallback annotation on function sort with a fallback rule.
   - Add @Keep, @KeepAll and @Captured annotations on meta variables and variables
   - Add @Reuse annotation on binders.
 */
func AnalyzeM(#system: TSystem, #module: Module) -> Module
→ Debug(ConcatString("Analyze ", GetModuleURL(#module)),
         ()->SetModuleContent(#module, AnalyzeC(#system, GetModuleContent(#module))))

/* Module content analysis */
func AnalyzeC(TSystem, Content) -> Content
rule AnalyzeC(#system, Content(#imports, #rules, #datasorts, #alias, #funcsorts))
→ Content(#imports, AnalyzeRules(#system, #rules), #datasorts, #alias,
            FoldlP((name sorts) -> AnalyzeFallbackFunc(sorts, UnSOME(MapGet(#funcsorts, name)), HasFallback(MapGet(#rules, name))), #funcsorts, MapKeys(#funcsorts)))

// --- Fallback analysis

func AnalyzeFallbackFunc({String:Core_cdecl_sort}, Core_cdecl_sort, Bool) -> {String:Core_cdecl_sort}
rule AnalyzeFallbackFunc(#funcsorts, cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧, #fallback)
→ PutFuncSort(#funcsorts, cdecl⟦ ⟨canno*: AnalyzeFallbackAnno(#canno*, #fallback, HasAnnotation("Fallback", #canno*))⟩ ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧, TRUE)

func AnalyzeFallbackAnno(List<Core_canno_sort>, Bool /* Fallback */, Bool /* Has Fallback */) -> List<Core_canno_sort>
rule AnalyzeFallbackAnno(#anno*, TRUE, TRUE)   → #anno*
rule AnalyzeFallbackAnno(#anno*, TRUE, FALSE)  → AddAnnotation("Fallback", #anno*)
rule AnalyzeFallbackAnno(#anno*, FALSE, TRUE)  → Error("Invalid @Fallback annotation: function declaration does not have a fallback rule.")
rule AnalyzeFallbackAnno(#anno*, FALSE, FALSE) → #anno*

/* @return `TRUE` if at least one of the given rule is a fallback. */
func HasFallback(#orules: Option<List<Core_cdecl_sort>>) -> Bool
→ IfPresent(#orules,
    (rs) -> IsNotEmpty(Filter((rr)->IsFallbackRule(rr), rs)),
    () -> FALSE)

func IsFallbackRule(Core_cdecl_sort) -> Bool

  rule IsFallbackRule(cdecl⟦ rule ##cqconstructor ##csortargs? ##csortanno? → ##cterm ⟧)
  → TRUE

  rule IsFallbackRule(cdecl⟦ rule ##cqconstructor ##csortargs? ( ) ##csortanno? → ##cterm ⟧)
  → TRUE

  rule IsFallbackRule(cdecl⟦ rule ##cqconstructor ##csortargs? ( ##cterm* ) ##csortanno? → ##cterm ⟧ )
  → Not(HasOption(PickFirst(#cterm*, (term) -> Not(IsMeta(term)))))


// --- Lifetime analysis (bottom up tree traversal)

func AnalyzeRules(#system: TSystem, #rules: {String:List<Core_cdecl_sort>}) -> {String:List<Core_cdecl_sort>}
→ FoldlP((key rules)->MapPut(rules, key, Map((rule)->AnalyzeRule(#system, rule), UnSOME(MapGet(#rules, key)))), #rules, MapKeys(#rules))

func AnalyzeRule(TSystem, Core_cdecl_sort) -> Core_cdecl_sort
rule AnalyzeRule(#system, cdecl⟦ ##canno* rule ##cterm1 → ##cterm2 ⟧)
→ UnPair(AnalyzeVar(AnalyzePattern(LEnvNew(#system, {},{}), #cterm1), #cterm2), (env term)->cdecl⟦ ⟨canno*: AnalyzeRuleAnno(env, #canno*)⟩ rule ##cterm1 → ⟨cterm: term⟩ ⟧)

// -- Analyze rule pattern: record metavariable arguments and free variables.

func AnalyzePattern(LEnv, Core_cterm_sort) -> LEnv

  rule AnalyzePattern(#env, cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧)
  → AnalyzePatternTerms(#env, MaybeTermsToTerms(#cterms?))

  rule AnalyzePattern(#env, cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno?  ⟧)
  → LEnvSetMetaArgs(#env, #METAVAR, MaybeTermsToTerms(#cterms?), MaybeSubstToTerms(#csubst?))

  rule AnalyzePattern(#env, cterm⟦ ##canno* ##VARIABLE ##csortanno? ⟧)
  → let #entry = LEnvGetVar(#env, #VARIABLE)
      If(HasOption(#entry),
        ()->#env, // Bound variable or argument.
        ()->LEnvFree(#env, #VARIABLE))

  rule AnalyzePattern(#env, cterm⟦ ##canno* [ x : ##csort ] ##cterm[x] ⟧) // Check code gen for reuse x.
  → LEnvUnBind(AnalyzePattern(LEnvBind(#env, x), #cterm[x]), x)

  rule AnalyzePattern(#env, cterm⟦ ##canno* ( f : ##csort ) ##cterm[f] ⟧)
  → LEnvUnParam(AnalyzePattern(LEnvParam(#env, f), #cterm[f]), f)

  rule AnalyzePattern(#env, cterm⟦ ##canno* { ##cmapentries? } ##csortanno? ⟧)
  → AnalyzePatternMap(#env, MaybeMapEntriestToMapEntries(#cmapentries?))

  rule AnalyzePattern(#env, cterm⟦ ##canno* thunk ##cterm ⟧)
  → AnalyzePattern(#env, #cterm)

  rule AnalyzePattern(#env, cterm⟦ ##canno* ##METAVAR ##csortanno? = ##cterm ⟧)
  → AnalyzePattern(#env, #cterm)

  rule AnalyzePattern(#env, cterm⟦ ##canno* let ##METAVAR ##csortanno? = ##cterm ##cterm2 ⟧)
  →  Error("Internal Error: let expression cannot occur in pattern.")

  rule AnalyzePattern(#env, #cterm)
  → #env

func AnalyzePatternTerms(#env: LEnv, #terms: List<Core_cterm_sort>) -> LEnv
→ FoldlP((term env)->AnalyzePattern(env, term), #env, #terms)

func AnalyzePatternMap(#env: LEnv, #entries: List<Core_cmapentry_sort>) -> LEnv
→ FoldlP((entry env)->AnalyzePatternEntry(env, entry), #env, #entries)

// Note: free variables in map pattern must be declared somewhere else, so no need to record them here.
func AnalyzePatternEntry(LEnv, Core_cmapentry_sort) -> LEnv
rule AnalyzePatternEntry(#env, cmapentry⟦ ##METAVAR : ##cterm  ⟧) → AnalyzePattern(#env, #cterm)
rule AnalyzePatternEntry(#env, cmapentry⟦ ##VARIABLE : ##cterm ⟧) → AnalyzePattern(#env, #cterm)
rule AnalyzePatternEntry(#env, cmapentry⟦ ##STRING : ##cterm   ⟧) → AnalyzePattern(#env, #cterm)
rule AnalyzePatternEntry(#env, #cmapentry                      ) → #env

// -- Analyze rule contraction: annotate metavariable and variables and record their use in the environment

func AnalyzeVar(LEnv, Core_cterm_sort) -> PPair<LEnv Core_cterm_sort>

  rule AnalyzeVar(#env, cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧)
  → UnPair(AnalyzeVarMaybeTerms(#env, #cterms?), (env terms)->
    PairCons(env, cterm⟦ ##canno* ##cqconstructor ##csortargs? ⟨cterms?: terms⟩ ##csortanno? ⟧))

  rule AnalyzeVar(#env, cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno? ⟧)
  → AnalyzeVarMeta(#canno*, #METAVAR, #cterms?, AnalyzeVarMaybeSubst(#env, #METAVAR, #csubst?), #csortanno?)
// Eclipse does not like this:
  /*→ UnPair(AnalyzeVarMaybeSubst(#env, #csubst?), (env substs)->
      UnPair(AnalyzeVarMaybeTerms(env, #cterms?), (env terms)->
        PairCons(env, cterm⟦ ⟨canno*: AnalyzeMayKeep(LEnvGetMetaCount(env, #METAVAR), #canno*)⟩ ##METAVAR ⟨cterms?: terms⟩ ⟨csubst?: substs⟩ : ##csort ⟧)))*/

  rule AnalyzeVar(#env, cterm⟦ ##canno* ##VARIABLE ##csortanno? ⟧)
  → let #entry = LEnvGetVar(#env, #VARIABLE)
      AnalyzeVarVar(#entry, #env, #canno*, #VARIABLE, #csortanno?)

  rule AnalyzeVar(#env, cterm⟦ ##canno* [ x : ##csort ] ##cterm[x] ⟧)
  → AnalyzeVarBound(#canno*, [x]->PairCons(x, AnalyzeVar(LEnvBind(#env, x), #cterm[x])), #csort)

  rule AnalyzeVar(#env, cterm⟦ ##canno* ( f : ##csort ) ##cterm[f] ⟧)
  → AnalyzeVarFormal(#env, cterm⟦ ⟨canno*: AnalyzeMayReuseLambda(#env, #cterm[f], (f,), #canno*)⟩ ( f : ##csort ) ##cterm[f] ⟧, ())

  rule AnalyzeVar(#env, cterm⟦ ##canno* thunk ##cterm ⟧)
  → IfConfigDef(LEnvSystem(#env), "cpp",
      (v)->AnalyzeVarThunkNoLambda(#canno*, AnalyzeVar(#env, #cterm)),
      ( )->AnalyzeVarThunkLambda(#env, #canno*, AnalyzeVar(LEnvNew(LEnvSystem(#env), LEnvFreeVars(#env), LEnvArgs(#env)), #cterm)))

  rule AnalyzeVar(#env, cterm⟦ ##canno* let ##METAVAR ##csortanno? = ##cterm ##cterm2 ⟧)
  → AnalyzeVarLet(#canno*, #METAVAR, #csortanno?, #cterm, AnalyzeVar(LEnvRemoveMeta(#env, #METAVAR), #cterm2), LEnvGetMetaCount(#env, #METAVAR))

  rule AnalyzeVar(#env, cterm⟦ ##canno* { ##cmapentries? } ##csortanno? ⟧)
  → Error("Internal Error: Map cannot occur in contraction. See normalizer.")

  rule AnalyzeVar(#env, cterm⟦ ##canno* ##METAVAR ##csortanno? = ##cterm ⟧)
  → Error("Internal Error: Named terms cannot occur in contraction")

  rule AnalyzeVar(#env, #cterm) → PairCons(#env, #cterm)

func AnalyzeVarMaybeTerms(LEnv, List<Core_cterms_sort>) -> PPair<LEnv List<Core_cterms_sort>>

  rule AnalyzeVarMaybeTerms(#env, cterms?⟦ ( ##cterm* ) ⟧)
  → UnPair(AnalyzeVarTerms(#env, #cterm*), (env terms)->PairCons(env, cterms?⟦ ( ⟨cterm*: terms⟩ ) ⟧))

  rule AnalyzeVarMaybeTerms(#env, #cterms?)
  → PairCons(#env, #cterms?)

func AnalyzeVarTerms(LEnv, List<Core_cterm_sort>) -> PPair<LEnv List<Core_cterm_sort>>

  rule AnalyzeVarTerms(#env, cterm*⟦ ##cterm ##cterm* ⟧)
  → AnalyzeVarTerms2(#cterm, AnalyzeVarTerms(#env, #cterm*))

  // Eclise does not like this
  /*→ UnPair(AnalyzeVarTerms(#env, #cterm*), (env terms)->
      UnPair(AnalyzeVar(env, #cterm), (env term)->
        PairCons(env, cterm*⟦ ⟨cterm: term⟩ ⟨cterm*: terms⟩ ⟧)))*/

  rule AnalyzeVarTerms(#env, #cterm*)
  → PairCons(#env, #cterm*)

func AnalyzeVarTerms2(Core_cterm_sort, PPair<LEnv List<Core_cterm_sort>>) -> PPair<LEnv List<Core_cterm_sort>>
rule AnalyzeVarTerms2(#cterm, PairCons(#env, #cterm*))
→ UnPair(AnalyzeVar(#env, #cterm), (env term)->PairCons(env, cterm*⟦ ⟨cterm: term⟩ ##cterm* ⟧))

func AnalyzeVarMaybeSubst(LEnv, String, List<Core_csubst_sort>) -> PPair<LEnv List<Core_csubst_sort>>

  rule AnalyzeVarMaybeSubst(#env, #metavar, csubst?⟦ [ ##cterm* ] ⟧)
  → UnPair(AnalyzeMetaArgsReuse(#metavar, AnalyzeVarTerms(#env, #cterm*)), (env terms)->PairCons(env, csubst?⟦ [ ⟨cterm*: terms⟩ ] ⟧))

  rule AnalyzeVarMaybeSubst(#env, #metavar, #csubst?)
  → PairCons(#env, #csubst?)

func AnalyzeVarMeta(List<Core_canno_sort>, String, List<Core_cterms_sort>, PPair<LEnv List<Core_csubst_sort>>, List<Core_csortanno_sort>) -> PPair<LEnv Core_cterm_sort>
rule AnalyzeVarMeta(#canno*, #METAVAR, #cterms?, PairCons(#env, #csubst?), #csortanno)
→ AnalyzeVarMeta2(AnalyzeMayNoSubst(MaybeSubstToTerms(#csubst?), #canno*), #METAVAR, AnalyzeVarMaybeTerms(#env, #cterms?), #csubst?, #csortanno)

func AnalyzeVarMeta2(List<Core_canno_sort>, String, PPair<LEnv List<Core_cterms_sort>>, List<Core_csubst_sort>, List<Core_csortanno_sort>) -> PPair<LEnv Core_cterm_sort>
rule AnalyzeVarMeta2(#canno*, #METAVAR, PairCons(#env, #cterms?), #csubst?, #csortanno?)
→ PairCons(LEnvIncMetaCount(#env, #METAVAR), cterm⟦ ⟨canno*: AnalyzeMayKeep(LEnvGetMetaCount(#env, #METAVAR), #canno*)⟩ ##METAVAR ##cterms? ##csubst? ##csortanno? ⟧)

// Analyze variable in contraction
func AnalyzeVarVar(Option<LEnvVarEntry>, LEnv, List<Core_canno_sort>, String, List<Core_csortanno_sort>) -> PPair<LEnv Core_cterm_sort>

  // No entry => this is a fresh variable. Declare it as such
  rule AnalyzeVarVar(NONE, #env, #canno*, #VARIABLE, #csortanno?)
  → AnalyzeVarVar(SOME(LFRESH(NONE)), LEnvFresh(#env, #VARIABLE), #canno*, #VARIABLE, #csortanno?)

  // Fresh variable with reuse annotation => Propagate it.
  rule AnalyzeVarVar(SOME(LFRESH(SOME(#canno))), #env, #canno*, #VARIABLE, #csortanno?)
  → AnalyzeVarVarDone(#env, canno*⟦ ##canno ##canno* ⟧, #VARIABLE, #csortanno?)

  rule AnalyzeVarVar(#entry, #env, #canno*, #VARIABLE, #csortanno)
  → AnalyzeVarVarDone(#env, #canno*, #VARIABLE, #csortanno)

func AnalyzeVarVarDone(#env: LEnv, #canno*: List<Core_canno_sort>, #VARIABLE: String, #csortanno?: List<Core_csortanno_sort>) -> PPair<LEnv Core_cterm_sort>
→ PairCons(LEnvIncVarCount(#env, #VARIABLE), cterm⟦ ⟨canno*: AnalyzeMayKeep(LEnvGetVarCount(#env, #VARIABLE), #canno*)⟩ ##VARIABLE ##csortanno? ⟧)

func AnalyzeVarBound(List<Core_canno_sort>, [String]->PPair<String PPair<LEnv Core_cterm_sort>>, Core_csort_sort) -> PPair<LEnv Core_cterm_sort>
rule AnalyzeVarBound(#canno*, [x]->PairCons(#x, PairCons(#env, #cterm[x])), #csort)
→ PairCons(LEnvUnBind(#env, #x), cterm⟦ ⟨canno*: AnalyzeMayReuseBound(LEnvGetVar(#env, #x), #canno*)⟩ [ x : ##csort ] ##cterm[x] ⟧)

/*
   Skip formal parameters and then analyze the lambda expression

   The analysis performs depends on whether the target language support native lambda or not.
   For native lambda support, the analysis computes captured terms and their corresponding lifetime. A new fresh environment is used.
     and consolidated and the way up.
*/
func AnalyzeVarFormal(LEnv, Core_cterm_sort, List<String>) -> PPair<LEnv Core_cterm_sort>

  rule AnalyzeVarFormal(#env, cterm⟦ ##canno* ( f : ##csort ) ##cterm[f] ⟧, #params)
  → AnalyzeVarFormalUp(#canno*, [f]->PairCons(f, AnalyzeVarFormal(#env, #cterm[f], (f, #params...))), #csort)

  rule AnalyzeVarFormal(#env, #cterm, #params)
  → IfConfigDef(LEnvSystem(#env), "cpp",
      (v)->AnalyzeVar(#env, #cterm),
      ( )->AnalyzeVarFormalUpLambda(#env, AnalyzeVar(LEnvNew(LEnvSystem(#env), LEnvFreeVars(#env), LEnvArgs(#env)), #cterm), #params))

func AnalyzeVarFormalUp(List<Core_canno_sort>, [String]->PPair<String PPair<LEnv Core_cterm_sort>>, Core_csort_sort) -> PPair<LEnv Core_cterm_sort>
rule AnalyzeVarFormalUp(#canno*, [f]->PairCons(#f, PairCons(#env, #cterm[f])), #csort)
→ PairCons(LEnvUnParam(#env, #f), cterm⟦ ##canno* ( f : ##csort ) ##cterm[f] ⟧)

func AnalyzeVarFormalUpLambda(LEnv, PPair<LEnv Core_cterm_sort>, List<String>) -> PPair<LEnv Core_cterm_sort>
rule AnalyzeVarFormalUpLambda(#env, PairCons(#ienv, #cterm), #params)
→ PairCons(LEnvMoveFreeVars(AnalyzeCaptured(#env, #ienv, #params), #ienv), AnnotateTerm(#cterm, AnalyzeCapturedAll(#env, LEnvMetaKeys(#ienv), LEnvVarKeys(#ienv), ())))

// Same as formal: only compute captured terms when using native lambda.
func AnalyzeVarThunkLambda(LEnv, List<Core_canno_sort>, PPair<LEnv Core_cterm_sort>) -> PPair<LEnv Core_cterm_sort>
rule AnalyzeVarThunkLambda(#env, #canno*, PairCons(#ienv, #cterm))
→ PairCons(LEnvMoveFreeVars(AnalyzeCaptured(#env, #ienv, ()), #ienv), cterm⟦ thunk ⟨cterm: AnnotateTerm(#cterm, AnalyzeCapturedAll(#env, LEnvMetaKeys(#ienv), LEnvVarKeys(#ienv), #canno*))⟩ ⟧)

func AnalyzeVarThunkNoLambda(List<Core_canno_sort>, PPair<LEnv Core_cterm_sort>) -> PPair<LEnv Core_cterm_sort>
rule AnalyzeVarThunkNoLambda(#canno*, PairCons(#env, #cterm))
→ PairCons(#env, cterm⟦ ##canno* thunk ##cterm ⟧)

func AnalyzeVarLet(List<Core_canno_sort>, String, List<Core_csortanno_sort>, Core_cterm_sort, PPair<LEnv Core_cterm_sort>, Option<Numeric>) -> PPair<LEnv Core_cterm_sort>
rule AnalyzeVarLet(#canno*, #METAVAR, #csortanno?, #cterm, PairCons(#env, #cterm2), #shadowed)
→ If(HasOption(LEnvGetMetaCount(#env, #METAVAR)), // Check let variable is used.
    ()->AnalyzeVarLet2(#canno*, #METAVAR, #csortanno?, AnalyzeVar(LEnvSetMetaCountO(#env, #METAVAR, #shadowed), #cterm), #cterm2),
    ()->AnalyzeVar(#env, #cterm))

func AnalyzeVarLet2(List<Core_canno_sort>, String, List<Core_csortanno_sort>, PPair<LEnv Core_cterm_sort>, Core_cterm_sort) -> PPair<LEnv Core_cterm_sort>
rule AnalyzeVarLet2(#canno*, #METAVAR, #csortanno?, PairCons(#env, #cterm), #cterm2)
→ PairCons(#env, cterm⟦ ##canno* let ##METAVAR ##csortanno? = ##cterm ##cterm2 ⟧)

// Add @Keep annotation only when a metavariable or variable occurs more than once.
func AnalyzeMayKeep(Option<Numeric>, List<Core_canno_sort>) -> List<Core_canno_sort>

  rule AnalyzeMayKeep(NONE, #canno*)
  → #canno*

  rule AnalyzeMayKeep(SOME(#count), #canno*)
  → If(GreaterThanOrEqual(#count, 1),
      ()->canno*⟦ @Keep ##canno* ⟧,
      ()->#canno*)

// Add @Captured(#...) annotation for meta-variables and variables occuring inside a lambda (and thunk)
func AnalyzeCapturedAll(LEnv, List<String>, List<String>, List<Core_canno_sort>) -> List<Core_canno_sort>

  rule AnalyzeCapturedAll(#env, (), (), #canno*)
  → #canno*

  rule AnalyzeCapturedAll(#env, #metas, #vars, #canno*)
  → canno*⟦ @Captured( ⟨cterm*: Concat(AnalyzeCapturedAllVar(#env, #vars), AnalyzeCapturedAllMeta(#env, #metas)) ⟩ ) ##canno* ⟧

func AnalyzeCapturedAllMeta(#env: LEnv, #metas: List<String>) -> List<Core_cterm_sort>
→ Map((meta)->cterm⟦ ⟨canno*: AnalyzeMayKeep(LEnvGetMetaCount(#env, meta), ())⟩ ⟨METAVAR: meta⟩ ⟧, #metas)

func AnalyzeCapturedAllVar(#env: LEnv, #vars: List<String>) -> List<Core_cterm_sort>
→ Map((var)->AnalyzeCapturedAllVar2(AnalyzeMayKeep(LEnvGetVarCount(#env, var), ()), var), #vars)
//→ Map((var)->cterm⟦ ⟨canno*: AnalyzeMayKeep(LEnvGetVarCount(#env, var), ())⟩ ⟨cvariable: var⟩ ⟧, #vars)

// TODO: inline Bug probably in the Tosca sort inference
// TODO: should not capture formal parameters.
func AnalyzeCapturedAllVar2(#canno*: List<Core_canno_sort>, #VARIABLE: String) -> Core_cterm_sort
→ cterm⟦ ##canno* ##VARIABLE ⟧

// Update environment to account for captured metavars and free variables in `#ienv`
// Skip parameters as they go out of scope.
func AnalyzeCaptured(#env: LEnv, #ienv: LEnv, #params: List<String>) -> LEnv
→ FoldlP((meta env)->LEnvIncMetaCount(env, meta),
         FoldlP((var env)->If(HasOption(PickFirst(#params, (param)->Equal(param, var))),
                      ()->env,
                      ()->LEnvIncVarCount(env, var)),
                #env, LEnvVarKeys(#ienv)),
         LEnvMetaKeys(#ienv))

// Annotate rule with metavariables used in the contraction.
// Don't include free variables, as reference counting is handled differently
func AnalyzeRuleAnno(#env: LEnv, #canno*: List<Core_canno_sort>) -> List<Core_canno_sort>
→ AnalyzeKeepAll(Map((meta)->cterm⟦ ⟨METAVAR: meta⟩ ⟧, LEnvMetaKeys(#env)), #canno*)

// Add @KeepAll(#...) annotation for metavariables and variables occuring more than once.
func AnalyzeKeepAll(List<Core_cterm_sort>, List<Core_canno_sort>) -> List<Core_canno_sort>
rule AnalyzeKeepAll(cterm*⟦⟧, #canno*) → #canno*
rule AnalyzeKeepAll(#cterm*, #canno*) → canno*⟦ @KeepAll( ##cterm* ) ##canno* ⟧

// Add @NoLambda annotation when the given `#lambda` expression is not fully or partially evaluated
func AnalyzeMayReuseLambda(LEnv, Core_cterm_sort, List<String>, List<Core_canno_sort>) -> List<Core_canno_sort>

  rule AnalyzeMayReuseLambda(#env, cterm⟦ ##canno* ( f : ##csort ) ##cterm[f] ⟧, #params, #canno*)
  → AnalyzeMayReuseLambda(#env, #cterm[f], Append(f, #params), #canno*)

  rule AnalyzeMayReuseLambda(#env, cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? ##csortanno? ⟧, #params, #canno*)
  → let #patternParams = LEnvGetMetaParams(#env, #METAVAR)
    let #args = MaybeTermsToTerms(#cterms?)
      AnalyzeMayReuseLambdaArity(NumberEqual(ListLength(#patternParams), ListLength(#params)), #params, #args, #canno*)

  rule AnalyzeMayReuseLambda(#env, #cterm, #params, #canno*)
  → #canno*

func AnalyzeMayReuseLambdaArity(Bool, List<String>, List<Core_cterm_sort>, List<Core_canno_sort>) -> List<Core_canno_sort>

  rule AnalyzeMayReuseLambdaArity(TRUE, #params, #args, #canno*)
  → If(CheckSameVariables(#params, #args),
      ()->canno*⟦ @NoLambda ##canno* ⟧,
      ()->#canno*)

  rule AnalyzeMayReuseLambdaArity(FALSE, #params, #args, #canno*)
  → #canno*

// -- Meta-application binder reuse analysis

/* If all arguments are bound or fresh variables and none of the binders have been reused, then reuse them... */
func AnalyzeMetaArgsReuse(String, PPair<LEnv List<Core_cterm_sort>>) -> PPair<LEnv List<Core_cterm_sort>>
rule AnalyzeMetaArgsReuse(#metavar, PairCons(#env, #terms))
→ If(And(AnalyzeAllBoundOrFresh(#env, #terms), Not(LEnvIsReused(#env, #metavar))),
    ()->AnalyzeReuseArgs(LEnvReuse(#env, #metavar), #metavar, #terms, (), 0),
    ()->PairCons(#env, #terms))

/*  */
func AnalyzeReuseArgs(LEnv, String, List<Core_cterm_sort>, List<Core_cterm_sort>, Numeric) -> PPair<LEnv List<Core_cterm_sort>>

  // TODO: rewrite for better performance. (no Append)
  rule AnalyzeReuseArgs(#env, #METAVAR, cterm*⟦ ##canno* ##VARIABLE ##csortanno? ##cterm* ⟧, #cterm*2, #index)
  → let #canno = canno⟦ @Reuse(##METAVAR, ⟨NUMBER: FormatInteger(#index)⟩) ⟧
      AnalyzeReuseArgs(LEnvReuseVar(#env, #VARIABLE, #canno), #METAVAR, #cterm*,
                        Append(cterm⟦ ##canno ##canno* ##VARIABLE ##csortanno? ⟧, #cterm*2), Plus(#index, 1))

  rule AnalyzeReuseArgs(#env, #METAVAR, #cterm*, #cterm*2, #index)
  → PairCons(#env, #cterm*2)

/* Tell whether all the given `#terms` are bound and fresh varaibles */
func AnalyzeAllBoundOrFresh(LEnv, List<Core_cterm_sort>) -> Bool

  rule AnalyzeAllBoundOrFresh(#env, cterm*⟦⟧)
  → TRUE

  rule AnalyzeAllBoundOrFresh(#env, cterm*⟦ ##canno* ##VARIABLE ##csortanno? ##cterm* ⟧)
  → AnalyzeAllBoundOrFreshVar(#env, LEnvGetVar(#env, #VARIABLE), #cterm*)

  rule AnalyzeAllBoundOrFresh(#env, #cterm*)
  → FALSE

func AnalyzeAllBoundOrFreshVar(LEnv, Option<LEnvVarEntry>, List<Core_cterm_sort>) -> Bool
rule AnalyzeAllBoundOrFreshVar(#env, SOME(LFRESH(#reused)), #cterm*) → AnalyzeAllBoundOrFresh(#env, #cterm*)
rule AnalyzeAllBoundOrFreshVar(#env, SOME(LBOUND(#reused)), #cterm*) → AnalyzeAllBoundOrFresh(#env, #cterm*)
rule AnalyzeAllBoundOrFreshVar(#env, SOME(#), #cterm*)               → FALSE
rule AnalyzeAllBoundOrFreshVar(#env, NONE, #cterm*)                  → Error("Internal Error: undeclared variable")

/* Add @NoSubst annotation if all arguments are reused */
func AnalyzeMayNoSubst(List<Core_cterm_sort>, List<Core_canno_sort>) ->  List<Core_canno_sort>

  rule AnalyzeMayNoSubst(cterm*⟦ ##canno* ##VARIABLE ##csortanno? ##cterm* ⟧, #canno*2)
  → If(HasAnnotation("Reuse", #canno*),
      ()->AnalyzeMayNoSubst(#cterm*, #canno*2),
      ()->#canno*2)

  rule AnalyzeMayNoSubst(cterm*⟦⟧, #canno*)
  → canno*⟦ @NoSubst ##canno* ⟧

  rule AnalyzeMayNoSubst(#cterm*, #canno*)
  → #canno*

/* Propagate @Reuse annoation to binder */
func AnalyzeMayReuseBound(Option<LEnvVarEntry>, List<Core_canno_sort>) -> List<Core_canno_sort>
rule AnalyzeMayReuseBound(SOME(LBOUND(SOME(#canno))), #canno*) → canno*⟦ ##canno ##canno* ⟧
rule AnalyzeMayReuseBound(#entry                    , #canno*) → #canno*

// --- Meta-variable and variables lifetime analysis environment

type LArguments = PPair<List<Core_cterm_sort> List<Core_cterm_sort>>

enum LEnvVarEntry | LFREE | LBOUND(Option<Core_canno_sort>) | LFORMAL | LFRESH(Option<Core_canno_sort>)

enum LEnv | LEnv(TSystem,
                 {String:Numeric},      // meta-variable name associated to the number of times they are being used
                 {String:Numeric},      // variable name associated to the number of times they are being used.
                 {String:LArguments},   // Meta-variable parameters and bound variables (in pattern)
                 {String:Bool},         // Indicate whether all binders have been used for the associated meta-variable
                 {String:LEnvVarEntry}, // In-scope variables, excluding free and fresh
                 {String:LEnvVarEntry}) // Free and fresh variable

/* Create new environment */
func LEnvNew(#system: TSystem, #fvars: {String:LEnvVarEntry}, #args: {String:LArguments}) -> LEnv → LEnv(#system, {},{},#args,{},{}, #fvars)

// -- system

func LEnvSystem(LEnv) -> TSystem
rule LEnvSystem(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars)) → #system

// -- meta variable count

func LEnvMetas(LEnv) -> {String:Numeric}
rule LEnvMetas(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars)) → #metas

func LEnvMetaKeys(LEnv) -> List<String>
rule LEnvMetaKeys(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars)) → MapKeys(#metas)

func LEnvGetMetaCount(#env: LEnv, #metavar: String) -> Option<Numeric>
→ MapGet(LEnvMetas(#env), #metavar)

func LEnvSetMetaCountO(LEnv, String, Option<Numeric>) -> LEnv

  rule LEnvSetMetaCountO(#env, #metavar, NONE)
  → LEnvRemoveMeta(#env, #metavar)

  rule LEnvSetMetaCountO(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars), #metavar, SOME(#count))
  → let #nmetas = MapRemove(#metas, #metavar)
      LEnv(#system, MapPut(#nmetas, #metavar, #count), #vars, #args, #reused, #inscope, #fvars)

func LEnvIncMetaCount(#env: LEnv, #metavar: String) -> LEnv
→ LEnv(LEnvSystem(#env), MapPut(LEnvMetas(#env), #metavar, IfPresent(LEnvGetMetaCount(#env, #metavar), (count)->Plus(count, 1), ()->1)), LEnvVars(#env),
         LEnvArgs(#env), LEnvReused(#env), LEnvBoundVar(#env), LEnvFreeVars(#env))

func LEnvRemoveMeta(LEnv, String) -> LEnv
rule LEnvRemoveMeta(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars), #metavar: String)
→ LEnv(#system, MapRemove(#metas, #metavar), #vars, #args, #reused, #inscope, #fvars)

// -- variable count

func LEnvVars(LEnv) -> {String:Numeric}
rule LEnvVars(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars)) → #vars

func LEnvVarKeys(LEnv) ->  List<String>
rule LEnvVarKeys(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars)) → MapKeys(#vars)

func LEnvGetVarCount(#env: LEnv, #var: String) -> Option<Numeric>
→ MapGet(LEnvVars(#env), #var)

func LEnvIncVarCount(#env: LEnv, #var: String) -> LEnv
→ LEnv(LEnvSystem(#env), LEnvMetas(#env), MapPut(LEnvVars(#env), #var, IfPresent(LEnvGetVarCount(#env, #var), (count)->Plus(count, 1), ()->1)),
        LEnvArgs(#env), LEnvReused(#env), LEnvBoundVar(#env), LEnvFreeVars(#env))

// -- meta-variable arguments

// TODO: can't use alias due to issue #33
func LEnvArgs(LEnv) -> {String:PPair<List<Core_cterm_sort> List<Core_cterm_sort>>}
rule LEnvArgs(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars)) → #args

func LEnvSetMetaArgs(#env: LEnv, #metavar: String, #params: List<Core_cterm_sort>, #bounds: List<Core_cterm_sort>) -> LEnv
→ LEnv(LEnvSystem(#env), LEnvMetas(#env), LEnvVars(#env), MapPut(LEnvArgs(#env), #metavar, PairCons(#params, #bounds)), LEnvReused(#env),
         LEnvBoundVar(#env), LEnvFreeVars(#env))

func LEnvGetMetaParams(#env: LEnv, #metavar:String) -> List<Core_cterm_sort>
→ IfPresent(MapGet(LEnvArgs(#env), #metavar), (args)->Fst(args), ()->())

// -- meta-variable reuse flag

func LEnvReused(LEnv) -> {String:Bool}
rule LEnvReused(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars)) → #reused

func LEnvIsReused(#env: LEnv, #metavar:String) -> Bool
→ IfPresent(MapGet(LEnvReused(#env), #metavar), (bool)->bool, ()->FALSE)

func LEnvReuse(#env: LEnv, #metavar:String) -> LEnv
→ LEnv(LEnvSystem(#env), LEnvMetas(#env), LEnvVars(#env), LEnvArgs(#env), MapPut(LEnvReused(#env), #metavar, TRUE), LEnvBoundVar(#env), LEnvFreeVars(#env))

// -- Bound variables (scoped and formal parameter)

func LEnvBoundVar(LEnv) -> {String:LEnvVarEntry}
rule LEnvBoundVar(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars)) → #inscope

func LEnvAddBoundVar(LEnv, String, LEnvVarEntry) -> LEnv
rule LEnvAddBoundVar(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars), #var, #entry)
→ LEnv(#system, #metas, #vars, #args, #reused, MapPut(#inscope, #var, #entry), #fvars)

func LEnvRemoveBoundVar(LEnv, String) -> LEnv
rule LEnvRemoveBoundVar(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars), #var)
→ LEnv(#system, #metas, #vars, #args, #reused, MapRemove(#inscope, #var), #fvars)

func LEnvBind(#env: LEnv, #var: String) -> LEnv
→ LEnvAddBoundVar(#env, #var, LBOUND(NONE))

func LEnvUnBind(#env: LEnv, #var: String) -> LEnv
→ LEnvRemoveBoundVar(#env, #var)

func LEnvParam(#env: LEnv, #var: String) -> LEnv
→ LEnvAddBoundVar(#env, #var, LFORMAL)

func LEnvUnParam(#env: LEnv, #var: String) -> LEnv
→ LEnvRemoveBoundVar(#env, #var)

// -- Free variables

func LEnvFreeVars(LEnv) -> {String:LEnvVarEntry}
rule LEnvFreeVars(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars)) → #fvars

func LEnvAddFreeVar(LEnv, String, LEnvVarEntry) -> LEnv
rule LEnvAddFreeVar(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars), #var, #entry)
→ LEnv(#system, #metas, #vars, #args, #reused, #inscope, MapPut(#fvars, #var, #entry))

func LEnvFree(#env: LEnv, #var: String) -> LEnv
→ LEnvAddFreeVar(#env, #var, LFREE)

func LEnvFresh(#env: LEnv, #var: String) -> LEnv
→ LEnvAddFreeVar(#env, #var, LFRESH(NONE))

func LEnvMoveFreeVars(LEnv /* to */, LEnv /* from */) -> LEnv
rule LEnvMoveFreeVars(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars), LEnv(#system2, #metas2, #vars2, #args2, #reused2, #inscope2, #fvars2))
→ LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars2)

// -- Bound or free variables helper functions

// Get variable, either in-scope or free/fresh
func LEnvGetVar(#env: LEnv, #var: String) -> Option<LEnvVarEntry>
→ IfPresent(MapGet(LEnvBoundVar(#env), #var),
    (entry)->SOME(entry),
    ()->MapGet(LEnvFreeVars(#env), #var))

func LEnvReuseVar(LEnv, String, Core_canno_sort) -> LEnv
rule LEnvReuseVar(LEnv(#system, #metas, #vars, #args, #reused, #inscope, #fvars), #var, #canno)
→ let #entry = MapGet(#inscope, #var)
    IfPresent(#entry,
      (entry)->LEnv(#system, #metas, #vars, #args, #reused, LEnvReuseBound(MapRemove(#inscope, #var), #var, entry, #canno), #fvars),
      ()->LEnv(#system, #metas, #vars, #args, #reused, #inscope, LEnvReuseFree(MapRemove(#fvars, #var), #var, MapGet(#fvars, #var), #canno)))

func LEnvReuseBound({String:LEnvVarEntry}, String, LEnvVarEntry, Core_canno_sort) -> {String:LEnvVarEntry}
rule LEnvReuseBound(#inscope, #var, LBOUND(#), #canno) → {#inscope, #var: LBOUND(SOME(#canno))}
rule LEnvReuseBound(#inscope, #var, #        , #canno) → Error("Internal Error: cannot reuse a free variable or argument.")

func LEnvReuseFree({String:LEnvVarEntry}, String, Option<LEnvVarEntry>, Core_canno_sort) -> {String:LEnvVarEntry}
rule LEnvReuseFree(#fvars, #var, SOME(LFRESH(#)), #canno) → {#fvars, #var: LFRESH(SOME(#canno))}
rule LEnvReuseFree(#fvars, #var, #              , #canno) → Error("Internal Error: cannot reuse a free variable or argument.")
