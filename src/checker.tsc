// Copyright (c) 2016 IBM Corporation.

import std::core
import std::listdef
import std::mapdef

import systemdef
import core::Core
import core::utils

/* Analysis module */
func CheckCoreM(#system: TSystem, #module: Module) -> Module
→ SetModuleContent(#module, CheckFallback(GetModuleContent(#module)))

/*
 * Analysis module content and add missing @Fallback annotation
 */
func CheckFallback(Content) -> Content
rule CheckFallback(Content(#imports, #rules, #datasorts, #alias, #funcsorts))
→ Content(#imports, #rules, #datasorts, #alias,
           FoldlP((name sorts) -> CheckFallbackFunc(sorts, UnSOME(MapGet(#funcsorts, name)),
                    HasFallback(MapGet(#rules, name))), #funcsorts, MapKeys(#funcsorts)))

func CheckFallbackFunc(#funcsorts: {String:Core_cdecl_sort},  #sort: Core_cdecl_sort, #fallback: Bool) -> {String:Core_cdecl_sort}
rule CheckFallbackFunc(#funcsorts,
                        cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧, #fallback)
→ PutFuncSort(#funcsorts, cdecl⟦ ⟨canno*: CheckFallbackAnno(#canno*, #fallback, HasAnnotation("Fallback", #canno*))⟩ ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧, TRUE)

func CheckFallbackAnno(List<Core_canno_sort>, Bool /* Fallback */, Bool /* Has Fallback */) -> List<Core_canno_sort>
rule CheckFallbackAnno(#anno*, TRUE, TRUE)   → #anno*
rule CheckFallbackAnno(#anno*, TRUE, FALSE)  → AddAnnotation("Fallback", #anno*)
rule CheckFallbackAnno(#anno*, FALSE, TRUE)  → Error("Invalid @Fallback annotation: function declaration does not have a fallback rule.")
rule CheckFallbackAnno(#anno*, FALSE, FALSE) → #anno*

func HasFallback(#orules: Option<List<Core_cdecl_sort>>) -> Bool
→ IfPresent(#orules,
    (rs) -> IsNotEmpty(Filter((rr)->IsFallbackRule(rr), rs)),
    () -> FALSE)

func IsFallbackRule(Core_cdecl_sort) -> Bool

  rule IsFallbackRule(cdecl⟦ rule ##cqconstructor ##csortargs? ##csortanno? → ##cterm ⟧)
  → TRUE

  rule IsFallbackRule(cdecl⟦ rule ##cqconstructor ##csortargs? ( ) ##csortanno? → ##cterm ⟧)
  → TRUE

  rule IsFallbackRule(cdecl⟦ rule ##cqconstructor ##csortargs? ( ##cterm* ) ##csortanno? → ##cterm ⟧ )
  → Not(HasOption(PickFirst(#cterm*, (term) -> Not(IsMeta(term)))))
