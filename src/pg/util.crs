/*
 * Copyright (c) 2015 IBM Corporation.
 *
 * Various utility rules for PG
 *
 */

Util[(

// ---- imports


$Use["std/core.crs"];
$Use["std/list.crs"];

$Lax;

// ---- Rule index

{$String: ANTLR_ruleSpec_sort}RuleIndex ::= ( RULEINDEX; );

IndexGrammar[ANTLR_grammarSpec_sort] :: RuleIndex;
IndexGrammar[{#L}%grammarSpec⟦ #DOC_COMMENT? #grammarType #id ; #prequelConstruct* #ruleSpec* #modeSpec* ⟧]
→ IndexRules[#ruleSpec*];

IndexRules[$List[ANTLR_ruleSpec_sort]] :: RuleIndex;
IndexRules[#ruleSpec*] → IndexRules2[#ruleSpec*, {}RULEINDEX];

IndexRules2[$List[ANTLR_ruleSpec_sort], RuleIndex] :: RuleIndex;

IndexRules2[{#L}%ruleSpec*⟦ ⟧, #Index] 
→ #Index; 

IndexRules2[{#L}%ruleSpec*⟦ #DOC_COMMENT? #ruleModifiers? #RULE_REF #ARG_ACTION? #ruleReturns? #throwsSpec? #localsSpec? 
                           #rulePrequel* : #ruleAltList ; #exceptionHandler* #finallyClause? #ruleSpec* ⟧, {#I}#Index]
→ IndexRules2[#ruleSpec*, {#I; #RULE_REF : %ruleSpec⟦ #DOC_COMMENT? #ruleModifiers? #RULE_REF #ARG_ACTION? #ruleReturns? #throwsSpec? #localsSpec? 
                           #rulePrequel* : #ruleAltList ; #exceptionHandler* #finallyClause? ⟧}#Index];

IndexRules2[{#L}%ruleSpec*⟦ #DOC_COMMENT? #FRAGMENT? #TOKEN_REF : #lexerRuleBlock ; #ruleSpec* ⟧, {#I}#Index]
→ IndexRules2[#ruleSpec*, {#I; #TOKEN_REF : %ruleSpec⟦ #DOC_COMMENT? #FRAGMENT? #TOKEN_REF : #lexerRuleBlock ; ⟧}#Index];

// --- Element fusion

/*
  Test whether the given element can be fused with the next element.
 
  A element can be fused with the next element if they both references the same rule or token, 
  modulo constant element, and the first one is a single production and the second one a list.
  
  TODO: formal description.
 */
IsFused[ANTLR_element_sort, $List[ANTLR_element_sort], RuleIndex] :: Boolean;

IsFused[#elmt, %element*⟨⟩                    , #index       ] → FALSE;
IsFused[#elmt, %element*⟨ #element #element* ⟩, {#I}RULEINDEX] → IsFused2[{#I}IsConstantElement[#elmt], GetRefElement[#elmt, #element*, {#I}RULEINDEX], GetEbnfSuffixElement[#elmt], GetRefElement[#element, #element*, {#I}RULEINDEX], GetEbnfSuffixElement[#element]];

IsFused2[Boolean, Option[$String], Option[ANTLR_ebnfSuffix_sort], Option[$String], Option[ANTLR_ebnfSuffix_sort]] :: Boolean;

IsFused2[TRUE, #ref1, #ebnfSuffix1, #ref2, #ebnfSuffix2] → FALSE; 

IsFused2[FALSE, SOME[#ref1], #ebnfSuffix1, SOME[#ref2], #ebnfSuffix2] 
→ 
$[If, $[Equal, #ref1, #ref2], IsFuseSuffix[#ebnfSuffix1, #ebnfSuffix2], FALSE];

-[Fallback]: 
IsFused2[FALSE, #ref1, #ebnfSuffix1, #ref2, #ebnfSuffix2] → FALSE; 

IsFuseSuffix[Option[ANTLR_ebnfSuffix_sort], Option[ANTLR_ebnfSuffix_sort]] :: Boolean;

// t1 t2: don't fuse
IsFuseSuffix[NONE, NONE] → FALSE;

// Don't fuse if second is optional
IsFuseSuffix[NONE, SOME[%ebnfSuffix⟨ ? ⟩]] → FALSE;

// fuse if second is * 
IsFuseSuffix[NONE, SOME[%ebnfSuffix⟨ * ⟩]] → TRUE;

// fuse if second is + 
IsFuseSuffix[NONE, SOME[%ebnfSuffix⟨ + ⟩]] → TRUE;

// don't fuse if first has suffix 
IsFuseSuffix[SOME[#1], #2] → FALSE;

// ---  Extract rule/token reference name. Returns the first non-sugar reference found.
 
// Extract ref name from trivial block 
GetRefBlock[ANTLR_block_sort, $List[ANTLR_element_sort], RuleIndex] :: Option[$String];
GetRefBlock[{#L}%block⟨ ( #block_S1? #altList ) ⟩, #element*, #index] → GetRefAltList[#altList, #element*, #index];

GetRefAltList[ANTLR_altList_sort, $List[ANTLR_element_sort], RuleIndex] :: Option[$String];

// A trivial block has only one alternative
GetRefAltList[{#L}%altList⟨ #alternative ⟩, #element*, #index] → GetRefAlternative[#alternative,  #element*, #index];

GetRefAltList[{#L}%altList⟨ #alternative | #alternative2 #altList_S1* ⟩, #element*, #index] → $[Error, $[:, "Internal error: block is not trivial: ", $[Show, {#L}%altList⟨ #alternative | #alternative2 #altList_S1* ⟩] ]];

GetRefAlternative[ANTLR_alternative_sort, $List[ANTLR_element_sort], RuleIndex] :: Option[$String];

GetRefAlternative[{#L}%alternative⟨ #elementOptions? #element* ⟩, #element*2, #index] 
→ GetRefElements[Concat[#element*, #element*2], #index]; 

GetRefElements[$List[ANTLR_element_sort], RuleIndex] :: Option[$String];

GetRefElements[%element*⟦ ⟧, #index]                    → NONE;
GetRefElements[%element*⟦ #element #element* ⟧, #index] → GetRefElement[#element, #element*, #index];

GetRefElement[ANTLR_element_sort, $List[ANTLR_element_sort], RuleIndex] :: Option[$String];

// This is a labeled block: look inside
GetRefElement[{#L}%element⟦ #id #labeledElement_S1 #block #element_A1_S1 ⟧, #element*, #index] 
→ GetRefBlock[#block, #element*, #index];

// This is a block: look inside
GetRefElement[{#L}%element⟦ #block #blockSuffix? ⟧, #element*, #index] 
→ GetRefBlock[#block, #element*, #index];

// This is a rule ref: must be the no-constant element (not always true but see normalizer for approximation rules)
GetRefElement[{#L}%element⟦ #RULE_REF #ARG_ACTION? #elementOptions? #element_A2_S1 ⟧, #element*, #index] 
→ SOME[#RULE_REF];

// This is a token ref: skip it only if constant 
GetRefElement[{#L}%element⟦ #TOKEN_REF #elementOptions? ⟧, #element*, {#I}RULEINDEX] 
→ $[If, $[Equal, #TOKEN_REF, "EOF"],
   GetRefElements[#element*, {#I}RULEINDEX],
   If[{#I}IsConstantRuleSpec[UnSOME[{#I}GetSome[#TOKEN_REF]]], GetRefElements[#element*, {#I}RULEINDEX], SOME[#TOKEN_REF]]];
// TODO: should output an error when token is not found but the crsx interpreter does not handle errors very well.

-[Fallback]:
GetRefElement[#element, #element*, #index] 
→ GetRefElements[#element*, #index];

// ---  Extract ebnfSuffix 

GetEbnfSuffixElement[ANTLR_element_sort] :: Option[ANTLR_ebnfSuffix_sort]; 

GetEbnfSuffixElement[%element⟦ #labeledElement ⟧]             → NONE;
GetEbnfSuffixElement[%element⟦ #labeledElement #ebnfSuffix ⟧] → SOME[#ebnfSuffix]; 
GetEbnfSuffixElement[%element⟦ #atom ⟧]                       → NONE;
GetEbnfSuffixElement[%element⟦ #atom #ebnfSuffix ⟧]           → SOME[#ebnfSuffix]; 
GetEbnfSuffixElement[%element⟦ #block ⟧]                      → NONE;  
GetEbnfSuffixElement[%element⟦ #block #ebnfSuffix ⟧]          → SOME[#ebnfSuffix]; 
GetEbnfSuffixElement[%element⟦ #ACTION #QUESTION? ⟧]          → NONE; 
 
// --- Test whether a production is constant

// Check if rule spec is trivial
{$String: ANTLR_ruleSpec_sort}IsConstantMaybeRuleSpec[Option[ANTLR_ruleSpec_sort]] :: Boolean;

// Rule is missing. Shouldn't occur. 
{#I}IsConstantMaybeRuleSpec[NONE]            → FALSE; // Safe approximation

{#I}IsConstantMaybeRuleSpec[SOME[#ruleSpec]] → {#I}IsConstantRuleSpec[#ruleSpec]; 

{$String: ANTLR_ruleSpec_sort}IsConstantElement[ANTLR_element_sort] :: Boolean;

// Labeled element with no ebnf suffix. Continue..
{#I}IsConstantElement[%element⟦ #labeledElement ⟧] → {#I}IsConstantLabeledElement[#labeledElement];

// Labeled element with an ebnf suffix. Can't be constant (unless labeledElement always matched the empty string. ANTLR complains about it)
{#I}IsConstantElement[%element⟦ #labeledElement #ebnfSuffix ⟧] → FALSE;

// Atom with no ebnfSuffix. Continue
{#I}IsConstantElement[%element⟦ #atom ⟧] → {#I}IsConstantAtom[#atom];

// Atom with ebnfSuffix. Not constant
{#I}IsConstantElement[%element⟦ #atom #ebnfSuffix ⟧] → FALSE;

// Block without suffix. Continue
{#I}IsConstantElement[%element⟦ #block ⟧] → {#I}IsConstantBlock[#block];

// Block with suffix. No constant
{#I}IsConstantElement[%element⟦ #block #blockSuffix ⟧] → FALSE;

// Actions match no value. 
{#I}IsConstantElement[%element⟦ #ACTION #QUESTION? ⟧] → TRUE;

{$String: ANTLR_ruleSpec_sort}IsConstantLabeledElement[ANTLR_labeledElement_sort] :: Boolean;

// Extract atom and recurse
{#I}IsConstantLabeledElement[%labeledElement⟦ #id #labeledElement_S1 #atom ⟧]
→
{#I}IsConstantAtom[#atom];

// Extract block and recurse
{#I}IsConstantLabeledElement[%labeledElement⟦ #id #labeledElement_S1 #block ⟧]
→
{#I}IsConstantBlock[#block];

{$String: ANTLR_ruleSpec_sort}IsConstantAtom[ANTLR_atom_sort] :: Boolean;

// Assume range are not constant. In theory ['a'..'a'] is trivial but not commonly written this way 
{#I}IsConstantAtom[%atom⟦ #range ⟧] → FALSE;

// Token ref: dereference and analyze lexer rule (TODO: cache lexer rule analysis)
{#I}IsConstantAtom[%atom⟦ #TOKEN_REF #elementOptions? ⟧] → {#I}IsConstantMaybeRuleSpec[{#I}GetSome[#TOKEN_REF]];

// string literal: this is constant!
{#I}IsConstantAtom[%atom⟦ #STRING_LITERAL #elementOptions? ⟧] → TRUE;

// Reference to a rule. Dereference and analyze parser rule. 
// 
// here an example of a constant rule:
//   A : ( B )
//   B : 'a'
// For now approximate: NON CONSTANT
{#I}IsConstantAtom[%atom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧] → FALSE; //{#I}IsConstantMaybeRuleSpec[{#I}GetSome[#RULE_REF]];

// notSet is most of the time non-constant
{#I}IsConstantAtom[%atom⟦ #notSet ⟧] →FALSE;

// '.' is most of the time non-constant.
{#I}IsConstantAtom[%atom⟦ . #elementOptions? ⟧] → FALSE;

// Lexer rule
{$String: ANTLR_ruleSpec_sort}IsConstantRuleSpec[ANTLR_ruleSpec_sort] :: Boolean;

{#I}IsConstantRuleSpec[%ruleSpec⟦ #DOC_COMMENT? #FRAGMENT? #TOKEN_REF : #lexerAltList ; ⟧]
→ {#I}IsConstantLexerAltList[#lexerAltList];

// Lexer alternatives
{$String: ANTLR_ruleSpec_sort}IsConstantLexerAltList[ANTLR_lexerAltList_sort] :: Boolean;

// Only one alternative: continue
{#I}IsConstantLexerAltList[%lexerAltList⟦ #lexerElement+ #lexerCommands? ⟧] → {#I}IsConstantLexerElements[#lexerElement+]; 

// More than one: commonly non-constant.
{#I}IsConstantLexerAltList[%lexerAltList⟦ #lexerAlt1 | #lexerAlt2 #lexerAltList_S1*  ⟧] → FALSE;

// Sequence of lexer elements must all be constant
{$String: ANTLR_ruleSpec_sort}IsConstantLexerElements[$List[ANTLR_lexerElement_sort]] :: Boolean;

{#I}IsConstantLexerElements[%lexerElement+⟦ #lexerElement  ⟧] → {#I}IsConstantLexerElement[#lexerElement];

{#I}IsConstantLexerElements[%lexerElement+⟦ #lexerElement #lexerElement+ ⟧]  
→
If[{#I}IsConstantLexerElement[#lexerElement], {#I}IsConstantLexerElements[#lexerElement+], FALSE];

{$String: ANTLR_ruleSpec_sort}IsConstantLexerElement[ANTLR_lexerElement_sort] :: Boolean;

// Labeled lexer element with no ebnf suffix. Continue..
{#I}IsConstantLexerElement[%lexerElement⟦ #labeledLexerElement ⟧] → {#I}IsConstantLabeledLexerElement[#labeledLexerElement];

// Labeled lexer element with an ebnf suffix. Can't be trivial (unless labeledElement always matched the empty string. ANTLR complains about it)
{#I}IsConstantLexerElement[%lexerElement⟦ #labeledLexerElement #ebnfSuffix ⟧] → FALSE;

// Lexer atom with no ebnfSuffix. Continue
{#I}IsConstantLexerElement[%lexerElement⟦ #lexerAtom ⟧] → {#I}IsConstantLexerAtom[#lexerAtom];

// Atom with ebnfSuffix. Can't be trivial
{#I}IsConstantLexerElement[%lexerElement⟦ #lexerAtom #ebnfSuffix ⟧] → FALSE;

// Block without suffix. Continue
{#I}IsConstantLexerElement[%lexerElement⟦ #lexerBlock ⟧] → {#I}IsConstantLexerBlock[#lexerBlock];

// Block with suffix. Can't be trivial
{#I}IsConstantLexerElement[%lexerElement⟦ #lexerBlock #ebnfSuffix ⟧] → FALSE;

// Actions match no value (so constant)
{#I}IsConstantLexerElement[%lexerElement⟦ #ACTION #QUESTION? ⟧] → TRUE;

{$String: ANTLR_ruleSpec_sort}IsConstantLabeledLexerElement[ANTLR_labeledLexerElement_sort] :: Boolean;

// Extract atom and recurse
{#I}IsConstantLabeledLexerElement[%labeledLexerElement⟦ #id #labeledLexerElement_S1 #lexerAtom ⟧] → {#I}IsConstantLexerAtom[#lexerAtom];
//
//// Extract block and recurse
//{#I}IsConstantLabeledLexerElement[%labeledLexerElement⟦ #id #labeledLexerElement_S1 #block ⟧] → {#I}IsConstantLexerBlock[#block];

{$String: ANTLR_ruleSpec_sort}IsConstantLexerAtom[ANTLR_lexerAtom_sort] :: Boolean;

// Assume range are not trivial. In theory ['a'..'a'] is trivial but not commonly written this way 
{#I}IsConstantLexerAtom[%lexerAtom⟦ #range ⟧] → FALSE;

// Token ref: dereference and analyze lexer rule (TODO: cache lexer rule analysis)
{#I}IsConstantLexerAtom[%lexerAtom⟦ #TOKEN_REF #elementOptions? ⟧] → {#I}IsConstantMaybeRuleSpec[{#I}GetSome[#TOKEN_REF]];

// string literal: this is trivial!
{#I}IsConstantLexerAtom[%lexerAtom⟦ #STRING_LITERAL #elementOptions? ⟧] → TRUE;

// Reference to a rule. Should not occur
{#I}IsConstantLexerAtom[%lexerAtom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧] → FALSE;

// notSet is most of the time non-trivial. 
{#I}IsConstantLexerAtom[%lexerAtom⟦ #notSet ⟧] → FALSE;

// '.' is most of the time non-trivial.
{#I}IsConstantLexerAtom[%lexerAtom⟦ . #elementOptions? ⟧] → FALSE;

// most commonly not rivial
{#I}IsConstantLexerAtom[%lexerAtom⟦ #LEXER_CHAR_SET ⟧] → FALSE;

{$String: ANTLR_ruleSpec_sort}IsConstantLexerBlock[ANTLR_lexerBlock_sort] :: Boolean;
{#I}IsConstantLexerBlock[ANTLR_lexerBlock[#1, #lexerAltList, #3]] → {#I}IsConstantLexerAltList[#lexerAltList];


// --- Extract constant token as string value

{$String: ANTLR_ruleSpec_sort}GetConstantMaybeRuleSpec[Option[ANTLR_ruleSpec_sort]] :: Option[$String];

// Rule is missing. Shouldn't occur. 
{#I}GetConstantMaybeRuleSpec[NONE]            → NONE; 
{#I}GetConstantMaybeRuleSpec[SOME[#ruleSpec]] → {#I}GetConstantRuleSpec[#ruleSpec]; 

{$String: ANTLR_ruleSpec_sort}GetConstantElement[ANTLR_element_sort] :: Option[$String];

// Labeled element with no ebnf suffix. Continue..
{#I}GetConstantElement[%element⟦ #labeledElement ⟧] → {#I}GetConstantLabeledElement[#labeledElement];

// Labeled element with an ebnf suffix. Can't be constant (unless labeledElement always matched the empty string. ANTLR complains about it)
{#I}GetConstantElement[%element⟦ #labeledElement #ebnfSuffix ⟧] → NONE;

// Atom with no ebnfSuffix. Continue
{#I}GetConstantElement[%element⟦ #atom ⟧] → {#I}GetConstantAtom[#atom];

// Atom with ebnfSuffix. Not constant
{#I}GetConstantElement[%element⟦ #atom #ebnfSuffix ⟧] → NONE;

// Block without suffix. Continue
{#I}GetConstantElement[%element⟦ #block ⟧] → {#I}GetConstantBlock[#block];

// Block with suffix. No constant
{#I}GetConstantElement[%element⟦ #block #blockSuffix ⟧] → NONE;

// Actions match no value. 
{#I}GetConstantElement[%element⟦ #ACTION #QUESTION? ⟧] → NONE;

{$String: ANTLR_ruleSpec_sort}GetConstantLabeledElement[ANTLR_labeledElement_sort] :: Option[$String];

// Extract atom and recurse
{#I}GetConstantLabeledElement[%labeledElement⟦ #id #labeledElement_S1 #atom ⟧] → {#I}GetConstantAtom[#atom];

// Extract block and recurse
{#I}GetConstantLabeledElement[%labeledElement⟦ #id #labeledElement_S1 #block ⟧] → {#I}GetConstantBlock[#block];

{$String: ANTLR_ruleSpec_sort}GetConstantAtom[ANTLR_atom_sort] :: Option[$String];

// Assume range are not constant. In theory ['a'..'a'] is trivial but not commonly written this way 
{#I}GetConstantAtom[%atom⟦ #range ⟧] → NONE;

// Token ref: dereference and analyze lexer rule (TODO: cache lexer rule analysis)
{#I}GetConstantAtom[%atom⟦ #TOKEN_REF #elementOptions? ⟧] → {#I}GetConstantTokenRef[#TOKEN_REF];

// string literal: this is constant!
{#I}GetConstantAtom[%atom⟦ #STRING_LITERAL #elementOptions? ⟧] → SOME[#STRING_LITERAL];

// Reference to a rule. Dereference and analyze parser rule. 
// 
// here an example of a constant rule:
//   A : ( B )
//   B : 'a'
// For now approximate: NON CONSTANT
{#I}GetConstantAtom[%atom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧] → NONE; //{#I}GetConstantMaybeRuleSpec[{#I}GetSome[#RULE_REF]];

// notSet is most of the time non-constant
{#I}GetConstantAtom[%atom⟦ #notSet ⟧] → NONE;

// '.' is most of the time non-constant.
{#I}GetConstantAtom[%atom⟦ . #elementOptions? ⟧] → NONE;

// Lexer rule
{$String: ANTLR_ruleSpec_sort}GetConstantRuleSpec[ANTLR_ruleSpec_sort] :: Option[$String];

{#I}GetConstantRuleSpec[%ruleSpec⟦ #DOC_COMMENT? #FRAGMENT? #TOKEN_REF : #lexerAltList ; ⟧]
→ {#I}GetConstantLexerAltList[#lexerAltList];

// Lexer alternatives
{$String: ANTLR_ruleSpec_sort}GetConstantLexerAltList[ANTLR_lexerAltList_sort] :: Option[$String];

// Only one alternative: continue
{#I}GetConstantLexerAltList[%lexerAltList⟦ #lexerElement+ #lexerCommands? ⟧] → {#I}GetConstantLexerElements[#lexerElement+]; 

// More than one: commonly non-constant.
{#I}GetConstantLexerAltList[%lexerAltList⟦ #lexerAlt1 | #lexerAlt2 #lexerAltList_S1*  ⟧] → NONE;

// Sequence of lexer elements must all be constant
{$String: ANTLR_ruleSpec_sort}GetConstantLexerElements[$List[ANTLR_lexerElement_sort]] :: Option[$String];

{#I}GetConstantLexerElements[%lexerElement+⟦ #lexerElement  ⟧] → {#I}GetConstantLexerElement[#lexerElement];

{#I}GetConstantLexerElements[%lexerElement+⟦ #lexerElement #lexerElement+ ⟧]  
→
ConcatSome[{#I}GetConstantLexerElement[#lexerElement], {#I}GetConstantLexerElements[#lexerElement+]];

{$String: ANTLR_ruleSpec_sort}GetConstantLexerElement[ANTLR_lexerElement_sort] :: Option[$String];

// Labeled lexer element with no ebnf suffix. Continue..
{#I}GetConstantLexerElement[%lexerElement⟦ #labeledLexerElement ⟧] → {#I}GetConstantLabeledLexerElement[#labeledLexerElement];

// Labeled lexer element with an ebnf suffix. Can't be trivial (unless labeledElement always matched the empty string. ANTLR complains about it)
{#I}GetConstantLexerElement[%lexerElement⟦ #labeledLexerElement #ebnfSuffix ⟧] → NONE;

// Lexer atom with no ebnfSuffix. Continue
{#I}GetConstantLexerElement[%lexerElement⟦ #lexerAtom ⟧] → {#I}GetConstantLexerAtom[#lexerAtom];

// Atom with ebnfSuffix. Can't be trivial
{#I}GetConstantLexerElement[%lexerElement⟦ #lexerAtom #ebnfSuffix ⟧] → NONE;

// Block without suffix. Continue
{#I}GetConstantLexerElement[%lexerElement⟦ #lexerBlock ⟧] → {#I}GetConstantLexerBlock[#lexerBlock];

// Block with suffix. Can't be trivial
{#I}GetConstantLexerElement[%lexerElement⟦ #lexerBlock #ebnfSuffix ⟧] → NONE;

// Actions match no value (so constant)
{#I}GetConstantLexerElement[%lexerElement⟦ #ACTION #QUESTION? ⟧] → NONE;

{$String: ANTLR_ruleSpec_sort}GetConstantLabeledLexerElement[ANTLR_labeledLexerElement_sort] :: Option[$String];

// Extract atom and recurse
{#I}GetConstantLabeledLexerElement[%labeledLexerElement⟦ #id #labeledLexerElement_S1 #lexerAtom ⟧] → {#I}GetConstantLexerAtom[#lexerAtom];

//
//// Extract block and recurse
//{#I}GetConstantLabeledLexerElement[%labeledLexerElement⟦ #id #labeledLexerElement_S1 #block ⟧] → {#I}GetConstantLexerBlock[#block];

{$String: ANTLR_ruleSpec_sort}GetConstantLexerAtom[ANTLR_lexerAtom_sort] :: Option[$String];

// Assume range are not trivial. In theory ['a'..'a'] is trivial but not commonly written this way 
{#I}GetConstantLexerAtom[%lexerAtom⟦ #range ⟧] → NONE;

// Token ref: dereference and analyze lexer rule (TODO: cache lexer rule analysis)
{#I}GetConstantLexerAtom[%lexerAtom⟦ #TOKEN_REF #elementOptions? ⟧] → {#I}GetConstantTokenRef[#TOKEN_REF];

// string literal: this is trivial!
{#I}GetConstantLexerAtom[%lexerAtom⟦ #STRING_LITERAL #elementOptions? ⟧] → SOME[#STRING_LITERAL];

// Reference to a rule. Should not occur
{#I}GetConstantLexerAtom[%lexerAtom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧] → NONE;

// notSet is most of the time non-trivial. 
{#I}GetConstantLexerAtom[%lexerAtom⟦ #notSet ⟧] → NONE;

// '.' is most of the time non-trivial.
{#I}GetConstantLexerAtom[%lexerAtom⟦ . #elementOptions? ⟧] → NONE;

// most commonly not rivial
{#I}GetConstantLexerAtom[%lexerAtom⟦ #LEXER_CHAR_SET ⟧] → NONE;

{$String: ANTLR_ruleSpec_sort}GetConstantTokenRef[$String] :: Option[$String];

// Token ref: dereference 
{#I}GetConstantTokenRef[#tokenRef] → {#I}GetConstantMaybeRuleSpec[{#I}GetSome[#tokenRef]];

// --- Element option extraction

ElementOption ::= ( SUGAR; SYMBOL[Option[$String]]; BINDER[$String]; BINDS[$String]; UNKOWN; );

// Extract the given element option from alternative. Must contain only one element to succeed.
GetElementOptionAlternative[ANTLR_alternative_sort, $String] :: $list[ElementOption];
GetElementOptionAlternative[%alternative⟦                              ⟧, #optionId] → ();
GetElementOptionAlternative[%alternative⟦ #element                     ⟧, #optionId] → GetElementOptionElement[#element, #optionId];
GetElementOptionAlternative[%alternative⟦ #element #element2 #element* ⟧, #optionId] → ();

// Extract the given element option from element
GetElementOptionElement[ANTLR_element_sort, $String] :: $list[ElementOption];

GetElementOptionElement[%element⟦ #id #labeledElement_S1 #atom #element_A1_S1  ⟧, #optionId] → GetElementOptionAtom[#atom, #optionId];
GetElementOptionElement[%element⟦ #id #labeledElement_S1 #block #element_A1_S1 ⟧, #optionId] → ();  
GetElementOptionElement[%element⟦ #atom #element_A2_S1                         ⟧, #optionId] → GetElementOptionAtom[#atom, #optionId];
GetElementOptionElement[%element⟦ #block #blockSuffix?                         ⟧, #optionId] → ();
GetElementOptionElement[%element⟦ #ACTION #QUESTION?                           ⟧, #optionId] → ();

// Extract the given element option from atom
GetElementOptionAtom[ANTLR_atom_sort, $String] :: $List[ElementOption];

GetElementOptionAtom[%atom⟦ #range                          ⟧, #optionId] → ();
GetElementOptionAtom[%atom⟦ #TOKEN_REF                      ⟧, #optionId] → ();
GetElementOptionAtom[%atom⟦ #TOKEN_REF #elementOptions      ⟧, #optionId] → GetElementOptionOptions[#elementOptions, #optionId];
GetElementOptionAtom[%atom⟦ #STRING_LITERAL                 ⟧, #optionId] → ();
GetElementOptionAtom[%atom⟦ #STRING_LITERAL #elementOptions ⟧, #optionId] → GetElementOptionOptions[#elementOptions, #optionId];
GetElementOptionAtom[%atom⟦ #RULE_REF #ARG_ACTION?          ⟧, #optionId] → ();
GetElementOptionAtom[%atom⟦ #RULE_REF #ARG_ACTION? #elementOptions ⟧, #optionId] → GetElementOptionOptions[#elementOptions, #optionId];
GetElementOptionAtom[%atom⟦ #notSet                         ⟧, #optionId] → ();
GetElementOptionAtom[%atom⟦ .                               ⟧, #optionId] → ();
GetElementOptionAtom[%atom⟦ . #elementOptions               ⟧, #optionId] → GetElementOptionOptions[#elementOptions, #optionId];

// Extract the given element option from element options
GetElementOptionOptions[ANTLR_elementOptions_sort, $String] :: $List[ElementOption];
GetElementOptionOptions[%elementOptions⟦ < #elementOption #elementOptions_S1* > ⟧, #optionId] 
→ GetElementOptionOption[#elementOption, #elementOptions_S1*, #optionId];

// Extract the given element option from element options
GetElementOptionOption[ANTLR_elementOption_sort, $List[ANTLR_elementOptions_S1_sort], $String] :: $List[ElementOption];
GetElementOptionOption[%elementOption⟦ #id ⟧, #elementOptions_S1*, #optionId] 
→ If[StringEqual[UnwrapId[#id], #optionId], 
    (ToElementOption[#optionId, NONE]; GetElementOptionOptions_S1_ZOM[#elementOptions_S1*, #optionId]),
    GetElementOptionOptions_S1_ZOM[#elementOptions_S1*, #optionId]];

GetElementOptionOption[%elementOption⟦ #id = #elementOption_S1 ⟧, #elementOptions_S1*, #optionId] 
→ If[StringEqual[UnwrapId[#id], #optionId], 
    (ToElementOption[#optionId, SOME[#elementOption_S1]]; GetElementOptionOptions_S1_ZOM[#elementOptions_S1*, #optionId]),
    GetElementOptionOptions_S1_ZOM[#elementOptions_S1*, #optionId]];

// Extract the given element option from rest of element options
GetElementOptionOptions_S1_ZOM[$List[ANTLR_elementOptions_sort], $String] :: $List[ElementOption];
GetElementOptionOptions_S1_ZOM[%elementOptions_S1*⟦⟧, #optionId] 
→ ();

GetElementOptionOptions_S1_ZOM[%elementOptions_S1*⟦, #elementOption #elementOptions_S1* ⟧, #optionId]  
→ GetElementOptionOption[#elementOption, #elementOptions_S1*, #optionId];

// Convert option $String to ElementOption
∀ a .ToElementOption[$String, Option[a]] :: ElementOption;
ToElementOption[#id, NONE] 
→ $[If, $[Equal, #id, "sugar"], SUGAR, 
  $[If, $[Equal, #id, "variable"], SYMBOL[NONE], 
  UNKOWN]];

ToElementOption[#id, SOME[#value]] 
→ $[If, $[Equal, #id, "variable"], SYMBOL[UnwrapOptionValue[#value]], 
  $[If, $[Equal, #id, "boundvar"], BINDER[UnwrapOptionValue[#value]], 
  $[If, $[Equal, #id, "bound"], BINDS[UnwrapOptionValue[#value]], 
  UNKOWN]]];


// --- Test whether the rule/rule ref is a string rule

IsStringRuleRuleRef[$String] :: $Boolean;
{#I}IsStringRuleRuleRef[#RULE_REF] → IsStringRuleMaybeRule[{#I}GetSome[#RULE_REF], #RULE_REF];

IsStringRuleMaybeRule[Option[ANTLR_ruleSpec_sort], $String] :: $Boolean;

IsStringRuleMaybeRule[NONE, #RULE_REF]            → $False; //$[Error, $[:, "Error: undefined rule ", #RULE_REF]];
IsStringRuleMaybeRule[SOME[#ruleSpec], #RULE_REF] → IsStringRuleRuleSpec[#ruleSpec];

IsStringRuleRuleSpec[ANTLR_ruleSpec_sort] :: $Boolean;
IsStringRuleRuleSpec[%ruleSpec⟦ #DOC_COMMENT? #ruleModifiers? #RULE_REF #ARG_ACTION? #ruleReturns? #throwsSpec? #localsSpec? 
                           #rulePrequel* : #ruleAltList ; #exceptionHandler* #finallyClause? ⟧]
→ IsStringRulePrequels[#rulePrequel*];

IsStringRuleRuleSpec[%ruleSpec⟦ #DOC_COMMENT? #FRAGMENT? #TOKEN_REF : #lexerRuleBlock ;⟧]
→ $True;

IsStringRulePrequels[$List[ANTLR_rulePrequel_sort]] :: $Boolean;
IsStringRulePrequels[()]                            → $False;
IsStringRulePrequels[(#rulePrequel; #rulePrequels)] → IsStringRulePrequel[#rulePrequel, #rulePrequels];

// TODO: for some reason the rulePrequel warpper is missing.

IsStringRulePrequel[ANTLR_rulePrequel_sort, $List[ANTLR_rulePrequel_sort]] :: $Boolean;
IsStringRulePrequel[ANTLR_optionsSpec[#OPTIONS, #optionsSpec_S1*, #SEMI], #rulePrequels] → IsStringRuleOptionSpecs[#optionsSpec_S1*, #rulePrequels];
//IsStringRulePrequel[ANTLR_rulePrequel_A2[#ruleAction], #rulePrequels] → IsStringRulePrequels[#rulePrequels];

IsStringRuleOptionSpecs[$List[ANTLR_optionsSpec_S1_sort], $List[ANTLR_rulePrequel_sort]] :: $Boolean;
IsStringRuleOptionSpecs[(ANTLR_optionsSpec_S1[ANTLR_option[ANTLR_id_A1[#id], #ASSIGN, ANTLR_optionValue_A1[ANTLR_id_A1[#value]]], #SEMI];), #rulePrequels]
→ $[If, $[If, $[Equal, #id, "type"], $[Equal, #value, "string"], $False], $True, $False];
        

// --- Sugar: a constant or as the option <sugar>

// Is element sugar?
{$String: ANTLR_ruleSpec_sort}IsSugarElement[ANTLR_element_sort] :: Boolean;
{#I}IsSugarElement[#element] → Or[{#I}IsConstantElement[#element], IsNotEmpty[GetElementOptionElement[#element, "sugar"]]];

// Is atom sugar?
{$String: ANTLR_ruleSpec_sort}IsSugarAtom[ANTLR_atom_sort] :: Boolean;
{#I}IsSugarAtom[#atom] → Or[{#I}IsConstantAtom[#atom], IsNotEmpty[GetElementOptionAtom[#atom, "sugar"]]];

// --- Strip ARG_ACTION

StripArgActionAltList[ANTLR_altList_sort] :: ANTLR_altList_sort;
StripArgActionAltList[{#L}%altList⟨ #alternative #altList_S1* ⟩] 
→ {#L}%altList⟨ ⟨alternative: StripArgActionAlternative[#alternative]⟩ ⟨altList_S1*: StripArgActionAltList_S1s[#altList_S1*] ⟩ ⟩;

StripArgActionAltList_S1s[$List[ANTLR_altList_S1_sort]] :: $List[ANTLR_altList_S1_sort];
StripArgActionAltList_S1s[{#L}%altList_S1*⟨ ⟩] 
→ {#L}%altList_S1*⟨ ⟩;

StripArgActionAltList_S1s[{#L}%altList_S1*⟨ | #alternative #altList_S1* ⟩] 
→ {#L}%altList_S1*⟨ | ⟨alternative: StripArgActionAlternative[#alternative]⟩ ⟨altList_S1*: StripArgActionAltList_S1s[#altList_S1*] ⟩ ⟩;

StripArgActionAlternative[ANTLR_alternative_sort] :: ANTLR_alternative_sort;
StripArgActionAlternative[{#L}%alternative⟨ #elementOptions? #element* ⟩] 
→ {#L}%alternative⟨ #elementOptions? ⟨element*: StripArgActionElements[#element*]⟩ ⟩; 

StripArgActionElements[$List[ANTLR_element_sort]] :: $List[ANTLR_element_sort];
StripArgActionElements[{#L}%element*⟦ ⟧]                    
→ {#L}%element*⟦ ⟧;

StripArgActionElements[{#L}%element*⟦ #element #element* ⟧]
→ {#L}%element*⟦ ⟨element: StripArgActionElement[#element]⟩ ⟨element*: StripArgActionElements[#element*]⟩ ⟧;

StripArgActionElement[ANTLR_element_sort] :: ANTLR_element_sort;

StripArgActionElement[{#L}%element⟦ #id #labeledElement_S1 #atom ⟧] 
→ {#L}%element⟦ #id #labeledElement_S1 ⟨atom: StripArgActionAtom[#atom]⟩ ⟧;

StripArgActionElement[{#L}%element⟦ #id #labeledElement_S1 #block ⟧] 
→ {#L}%element⟦ #id #labeledElement_S1 ⟨atom: StripArgActionBlock[#block]⟩ ⟧;

StripArgActionElement[{#L}%element⟦ #atom #element_A2_S1 ⟧] 
→ {#L}%element⟦ ⟨atom: StripArgActionAtom[#atom]⟩ #element_A2_S1 ⟧;

StripArgActionElement[{#L}%element⟦ #block #blockSuffix? ⟧] 
→ {#L}%element⟦ ⟨block: StripArgActionBlock[#block]⟩ #blockSuffix? ⟧;

StripArgActionElement[{#L}%element⟦ #ACTION #QUESTION? ⟧] 
→ {#L}%element⟦ #ACTION #QUESTION? ⟧;

StripArgActionBlock[ANTLR_block_sort] :: ANTLR_block_sort;
StripArgActionBlock[{#L}%block⟦ ( #block_S1? #altList ) ⟧] 
→ {#L}%block⟨ ( #block_S1? ⟨altList: StripArgActionAltList[#altList]⟩ ) ⟩;

StripArgActionAtom[ANTLR_atom_sort] :: ANTLR_atom_sort;

StripArgActionAtom[{#L}%atom⟦ #range ⟧] 
→ {#L}%atom⟦ #range ⟧;

StripArgActionAtom[{#L}%atom⟦ #TOKEN_REF #elementOptions? ⟧] 
→ {#L}%atom⟦ #TOKEN_REF #elementOptions? ⟧;

StripArgActionAtom[{#L}%atom⟦ #STRING_LITERAL  #elementOptions? ⟧] 
→ {#L}%atom⟦ #STRING_LITERAL #elementOptions? ⟧;

StripArgActionAtom[{#L}%atom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧] 
→ {#L}%atom⟦ #RULE_REF #elementOptions? ⟧;

// --- Misc...

Enbf1ToBlockSuffix[ANTLR_element_A1_S1_sort] :: $List[ANTLR_blockSuffix_sort];
Enbf1ToBlockSuffix[%element_A1_S1⟨             ⟩] → ();
Enbf1ToBlockSuffix[%element_A1_S1⟨ #ebnfSuffix ⟩] → ( #ebnfSuffix );

// Unwrap element option value
UnwrapOptionValue[ANTLR_elementOption_S1_sort] :: $String;
UnwrapOptionValue[%elementOption_S1⟦ #id             ⟧] → UnwrapId[#id];
UnwrapOptionValue[%elementOption_S1⟦ #STRING_LITERAL ⟧] → #STRING_LITERAL;

// Unwrap Grammar Id
UnwrapId[ANTLR_id_sort] :: $String;
UnwrapId[ANTLR_id_A1[#id]] → #id;
UnwrapId[ANTLR_id_A2[#id]] → #id;

UnBINDS[ElementOption] :: $String;
UnBINDS[BINDS[#]] → #;

TrimEltOptionAtom[ANTLR_atom_sort] :: ANTLR_atom_sort;

TrimEltOptionAtom[{#L}%atom⟦ #range ⟧] 
→ {#L}%atom⟦ #range ⟧;

TrimEltOptionAtom[{#L}%atom⟦ #TOKEN_REF #elementOptions? ⟧] 
→ {#L}%atom⟦ #TOKEN_REF ⟧;

TrimEltOptionAtom[{#L}%atom⟦ #STRING_LITERAL #elementOptions? ⟧] 
→ {#L}%atom⟦ #STRING_LITERAL ⟧;

TrimEltOptionAtom[{#L}%atom⟦ #RULE_REF #ARG_ACTION? ⟧] 
→ {#L}%atom⟦ #RULE_REF #ARG_ACTION? ⟧;

)]