/*
 * Copyright (c) 2015 IBM Corporation.
 *
 * Normalize ANTLR v4 grammar as follows:
 *
 * - The following ANTLR constructs are stripped out:
 *   - comments
 *
 * - In general subrules are promoted to top-level rules, for instance:
 *
 *      A : ( B | C ) | D
 *      →
 *      A    : A_S1 | D;
 *      A_S1 : B | C;
 *
 * - Subrule containing only one production, after eliminating trivial elements,
 *   are not promoted. Such subrules are called "trivial". For instance:
 *
 *      A : B (',' B)*  is not rewritten.
 *
 * - string literals are converted to token
 */

import std::core
import std::listdef
import std::string
import std::num
import std::text::Text4
import pg::util
import pg::ANTLR
import pg::trivial

/* API: Normalize the ANTLR grammar spec */
func NormalizeGrammar(#: ANTLR_grammarSpec_sort) -> ANTLR_grammarSpec_sort
→ NormGrammarSpec(#)

func NormalizePP(ANTLR_grammarSpec_sort) -> Text4_text_sort
rule NormalizePP(#) → ANTLR_Print_grammarSpec(NormGrammarSpec(#))

/* Environment entry sort */
enum NormEntry | STRING(String) | NUM(Numeric) | BOOL(Bool) | INDEX(RuleIndex)

/* Normalize the ANTLR grammar spec */
func NormGrammarSpec(ANTLR_grammarSpec_sort) -> ANTLR_grammarSpec_sort
rule NormGrammarSpec(grammarSpec⟦ #DOC_COMMENT? #grammarType #id ; #prequelConstruct* #ruleSpec* #modeSpec* ⟧)
→
grammarSpec⟦ #grammarType #id ; #prequelConstruct*
                  ⟨ruleSpec*:Concat(NST-Rules(#ruleSpec*, {}), NormRules(#ruleSpec*, {"@id": STRING(UnwrapId(#id)), "@index": INDEX(IndexRules(#ruleSpec*))}))⟩ #modeSpec* ⟧

/* Normalize prequel constructs */
// TODO: first need to update the meta antlr parser.
//NormPrequelConstructs[$List[ANTLR_prequelConstruct_sort]] :: $List[ANTLR_prequelConstruct_sort];
//
//NormPrequelConstructs[{#L}%prequelConstruct*⟨⟩]
//→
//();
//
//NormPrequelConstructs[{#L}%prequelConstruct*⟨ #optionsSpec #prequelConstruct* ⟩]
//→
//NormPrequelConstructs[#prequelConstruct*];
//
//NormPrequelConstructs[{#L}%prequelConstruct*⟨ #delegateGrammars #prequelConstruct* ⟩]
//→
//{#L}%prequelConstruct*⟨ #delegateGrammars ⟨prequelConstruct*: NormPrequelConstructs[#prequelConstruct*]⟩ ⟩;
//
//NormPrequelConstructs[{#L}%prequelConstruct*⟨ #tokensSpec #prequelConstruct*⟩]
//→
//NormPrequelConstructs[#prequelConstruct*];
//
//NormPrequelConstructs[{#L}%prequelConstruct*⟨ #action #prequelConstruct*⟩]
//→
//NormPrequelConstructs[#prequelConstruct*];

// Normalize rules specification
func NormRules(List<ANTLR_ruleSpec_sort>, {String:NormEntry}) -> List<ANTLR_ruleSpec_sort>

  rule NormRules((#ruleSpec, #ruleSpec*...), #E)
  → Concat(NormRuleSpec(#ruleSpec, #E), NormRules(#ruleSpec*, #E))

  rule NormRules((), #E)
  → ()

/*
 * Normalize parser rule.
 *
 * Three passes are performed:
 * - the first pass replaces subrules by a reference to the new rule describing the subrule
 * - the second pass creates new parser rules corresponding to the subrules.
 * - the third pass creates token for string literals. (could be inlined but easier this way).
 */
func NormRuleSpec(ANTLR_ruleSpec_sort, {String:NormEntry}) -> List<ANTLR_ruleSpec_sort>

  rule NormRuleSpec(ruleSpec⟦ #DOC_COMMENT? #ruleModifiers? #RULE_REF #ARG_ACTION? #ruleReturns? #throwsSpec? #localsSpec?
                                    #rulePrequel* : #ruleAltList ; #exceptionHandler* #finallyClause? ⟧, #E)
  → (
      ruleSpec⟦ #ruleModifiers? #RULE_REF  #ARG_ACTION?  #ruleReturns? #throwsSpec? #localsSpec?
                         #rulePrequel* : ⟨ruleAltList:NormRuleAltList(#ruleAltList, {#E, "@rule":STRING(#RULE_REF)})⟩ ; #exceptionHandler* #finallyClause? ⟧,
    )


  rule NormRuleSpec(ruleSpec⟦ #lexerRule ⟧, #E)
  → ( ruleSpec⟦ #lexerRule ⟧, )

//--------- First Pass: eliminate subrules

// Iterates over rule alternatives
func NormRuleAltList(ANTLR_ruleAltList_sort, {String:NormEntry}) -> ANTLR_ruleAltList_sort
rule NormRuleAltList(ruleAltList⟦ #labeledAlt #ruleAltList_S1* ⟧, #E)
→ ruleAltList⟦
        ⟨labeledAlt:NormLabeledAlt(#labeledAlt, {#E, "@alt":NUM(1), "@unique": BOOL(IsEmpty(#ruleAltList_S1*))})⟩
        ⟨ruleAltList_S1*:NormRuleAltList_S1s(#ruleAltList_S1*, {#E, "@alt":NUM(2), "@unique": BOOL(FALSE)})⟩
  ⟧

//
func NormRuleAltList_S1s(List<ANTLR_ruleAltList_S1_sort>, {String:NormEntry}) -> List<ANTLR_ruleAltList_S1_sort>

  rule NormRuleAltList_S1s(ruleAltList_S1*⟦ | #labeledAlt #ruleAltList_S1* ⟧, {#E, "@alt":NUM(#count)})
  → ruleAltList_S1*⟦
      | ⟨labeledAlt:NormLabeledAlt(#labeledAlt, #E)⟩
      ⟨ruleAltList_S1*:NormRuleAltList_S1s(#ruleAltList_S1*, {#E, "@alt":NUM(Plus( #count, 1))})⟩⟧

  rule NormRuleAltList_S1s(ruleAltList_S1*⟦⟧, #E)
  → ruleAltList_S1*⟦⟧

// Normalize a labeled alternative. Ignore the label for now (TODO: could be used for better ADT value name)
func NormLabeledAlt(ANTLR_labeledAlt_sort, {String:NormEntry}) -> ANTLR_labeledAlt_sort
rule NormLabeledAlt(labeledAlt⟦ #alternative #labeledAlt_S1? ⟧, #E)
→ labeledAlt⟦ ⟨alternative:NormAlternative(#alternative, #E)⟩ #labeledAlt_S1? ⟧

// Normalize an alternative.
// Keep element options intact as they specify either associativity or failed semantic predicate
func NormAlternative(ANTLR_alternative_sort, {String:NormEntry}) -> ANTLR_alternative_sort
rule NormAlternative(alternative⟦ #elementOptions? #element* ⟧, #E)
→ alternative⟦ #elementOptions? ⟨element*:NormElements(#element*, {#E, "@sub":NUM(1)})⟩ ⟧

// Iterate over alternative elements.
func NormElements(List<ANTLR_element_sort>, {String:NormEntry}) -> List<ANTLR_element_sort>

  // Labeled element optionally followed by an ebnfSuffix
  rule NormElements(element*⟦ #labeledElement #element_A1_S1 #element* ⟧, #E)
  → NormLabeledElement(#labeledElement, #element_A1_S1, #element*, #E)

  // A string literal optionally followed by an ebnfSuffix. Replace by token.
  rule NormElements(element*⟦ #STRING_LITERAL #elementOptions? #element_A2_S1 #element* ⟧, #E)
  → element*⟦ ⟨atom:NormMakeToken(#STRING_LITERAL, #elementOptions?)⟩ #element_A2_S1 ⟨element*:NormElements(#element*, #E)⟩ ⟧

  // Element is an atom optionally followed by an ebnfSuffix. Leave it this way.
  rule NormElements(element*⟦ #atom #element_A2_S1 #element* ⟧, #E)
  → element*⟦ #atom #element_A2_S1 ⟨element*:NormElements(#element*, #E)⟩ ⟧

  // Ebnf
  // This is a subrule -> lift only if it contains at least two non-constant productions
  rule NormElements(element*⟦ #block #blockSuffix? #element* ⟧, {#E, "@index": INDEX({#I})})
  → NormBlock(TrivialBlock(#block, {#I}), #block, #blockSuffix?, #element*, #E)

  // Action or semantic predicate. Preserve.
  rule NormElements(element*⟦ #ACTION #QUESTION? #element* ⟧, #E)
  → element*⟦ #ACTION #QUESTION? ⟨element*:NormElements(#element*, #E)⟩ ⟧

  // No more elements.
  rule NormElements(element*⟦⟧, #E)
  → element*⟦⟧


// Normalize a block
func NormBlock(Bool, ANTLR_block_sort, List<ANTLR_blockSuffix_sort>, List<ANTLR_element_sort>, {String:NormEntry}) -> List<ANTLR_element_sort>

  // Trivial block: don't lift.
  rule NormBlock(TRUE, #block, #blockSuffix?, #element*, #E)
  → element*⟦ #block #blockSuffix? ⟨element*:NormElements(#element*, #E)⟩ ⟧

  // Not trivial block: lift
  rule NormBlock(FALSE, #block, #blockSuffix?, #element*, {#E, "@sub":NUM(#count)})
  → element*⟦
      ⟨atom:SubruleAtom(#E)⟩ ⟨element_A2_S1:SubruleSuffix(#blockSuffix?)⟩
      ⟨element*:NormElements(#element*, {#E,"@sub": NUM(Plus( #count, 1))})⟩⟧

// Normalize labeled eleement
func NormLabeledElement(ANTLR_labeledElement_sort, ANTLR_element_A1_S1_sort, List<ANTLR_element_sort>, {String:NormEntry}) ->  List<ANTLR_element_sort>

  rule NormLabeledElement(labeledElement⟦ #id #labeledElement_S1 #atom ⟧, #element_A1_S1, #element*, #E)
  → element*⟦ #id #labeledElement_S1 #atom  #element_A1_S1 ⟨element*:NormElements(#element*, #E)⟩ ⟧

  // TODO: implement Ebnf1ToBlockSuffix
/*
  rule NormLabeledElement(labeledElement⟦ #id #labeledElement_S1 #block ⟧, #element_A1_S1, #element*, {#E, "@index": INDEX({#I})})
  → element*⟦ #id #labeledElement_S1 ⟨block:NormBlock(TrivialBlock(#block, {#I}), #block, Ebnf1ToBlockSuffix(#element_A1_S1), #element*, #E)⟩ ⟧*/

//--------- Second Pass: Generate subrules
/*
// TODO: THIS IS WRONG!! must return ruleSpec*
rule NSR-RuleAltList(ruleAltList⟦ #labeledAlt #ruleAltList_S1* ⟧, #E)
→ ruleAltList⟦ ⟨ruleAltList:Concat(
    NSR-LabeledAlt(#labeledAlt, {#E, "@alt":NUM(1), "@unique": BOOL(IsEmpty(#ruleAltList_S1*))}),
    NSR-RuleAltList_S1s(#ruleAltList_S1*, {#E, "@alt":NUM(2), "@unique": BOOL(FALSE)}))⟩
⟧

//
rule NSR-RuleAltList_S1s(ruleAltList_S1*⟦⟧, #E) → ruleAltList_S1*⟦⟧

rule NSR-RuleAltList_S1s(ruleAltList_S1*⟦ | #labeledAlt #ruleAltList_S1*⟧, {#E, "@alt":NUM(#count)})
→ ruleAltList_S1*⟦ ⟨ruleAltList_S1*:Concat(
    NSR-LabeledAlt(#labeledAlt, #E),
    NSR-RuleAltList_S1s(#ruleAltList_S1*, {#E, "@alt":NUM(Plus( #count, 1))}))⟩
⟧

//
rule NSR-LabeledAlt(labeledAlt⟦ #alternative #labeledAlt_S1?⟧, #E)
→ NSR-Alternative(#alternative, #E)

//
rule NSR-Alternative(alternative⟦ #elementOptions? #element*⟧, #E)
→ NSR-Elements(#element*, {#E, "@sub":NUM(1)})

//
rule NSR-Elements(element*⟦⟧, #E)
→ element*⟦⟧

rule NSR-Elements(element*⟦ #labeledElement #element_A1_S1 #element* ⟧, #E)
→ NSR-LabeledElement(#labeledElement, #element*, #E)

rule NSR-Elements(element*⟦ #atom #element_A2_S1 #element*⟧, #E)
→ NSR-Elements(#element*, #E)

// This is a subrule -> generate new parser rule if non-trivial and recursively normalize
rule NSR-Elements(element*⟦ #block #blockSuffix? #element*⟧, {#E, "@index": INDEX({#I})})
→ NSR-Block(TrivialBlock(#block, {#I}), LOC({#L}), #block, #blockSuffix?, #element*, #E)

rule NSR-Elements(element*⟦ #ACTION #QUESTION? #element*⟧, #E)
→ NSR-Elements(#element*, #E)

// Labeled Element

rule NSR-LabeledElement(labeledElement⟦ #id #labeledElement_S1 #atom ⟧, #element*, #E)
→ NSR-Elements(#element*, #E)

rule NSR-LabeledElement(labeledElement⟦ #id #labeledElement_S1 #block ⟧, #element*, #E)
→ NSR-Elements(element*⟦ #block #element* ⟧, #E)

// Trivial block. Don't generate lifted rule
rule NSR-Block(TRUE, #LOC, #block, #blockSuffix?, #element*, #E)
→ NSR-Elements(#element*, #E)

// Non-Trivial block. Generate lifted rule
rule NSR-Block(FALSE, LOC({#L}), #block, #blockSuffix?, #element*, {#E, "@sub": NUM(#count)})
→ element*⟦ ⟨element*:Concat(
    NormRuleSpec(ruleSpec⟦ ⟨RULE_REF:SubruleRuleref(#E)⟩ : ⟨ruleBlock:Block2RuleBlock(#block)⟩ ; ⟧, #E),
    NSR-Elements(#element*, {#E,"@sub": NUM(Plus( #count, 1))}))⟩ ⟧*/

//--------- Third Pass: Generate tokens

//
func NST-Rules(#ruleSpec*: List<ANTLR_ruleSpec_sort>, #E: {String:Bool}) -> List<ANTLR_ruleSpec_sort>
→ NST-RuleSpecs(#ruleSpec*, #E, (env)->ruleSpec*⟦⟧)

func NST-RuleSpecs(List<ANTLR_ruleSpec_sort>, {String:Bool}, ({String:Bool})->List<ANTLR_ruleSpec_sort>) -> List<ANTLR_ruleSpec_sort>

  rule NST-RuleSpecs((), #E, #result)
  → #result(#E)

  rule NST-RuleSpecs((#ruleSpec, #ruleSpec*...), #E, #result)
  → NST-RuleSpec(#ruleSpec, #E, (env)->NST-RuleSpecs(#ruleSpec*, env, #result))

func NST-RuleSpec(ANTLR_ruleSpec_sort, {String:Bool}, ({String:Bool})->List<ANTLR_ruleSpec_sort>) -> List<ANTLR_ruleSpec_sort>

  rule NST-RuleSpec(ruleSpec⟦ #DOC_COMMENT? #ruleModifiers? #RULE_REF #ARG_ACTION? #ruleReturns? #throwsSpec? #localsSpec?
                              #rulePrequel* : #ruleAltList ; #exceptionHandler* #finallyClause? ⟧, #E, #result)
  → NST-RuleAltList(#ruleAltList, #E, #result)

  rule NST-RuleSpec(#lexerSpec, #E, #result)
  → #result(#E)

//
func NST-RuleAltList(ANTLR_ruleAltList_sort, {String:Bool}, ({String:Bool})->List<ANTLR_ruleSpec_sort>) -> List<ANTLR_ruleSpec_sort>
rule NST-RuleAltList(ruleAltList⟦ #labeledAlt #ruleAltList_S1* ⟧, #E, #result)
→ NST-LabeledAlt(#labeledAlt, #E, (env)->NST-RuleAltList_S1s(#ruleAltList_S1*, env, #result))

//
func NST-RuleAltList_S1s(List<ANTLR_ruleAltList_S1_sort>, {String:Bool}, ({String:Bool})->List<ANTLR_ruleSpec_sort>) -> List<ANTLR_ruleSpec_sort>

  rule NST-RuleAltList_S1s(ruleAltList_S1*⟦⟧, #E, #result)
  → #result(#E)

  rule NST-RuleAltList_S1s(ruleAltList_S1*⟦ | #labeledAlt #ruleAltList_S1* ⟧, #E, #result)
  → NST-LabeledAlt(#labeledAlt, #E, (env)->NST-RuleAltList_S1s(#ruleAltList_S1*, env, #result))

//
func NST-AltList(ANTLR_altList_sort, {String:Bool}, ({String:Bool})->List<ANTLR_ruleSpec_sort>) -> List<ANTLR_ruleSpec_sort>
rule NST-AltList(altList⟦ #alternative #altList_S1* ⟧, #E, #result)
→ NST-Alternative(#alternative, #E, (env)->NST-AltList_S1s(#altList_S1*, env, #result))

//
func NST-AltList_S1s(List<ANTLR_altList_S1_sort>, {String:Bool}, ({String:Bool})->List<ANTLR_ruleSpec_sort>) -> List<ANTLR_ruleSpec_sort>

  rule NST-AltList_S1s(altList_S1*⟦ | #alternative #altList_S1* ⟧, #E, #result)
  → NST-Alternative(#alternative, #E, (env)->NST-AltList_S1s(#altList_S1*, env, #result))

  rule NST-AltList_S1s(altList_S1*⟦ ⟧, #E, #result)
  → #result(#E)

//
func NST-LabeledAlt(ANTLR_labeledAlt_sort, {String:Bool}, ({String:Bool})->List<ANTLR_ruleSpec_sort>) -> List<ANTLR_ruleSpec_sort>
rule NST-LabeledAlt(labeledAlt⟦ #alternative #labeledAlt_S1? ⟧, #E, #result)
→ NST-Alternative(#alternative, #E, #result)

//
func NST-Alternative(ANTLR_alternative_sort, {String:Bool}, ({String:Bool})->List<ANTLR_ruleSpec_sort>) -> List<ANTLR_ruleSpec_sort>
rule NST-Alternative(alternative⟦ #elementOptions? #element* ⟧, #E, #result)
→ NST-Elements(#element*, #E, #result)

func NST-Elements(List<ANTLR_element_sort>, {String:Bool}, ({String:Bool})->List<ANTLR_ruleSpec_sort>) -> List<ANTLR_ruleSpec_sort>

  rule NST-Elements(element*⟦⟧, #E, #result)
  → #result(#E)

  rule NST-Elements(element*⟦ #labeledElement #element_A1_S1 #element* ⟧, #E, #result)
  → NST-LabeledElement(#labeledElement, #element*, #E, #result)

  rule NST-Elements(element*⟦ #STRING_LITERAL #elementOptions? #element_A2_S1 #element* ⟧, #E, #result)
  → if HasOption(MapGet(#E, #STRING_LITERAL))
      NST-Elements(#element*, #E, #result)
    else
      (ruleSpec⟦ ⟨TOKEN_REF:NormMakeTokenRef(#STRING_LITERAL)⟩ : #STRING_LITERAL ; ⟧,
       NST-Elements(#element*, {#E, #STRING_LITERAL:TRUE}, #result)...)


  rule NST-Elements(element*⟦ #atom #element_A2_S1 #element* ⟧, #E, #result)
  → NST-Elements(#element*, #E, #result)

  rule NST-Elements(element*⟦ ( #block_S1? #altList ) #blockSuffix? #element* ⟧, #E, #result)
  → NST-AltList(#altList, #E, (env)->NST-Elements(#element*, env, #result))

  rule NST-Elements(element*⟦ #ACTION #QUESTION? #element*⟧, #E, #result)
  → NST-Elements(#element*, #E, #result)

// Labeled Element
func NST-LabeledElement(ANTLR_labeledElement_sort, List<ANTLR_element_sort>, {String:Bool}, ({String:Bool})->List<ANTLR_ruleSpec_sort>) -> List<ANTLR_ruleSpec_sort>

  rule NST-LabeledElement(labeledElement⟦ #id #labeledElement_S1 #atom ⟧, #element*, #E, #result)
  → NST-Elements(element*⟦ #atom #element* ⟧, #E, #result)

  rule NST-LabeledElement(labeledElement⟦ #id #labeledElement_S1 #block ⟧, #element*, #E, #result)
  → NST-Elements(element*⟦ #block #element* ⟧, #E, #result)

// Helpers

func SubruleAtom(#E: {String:NormEntry}) -> ANTLR_atom_sort
→ atom⟦ ⟨RULE_REF:SubruleRuleref(#E)⟩ ⟧

//
func SubruleRuleref({String:NormEntry}) -> String
rule SubruleRuleref({#E,
                        "@rule": STRING(#rule), "@sub": NUM(#subCount),
                        "@alt":NUM(#altCount), "@unique": BOOL(#unique)})
→ if #unique
    ConcatString( #rule, "_S", FormatNumber(#subCount))
  else
    ConcatString( #rule, "_A", FormatNumber(#altCount), "_S", FormatNumber(#subCount))

//
func SubruleSuffix(List<ANTLR_blockSuffix_sort>) -> ANTLR_element_A2_S1_sort

  rule SubruleSuffix((ANTLR_blockSuffix(#ebnfSuffix),))
  → element_A2_S1⟦ #ebnfSuffix ⟧

  rule SubruleSuffix(())
  → ANTLR_element_A2_S1_A2

//
func Block2RuleBlock(ANTLR_block_sort) -> ANTLR_ruleBlock_sort
rule Block2RuleBlock(ANTLR_block(#LPAREN, (), ANTLR_altList(#alternative, #altList_S1*), #RPAREN))
→
//{#L}%ruleBlock⟨ #alternative #altList_S1* ⟩;
ANTLR_ruleBlock(ANTLR_ruleAltList(ANTLR_labeledAlt(#alternative, ()), AltList2RuleAltList(#altList_S1*)))


func AltList2RuleAltList(List<ANTLR_altList_S1_sort>) -> List<ANTLR_ruleAltList_S1_sort>

  rule AltList2RuleAltList((ANTLR_altList_S1(#OR, #alternative), #altList_S1*...))
  → (ANTLR_ruleAltList_S1(#OR, ANTLR_labeledAlt(#alternative, ())), AltList2RuleAltList(#altList_S1*)...)

  rule AltList2RuleAltList(())
  → ()

func NormMakeToken(String, List<ANTLR_elementOptions_sort>) -> ANTLR_atom_sort
rule NormMakeToken(#string, #elementOptions?) → atom⟦ ⟨TOKEN_REF:NormMakeTokenRef(#string)⟩ #elementOptions? ⟧

// TODO: generic algo for operators
func NormMakeTokenRef(#string:String) -> String
→
if Equal(#string, "'('")       "LPAR"
else if Equal(#string, "')'")  "RPAR"
else if Equal(#string, "':'")  "COLON"
else if Equal(#string, "'.'")  "DOT"
else if Equal(#string, "'..'") "DOTDOT"
else if Equal(#string, "'--'") "DASHDASH"
else if Equal(#string, "'::'") "COLONCOLON"
else if Equal(#string, "'#'")  "HASH"
else if Equal(#string, "'##'") "HASHHASH"
else if Equal(#string, "'++'") "PLUSPLUS"
else if Equal(#string, "'*'")  "STAR"
else if Equal(#string, "'+'")  "PLUS"
else if Equal(#string, "'?'")  "QUEST"
else if Equal(#string, "','")  "COMMA"
else if Equal(#string, "'|'")  "OR"
else if Equal(#string, "'&'")  "AND"
else if Equal(#string, "'->'") "ARROW"
else if Equal(#string, "'λ'")  "LAMBDA"
else if Equal(#string, "'@'")  "AT"
else
  ConcatString( "SL", UpCase( Replace( Rescape( #string), "-", "_")))
