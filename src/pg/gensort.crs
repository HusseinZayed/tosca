/*
 * Copyright (c) 2015 IBM Corporation.
 *
 * Generates sorts and basic printer from normalized ANTLR grammar.
 *
 * Note: the output is Text. It should be Crsx, when stable enough...
 */
MakePrinter[(

$Lax;

$CheckGrammar["net.sf.crsx.text.Text"];
$Use["text/Text.crs"];
$Use["std/core.crs"];
$Use["std/text.crs"];
$Use["std/list.crs"];
$Use["std/pair.crs"];
$Use["std/string.crs"];
$Use["pg/util.crs"];

/* Generates sorts and a basic printer for the given ANTLR grammar specification */
MakeSorts[ANTLR_grammarSpec_sort] :: Text;
MakeSorts[#]
→
{"@index": INDEX[IndexGrammar[#]]}MakeGrammarSpec[#];

/* Helper */
MakeGrammarSpec[ANTLR_grammarSpec_sort] :: Text;
{#E}MakeGrammarSpec[{#L}%grammarSpec⟦ #DOC_COMMENT? #grammarType #id ; #prequelConstruct* #ruleSpec* #modeSpec* ⟧]
→ {#E}MakeModuleId[UnwrapId[#id], ok¹.ThenSeqMap[ok¹, rule cont.MakeRuleSpec[rule, cont], #ruleSpec*, ok¹.%n⟦⟧]];

/* Generate Sort/Printer module id */

MakeModuleId[ANTLR_grammarSpec_sort] :: Text;
{#E}MakeModuleId[#id, ok.#[ok]]
→ %n⟦/* Generated File. */
import std::core
import std::listdef
import std::text
import std::text::Text4

«{#E; "@id": STRING[#id]}#[OK]»⟧; // TODO: must match CRSX syntax

/* `MakeRuleSpec[#rule, #cont] :: Text`
   Generates sort and printer for grammar rule
 */
MakeRuleSpec[ANTLR_ruleSpec_sort, Cont[Text]] :: Text;
{#E}MakeRuleSpec[{#L}%ruleSpec⟦ #DOC_COMMENT? #ruleModifiers? #RULE_REF #ARG_ACTION? #ruleReturns? #throwsSpec? #localsSpec?
                                #rulePrequel* : #ruleBlock ; #exceptionHandler* #finallyClause? ⟧, #cont]
→ {#E; "@ruleRef": STRING[#RULE_REF]}MakeSort[#ruleBlock, #cont];

{#E}MakeRuleSpec[{#L}%ruleSpec⟦ #FRAGMENT? #TOKEN_REF : #lexerRuleBlock ; ⟧, #cont]
→ {#E}ApplyCont[#cont];

<!--―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

 Generate sorts, printer sorts and printer rules.

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――-->

/* Generates sort and printer for parser rule by iterating over the grammar alternatives
   and incrementally building the printer in the environment.
 */
MakeSort[ANTLR_ruleSpec_sort, Cont[Text]] :: Text;
 {#E}MakeSort[#ruleBlock, #cont]
→ %n⟦¶¶enum «{#E}MakeSortName» «
   {#E; "@sortname" : TEXT[{#E}MakeSortName];
        "@sort"     : TEXT[%n⟪⟫];
        "@pt-name"  : TEXT[{#E}MakePrinterName];
        "@pt-rules" : TEXT[%n⟪⟫];
        "@pt-subs"  : TEXT[%n⟪⟫];
   }MakeForms[#ruleBlock, ok¹.MakeSortTail[ok¹, #cont]]»⟧;

// Retrieves the sort and printer from the environment and construct text
MakeSortTail[OK_SORT, Cont[Text]] :: Text;
{#E; "@sortname": TEXT[#sortname];
     "@sort"    : TEXT[#sort];
     "@pt-name" : TEXT[#printerName];
     "@pt-rules": TEXT[#printerRules];
     "@pt-subs" : TEXT[#printerSubs];}
MakeSortTail[OK, #cont]
→ %n⟦«#sort»¶¶func «#printerName»(«#sortname») -> Text4_text_sort«#printerRules»«#printerSubs»«{#E}ApplyCont[#cont]»⟧;

//
MakeForms[ANTLR_ruleBlock_sort, ok::OK_SORT.Text] :: Text;
{#E}MakeForms[{#L}%ruleBlock⟦ #alternative #labeledAlt_S1?  #ruleAltList_S1* ⟧, ok¹.#[ok¹]]
→ {#E}MakeForm[#alternative, #labeledAlt_S1?, 1, IsEmpty[#ruleAltList_S1*], ok¹ count¹.
      MakeRuleAltList_S1s[ok¹, count¹, #ruleAltList_S1*, o2¹.#[o2¹]]];

//
MakeRuleAltList_S1s[OK_SORT, $Numeric, $List[ANTLR_ruleAltList_S1_sort], ok::OK_SORT.Text] :: Text;

{#E}MakeRuleAltList_S1s[OK, #count, (), ok¹.#[ok¹]]
→ {#E}#[OK];

{#E}MakeRuleAltList_S1s[OK, #count, {#L}%ruleAltList_S1*⟦ | #alternative #labeledAlt_S1? #ruleAltList_S1* ⟧, ok¹.#[ok¹]]
→ {#E}MakeForm[#alternative, #labeledAlt_S1?, #count, FALSE, ok¹ count¹.
      MakeRuleAltList_S1s[ok¹, count¹, #ruleAltList_S1*, o2¹.#[o2¹]]];

//
MakeForm[ANTLR_alternative_sort, $List[ANTLR_labeledAlt_S1_sort] $Numeric, Boolean, ok::OK_SORT.Text] :: Text;

{#E; "@sort":TEXT[#sort]}MakeForm[{#L}%alternative⟦ #element* ⟧, #labeledAlt_S1?, #count, #unique, ok¹ count¹.#[ok¹, count¹]]
→ {#E;
    "@sort"    : TEXT[%n⟦«#sort» | «{#E}MakeAlternativeName[#labeledAlt_S1?, #count, #unique]»⟧];
    "@freshes" : TEXTS[()]; // Printer rule fresh variable
    "@plhs"    : TEXTS[()]; // Printer rule lhs arguments
    "@prhs"    : TEXTS[()]; // Printer rule rhs
    "@inblock" : NO
  }MaybeMakeArguments[#element*, ok¹.MakePrintingRule[ok¹, {#E}MakeAlternativeName[#labeledAlt_S1?, #count, #unique], o2¹.#[o2¹, $[Plus, #count, 1]]]];

//
MakePrintingRule[OK_SORT, Text, ok::OK_SORT.Text] :: Text;
{#E;
  "@pt-rules" : TEXT[#printerRules];
  "@pt-name"  : TEXT[#printerName];
  "@freshes"  : TEXTS[#freshes];
  "@plhs"     : TEXTS[#printerRuleLHS];
  "@prhs"     : TEXTS[#printerRuleRHS]}
MakePrintingRule[OK, #altName, ok¹.#[ok¹]]
→ {#E;
    "@pt-rules" : TEXT[%n⟦«#printerRules»¶«MakePrintFreshes[#freshes]»rule «#printerName»(«#altName»(«ReverseTextFold[#printerRuleLHS, %n⟪, ⟫]»)) → «Text-Text[Text-ReverseConcat[#printerRuleRHS]]»⟧];
  }#[OK];

//
MakePrintFreshes[$List[Text]] :: Text;
MakePrintFreshes[()]
→ %n⟦⟧;

MakePrintFreshes[(#fresh; #freshes)]
→ %n⟦⟧;

/* Iterates over the elements (maybe none) of an alternative.
 */
MaybeMakeArguments[$List[ANTLR_element_sort], ok::OK_SORT.Text] :: Text;

{#E; "@sort":TEXT[#sort]}MaybeMakeArguments[(), ok¹.#[ok¹]]
→ {#E;"@sort": TEXT[%n⟦«#sort»⟧]}#[OK];

{#E; "@sort":TEXT[#sort]}MaybeMakeArguments[%element*⟨ #element #element* ⟩, ok¹.#[ok¹]]
→ {#E;
    "@sort"       : TEXT[%n⟦«#sort»(⟧];    // Have at least one alternative
    "@sep"        : TEXT[%n⟦⟧];         // Current separator between data forms
    "@block-count": NUM[0];             // Count the number of subrules for generating unique names
    "@sublist"    : WRAPPER[t x.x];       // Use to unfused elements
  }MakeArguments[OK, 1, %element*⟨ #element #element* ⟩, ok¹.MakeCloseArguments[ok¹, o2¹.#[o2¹]]];

/* Done iterating over alternative elements. Close sort bracket
*/
MakeCloseArguments[OK_SORT, ok::OK_SORT.Text] :: Text;
{#E; "@sort":TEXT[#sort]}MakeCloseArguments[OK, o2¹.#[o2¹]]
→
{#E; "@sort":TEXT[%n⟦«#sort»)⟧]}#[OK];

//
MakeArguments[OK_SORT, $Numeric, $List[ANTLR_element_sort], ok¹::OK_SORT.Text] :: Text;

{#E}MakeArguments[OK, #count, (), ok¹.#[ok¹]]
→ {#E}#[OK];

{#E; "@index": INDEX[{#I}RULEINDEX]}
MakeArguments[OK, #count, %element*⟨ #element #element* ⟩, ok¹.#[ok¹]]
→ {#E; 
     "@binders"    : TEXTS[()];          // Collect <binds> variables
  }MaybeMakeArgument[IsFused[#element, #element*, {#I}RULEINDEX], {#I}IsSugarElement[#element],  #element, #count, ok¹ count.
      MakeArguments[ok¹, count, #element*, o2¹.#[o2¹]]];

//
MaybeMakeArgument[Boolean /* fused? */, Boolean /* sugar? */, ANTLR_element_sort, $Numeric, ok¹::OK_SORT count::$Numeric.Text] :: Text;

// Common case: element is not fused and not a sugar. It is a binder?
{#E}MaybeMakeArgument[FALSE, FALSE, #element, #count, ok¹ count.#[ok¹, count]]
→ {#E}MaybeMakeBinderArgument[GetElementOptionElement[#element, "boundvar"], #element, #count, ok¹ count.#[ok¹, count]];

/* The first list argument has been fused but not sugar. Unfused by extracting it.
   Only update the right hand-side as the lhs metavariable is reused
 */
{#E; "@prhs": TEXTS[#printerRHS]; "@index": INDEX[#index]}
MaybeMakeArgument[TRUE, FALSE, #element, #count, ok¹ count.#[ok¹, count]]
→ {#E; "@sublist": WRAPPER[t x.%n⟦Tail<«t»>(«x»)⟧];
       "@prhs": TEXTS[({#E}MakeRulerefText[UnSOME[GetRefElement[#element, (), #index]], #count, (), FALSE, t x.%n⟦Head<«t»>(«x»)⟧, MakeSortName2[{#E}EnvString["@id"], UnSOME[GetRefElement[#element, (), #index]]]]; #printerRHS)]
  }#[OK, #count];

// The argument is sugar. Continue: it won't be added to sort but to printer.
{#E}MaybeMakeArgument[#fused, TRUE, #element, #count, ok¹ count.#[ok¹, count]]
→ {#E}MakeArgument[#element, #count, ok¹.#[ok¹, #count]];

// Check element option is <bound=variable>
MaybeMakeBinderArgument[$List[ElementOption], ANTLR_element_sort, $Numeric, ok¹::OK_SORT count::$Numeric.Text] :: Text;

// No binder option. Could it be binds?
{#E}MaybeMakeBinderArgument[(), #element, #count, ok¹ count.#[ok¹, count]]
→ {#E}MaybeMakeBindsArgument[GetElementOptionElement[#element, "bound"], #element, #count, ok¹ count.#[ok¹, count]];

/* Yes binder option (only one).
*/
{#E; "@index": INDEX[#index]}
MaybeMakeBinderArgument[(BINDER[#binder];), #element, #count, ok¹ count.#[ok¹, count]]
→ {#E}MakeBinderArgument[#binder, MakeBinderKey[#binder], GetRefElement[#element, (), #index], #count, ok¹ count.#[ok¹, count]];

/* Handle <boundvar=x>:

  For the printing rule: get a fresh new variable to get a new name. Limit binder to
  token, and due to CRSX sort system limitation, the fresh variable sort is $String
  Due to current crsx limitation, there is no guarantee the name respects the grammar, and
  that the name is preserved. Fine for now...

   Don't add sort argument.

 */
MakeBinderArgument[$String, $String, Option[$String], $Numeric, ok¹::OK_SORT count::$Numeric.Text] :: Text;

// Binder on sugar: that's an error
{#E}MakeBinderArgument[#binder, #key, NONE, #count, ok¹ count.#[ok¹, count]]
→ Special_error[%n⟦Invalid binder option on an element that is either a constant or skipped.⟧];

-[Data[#key]]:
{#E;
  "@id"      : STRING[#id];
  "@freshes" : TEXTS[#freshes];
  "@prhs"    : TEXTS[#rhs];
}MakeBinderArgument[#binder, #key, SOME[#ruleref], #count, ok¹ count.#[ok¹, count]]
→ 
{#E;
    #key       : BINDER[#ruleref];
    "@freshes" : TEXTS[(%n⟦[String]⟧; #freshes)];
    "@prhs"    : TEXTS[(Text-String2[%n⟦Show<String>(†«#binder»)⟧]; #rhs)];
  }#[OK, #count];

// Check element option is list of <bound=variable>
MaybeMakeBindsArgument[$List[ElementOption], ANTLR_element_sort, $Numeric, ok¹::OK_SORT count::$Numeric.Text] :: Text;

// No <bound> option. Check for variable
{#E}MaybeMakeBindsArgument[(), #element, #count, ok¹ count.#[ok¹, count]]
→ {#E}MakeRawArgument[OK, #element, #count, ok¹ count.#[ok¹, count]];

{#E; "@sort":TEXT[#sort]; "@sep":TEXT[#sep]}
MaybeMakeBindsArgument[(#binds; #bindss), #element, #count, ok¹ count.#[ok¹, count]]
→ {#E;
    "@sort"    : TEXT[%n⟦«#sort»«#sep»[⟧];
    "@sep"     : TEXT[%n⟦] -> ⟧]
  }MakeBindsArguments[OK, (#binds; #bindss), ok¹.
   MakeRawArgument[ok¹, #element, #count, ok¹ count.#[ok¹, count]]];

MakeBindsArguments[OK_SORT, $List[ElementOption], ok¹::OK_SORT.Text] :: Text;

{#E}MakeBindsArguments[OK, (), ok¹.#[ok¹]]
→ {#E}#[OK];

{#E}MakeBindsArguments[OK, (BINDS[#binder]; #binds), ok¹.#[ok¹]]
→ {#E}MakeBindsArgument[#binder, ok¹.MakeBindsArguments[ok¹, #binds, ok¹.#[ok¹]]];

MakeBindsArgument[$String, ok¹::OK_SORT.Text] :: Text;

{#E;
  "@sort"    : TEXT[#sort];
  "@binders" : TEXTS[#binders];
}MakeBindsArgument[#binder, ok¹.#[ok¹]]
→ {#E;
    "@sort"    : TEXT[%n⟦«#sort» String⟧];
    "@binders" : TEXTS[(%n⟦†«#binder»⟧; #binders)];
  }#[OK];

// Check element option is <variable>
// TODO: should be done earlier, to avoid generating a data constructor
//MaybeMakeVariableArgument[$List[ElementOption], ANTLR_element_sort, $Numeric, ok¹::OK_SORT count::$Numeric.Text] :: Text;
//
//// Common case: element has no options, and not fused. This is a raw element
//{#E}MaybeMakeVariableArgument[(), #element, #count, ok¹ count.#[ok¹, count]]
//→ {#E}MakeRawArgument[OK, #element, #count, ok¹ count.#[ok¹, count]];
//
//{#E; "@plhs": TEXTS[#printerLHS]; "@prhs": TEXTS[#printerRHS]; "@sort":TEXT[#sort]}
//MaybeMakeVariableArgument[(#variable; #rest), #element, #count, ok¹ count.#[ok¹, count]]
//→ {#E;
//    "@sort": TEXT[%n⟦«#sort»x⟧];
//    "@plhs": TEXTS[(%n⟦x⟧; #printerLHS)];
//    "@prhs": TEXTS[(Text-Embed[%n⟦x⟧]; #printerRHS)]}#[OK, $[Plus, #count, 1]];

// Common case: element has no options, and not fused. Make regular argument
MakeRawArgument[OK_SORT, ANTLR_element_sort, $Numeric, ok¹::OK_SORT count::$Numeric.Text] :: Text;

{#E; "@sort":TEXT[#sort]; "@sep":TEXT[#sep]}
MakeRawArgument[OK, #element, #count, ok¹ count.#[ok¹, count]]
→ {#E;
    "@sort" : TEXT[%n⟦«#sort»«#sep»⟧];
    "@sep"  : TEXT[%n⟦, ⟧]
  }MakeArgument[#element, #count, ok¹.#[ok¹, $[Plus, #count, 1]]];

//
MakeArgument[ANTLR_element_sort, $Numeric, ok¹::OK_SORT.Text] :: Text;

// labeled element with optional ebnf suffix
{#E; "@plhs": TEXTS[#printerLHS]; "@inblock":#inblock}
MakeArgument[{#L}%element⟦ #labeledElement #element_A1_S1 ⟧, #count, ok¹.#[ok¹]]
//→ {#E; "@plhs": TEXTS[(MakeMetaVar[#count, #binders, FALSE]; #printerLHS)]}MakeArgFromAtom[GetAtom[#labeledElement], MapToList1[#element_A1_S1, #inblock], #count, ok¹.#[ok¹]];
→ {#E}MakeArgFromAtom[GetAtom[#labeledElement], MapToList1[#element_A1_S1, #inblock], #count, ok¹.#[ok¹]];

// atom with optional ebnf
{#E; "@inblock":#inblock}
MakeArgument[{#L}%element⟦ #atom #element_A2_S1 ⟧, #count, ok¹.#[ok¹]]
→ {#E}MakeArgFromAtom[#atom, MapToList2[#element_A2_S1, #inblock], #count, ok¹.#[ok¹]];

// A trivial block with no suffix: just inlined.
{#E}MakeArgument[{#L}%element⟦ #block ⟧, #count, ok¹.#[ok¹]]
→ {#E}MakeArgFromBlock[#block, #count, ok¹.#[ok¹]];

// A trivial block with suffix: generate printing rule for block and apply it.
{#E}MakeArgument[{#L}%element⟦ #block #blockSuffix ⟧, #count, ok¹.#[ok¹]]
→ {#E}MakeArgFromSuffixedBlock[#block, #blockSuffix, #count, ok¹.#[ok¹]];

// Skip action...
{#E}MakeArgument[{#L}%element⟦ #ACTION #QUESTION? ⟧, #count, ok¹.#[ok¹]]
→ {#E}#[OK];

//
MakeArgFromAtom[ANTLR_atom_sort, Boolean /* Is list? */, $Numeric, ok::OK_SORT.Text] :: Text;

{#E; "@sort": TEXT[#sort]; "@plhs": TEXTS[#printerLHS]; "@prhs": TEXTS[#printerRHS]}
MakeArgFromAtom[{#L}%atom⟦ #STRING_LITERAL #elementOptions? ⟧, TRUE, #count, ok¹.#[ok¹]]
→ {#E; "@sort":TEXT[%n⟦«#sort»List<String>⟧];
       "@plhs": TEXTS[(MakeMetaVar[#count, (), FALSE]; #printerLHS)];
       "@prhs": TEXTS[(MakeTerminalText[#count, (), TRUE]; #printerRHS)]
  }#[OK];

// String literal are constants. Print it
{#E; "@plhs": TEXTS[#printerLHS]; "@prhs": TEXTS[#printerRHS]}
MakeArgFromAtom[{#L}%atom⟦ #STRING_LITERAL #elementOptions? ⟧, FALSE, #count, ok¹.#[ok¹]]
→ {#E; "@prhs": TEXTS[(StringToText[#STRING_LITERAL]; #printerRHS)]}#[OK];
//→ {#E; "@plhs": TEXTS[(MakeMetaVar[#count, (), FALSE]; #printerLHS)];
//       "@prhs": TEXTS[(StringToText[#STRING_LITERAL]; #printerRHS)]
//  }#[OK];

// List of token ref.
{#E; "@sort": TEXT[#sort]; "@plhs": TEXTS[#printerLHS]; "@prhs": TEXTS[#printerRHS]}
MakeArgFromAtom[{#L}%atom⟦ #TOKEN_REF #elementOptions? ⟧, TRUE, #count, ok¹.#[ok¹]]
→
{#E; "@sort":TEXT[%n⟦«#sort»List<String>⟧];
       "@plhs": TEXTS[(MakeMetaVar[#count, (), FALSE]; #printerLHS)];
       "@prhs": TEXTS[(MakeTerminalText[#count, (), TRUE]; #printerRHS)]
  }#[OK];

{#E; "@index": INDEX[{#I}RULEINDEX]}
MakeArgFromAtom[{#L}%atom⟦ #TOKEN_REF #elementOptions? ⟧, FALSE, #count, ok¹.#[ok¹]]
→ {#E}MakeArgFromTokenRef[{#I}IsConstantAtom[%atom⟦ #TOKEN_REF ⟧], #TOKEN_REF, #count, ok¹.#[ok¹]];

{#E; "@sort": TEXT[#sort]; "@plhs": TEXTS[#printerLHS]; "@prhs": TEXTS[#printerRHS]; "@sublist": WRAPPER[t x.#wrap[t, x]]}
MakeArgFromAtom[{#L}%atom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧, TRUE, #count, ok¹.#[ok¹]]
→ {#E; "@sort": TEXT[%n⟦«#sort»List<«MakeSortName2[{#E}EnvString["@id"], #RULE_REF]»>⟧];
       "@plhs": TEXTS[(MakeMetaVar[#count, (), FALSE]; #printerLHS)];
       "@prhs": TEXTS[({#E}MakeRulerefText[#RULE_REF, #count, (), TRUE, t x.#wrap[t, x], MakeSortName2[{#E}EnvString["@id"], #RULE_REF]]; #printerRHS)]}#[OK];

{#E;
  "@sort": TEXT[#sort]; "@plhs": TEXTS[#printerLHS];
  "@prhs": TEXTS[#printerRHS]; "@sublist": WRAPPER[t x.#wrap[t, x]];
  "@binders": TEXTS[#binders]
}MakeArgFromAtom[{#L}%atom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧, FALSE, #count, ok¹.#[ok¹]]
→ {#E; "@sort": TEXT[%n⟦«#sort»«MakeSortName2[{#E}EnvString["@id"], #RULE_REF]»⟧];
       "@plhs": TEXTS[(MakeMetaVar[#count, #binders, FALSE]; #printerLHS)];
       "@prhs": TEXTS[({#E}MakeRulerefText[#RULE_REF, #count, #binders, FALSE, t x.#wrap[t, x], MakeSortName2[{#E}EnvString["@id"], #RULE_REF]]; #printerRHS)]}#[OK];

MakeArgFromTokenRef[Boolean, $String, $Numeric, ok¹::OK_SORT.Text] :: Text;

{#E; "@prhs": TEXTS[#printerRHS]}MakeArgFromTokenRef[TRUE, #token, #count, ok¹.#[ok¹]]
→  {#E; "@prhs": TEXTS[({#E}TokenRefToText[#token]; #printerRHS)]}#[OK];

{#E;
    "@sort": TEXT[#sort]; "@plhs": TEXTS[#printerLHS]; "@prhs": TEXTS[#printerRHS];
    "@binders": TEXTS[#binders]
}MakeArgFromTokenRef[FALSE, #token, #count, ok¹.#[ok¹]]
→ {#E; "@sort": TEXT[%n⟦«#sort»String⟧];
       "@plhs": TEXTS[(MakeMetaVar[#count, #binders, FALSE]; #printerLHS)];
       "@prhs": TEXTS[(MakeTerminalText[#count, #binders, FALSE]; #printerRHS)]}#[OK];

MakeArgFromSuffixedBlock[ANTLR_block_sort, ANTLR_blockSuffix_sort, $Numeric, ok¹::OK_SORT.Text] :: Text;

/* The block has to be trivial with only one alternative. Something like (C p)*
 * Generate an helper rule printing the constant tokens
 */
{#E; "@block-count": NUM[#blkcnt]; "@index": INDEX[#index]}
MakeArgFromSuffixedBlock[%block⟦ ( #element* ) ⟧, #blockSuffix, #count, ok¹.#[ok¹]]
→ {#E; "@block-count": NUM[$[Plus, #blkcnt, 1]]}MakeArgFromSuffixedBlock1[GetRefElements[#element*, #index], #element*, #blkcnt, #count, ok¹.#[ok¹]];

MakeArgFromSuffixedBlock1[Option[$String], $List[ANTLR_element_sort], $Numeric, ok¹::OK_SORT.Text] :: Text;

{#E}MakeArgFromSuffixedBlock1[NONE, #element*, #blkcnt, #count, ok¹.#[ok¹]] → $[Error, "constant subrules not supported yet"];

{#E; "@id": STRING[#id]; "@index": #index}
MakeArgFromSuffixedBlock1[SOME[#ruleRef], #element*, #blkcnt, #count, ok¹.#[ok¹]]
→ {#E}MakeArgFromSuffixedBlock2[MakeBlockRuleName[#ruleRef, #blkcnt], #ruleRef,
       MakeSortForBlock[#id, MakePrinterName2[#id, MakeBlockRuleName[#ruleRef, #blkcnt]],
                        #ruleRef,
                        UnSOME[{#E; "@plhs": TEXTS[()]; "@prhs": TEXTS[()]; "@inblock":YES}MaybeMakeArguments[#element*, ok¹.ThenGetSome[ok¹, "@prhs"]]]],
       #count, ok¹.#[ok¹]];

MakeArgFromSuffixedBlock2[$String, $String, Pair[Text, Text], $Numeric, ok¹::OK_SORT.Text] :: Text;

{#E; "@sort": TEXT[#sort]; "@id": STRING[#id]; "@plhs": TEXTS[#printerLHS]; "@prhs": TEXTS[#printerRHS]; "@sublist": WRAPPER[t x.#wrap[t, x]]; "@pt-subs":TEXT[#ptsubs]}
MakeArgFromSuffixedBlock2[#blockRuleRef, #ruleRef, PairCons[#blocksort, #printer], #count, ok¹.#[ok¹]]
→ {#E; "@sort": TEXT[%n⟦«#sort»List<«MakeSortName2[#id, #ruleRef]»>⟧];
       "@plhs": TEXTS[(MakeMetaVar[#count, (), FALSE]; #printerLHS)];
       "@prhs": TEXTS[({#E}MakeRulerefText[#blockRuleRef, #count, (), TRUE, t x.#wrap[t, x], MakeSortName2[#id, #ruleRef]]; #printerRHS)];
       "@pt-subs": TEXT[%n⟨‹#ptsubs›‹#blocksort›‹#printer›⟩]}#[OK];

MakeSortForBlock[$String, Text, $String, $StringEntry] :: Pair[Text/* sort */, Text /* printer */];
MakeSortForBlock[#id, #name, #ruleRef, TEXTS[#prhs]]
→ PairCons[
  %n⟦¶func «#name»(«MakeSortName2[#id, #ruleRef]») -> Text4_text_sort⟧,
  %n⟦¶rule «#name»(#1) → «Text-Text[Text-ReverseConcat[#prhs]]»⟧];

// Helpers

//
MapToList1[%element_A1_S1⟦ #ebnfSuffix ⟧, NO]  → TRUE;
MapToList1[%element_A1_S1⟦ ⟧, NO]              → FALSE;
MapToList1[%element_A1_S1⟦ #ebnfSuffix ⟧, YES] → FALSE;
MapToList1[%element_A1_S1⟦ ⟧, YES]             → FALSE;

//
MapToList2[%element_A2_S1⟦ #ebnfSuffix ⟧, NO]  → TRUE;
MapToList2[%element_A2_S1⟦ ⟧, NO]              → FALSE;
MapToList2[%element_A2_S1⟦ #ebnfSuffix ⟧, YES] → FALSE;
MapToList2[%element_A2_S1⟦ ⟧, YES]             → FALSE;

// Extract atom from labeled element
GetAtom[ANTLR_labeledElement_sort] :: ANTLR_atom_sort;
GetAtom[{#L}%labeledElement⟦ #id #labeledElement_S1 #atom  ⟧] → #atom;
GetAtom[{#L}%labeledElement⟦ #id #labeledElement_S1 #block ⟧] → {#L}Special_error[%n⟦Subrules are not allowed.⟧];

//
{#E}EnvString[#key] → EnvString2[$[{#E}Get, #key, STRING[""]]];

EnvString2[STRING[#value]] → #value;

//
MakeSortName :: Text;
-[Data[#ruleRef, #id]]:
{#E; "@id": STRING[#id]; "@ruleRef": STRING[#ruleRef]}
MakeSortName
→ StringToText[$[:, GetPrefix[#id], #ruleRef, GetSortSuffix]];

//
MakeSortName2 :: Text;
-[Data[#ruleRef, #id]]:
MakeSortName2[#id, #ruleRef]
→ StringToText[$[:, GetPrefix[#id], #ruleRef, GetSortSuffix]];

MakeAlternativeName[$List[ANTLR_labeledAlt_S1_sort], $Numeric, Boolean] :: Text;

-[Data[#ruleRef, #id]]:
{#E; "@id": STRING[#id]}
MakeAlternativeName[(ANTLR_labeledAlt_S1[#POUND, #altid];), #count, #unique]
→ StringToText[$[:, GetPrefix[#id], UnwrapId[#altid]]];

-[Data[#ruleRef, #id]]:
{#E; "@id": STRING[#id]; "@ruleRef": STRING[#ruleRef]}
MakeAlternativeName[(), #count, FALSE]
→ StringToText[$[:, GetPrefix[#id], #ruleRef, "_A", $[FormatNumber, #count]]];

-[Data[#ruleRef, #id]]:
{#E; "@id": STRING[#id]; "@ruleRef": STRING[#ruleRef]}
MakeAlternativeName[(), #count, TRUE]
→ StringToText[$[:, GetPrefix[#id], #ruleRef]];

MakeBinderKey[$String] :: $String;
MakeBinderKey[#binder] → $[:, "/", #binder];

<!--―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

 Printer helpers

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――-->

// Generate printer function name corresponding to the given ruleref
MakePrinterName :: Text;

{#E; "@id": STRING[#id]; "@ruleRef": STRING[#ruleRef]}
MakePrinterName  → MakePrinterName2[#id, #ruleRef];

// Generate printer function name corresponding to the given ruleref
MakePrinterName2[$String, $String] :: Text;
-[Data[#ruleRef, #id]]: MakePrinterName2[#id, #ruleRef] → StringToText[$[:, #id, "_Print_", #ruleRef]];

// Print metavar, optionally with binders
MakeMetaVar[$Numeric, List[Text], Boolean /* Whether to only apply binders */] :: Text;
MakeMetaVar[#count, #binders, #applyOnly]
→ %n⟦«If[#applyOnly,  %n⟪⟫, MakeMetaBinders[#binders]]»#«NumberToText[#count]»«MakeMetaArgs[#binders]»⟧;

//
MakeMetaArgs[List[Text]] :: Text;
MakeMetaArgs[()]           → %n⟦⟧;
MakeMetaArgs[(#arg;#args)]
→ %n⟦[«ReverseTextFold[(#arg;#args), %n⟪, ⟫]»]⟧;

//
MakeMetaBinders[List[Text]] :: Text;
MakeMetaBinders[()]           → %n⟦⟧;
MakeMetaBinders[(#arg;#args)] → %n⟦[«ReverseTextFold[(#arg;#args), %n⟪ ⟫]»]->⟧;

//
MakeTerminalText[$Numeric, $List[Text], Boolean] :: Text;
MakeTerminalText[#count, #binders, FALSE]
→ Text-String2[MakeMetaVar[#count, #binders, TRUE]];
  
MakeTerminalText[#count, (), TRUE]
→ Text-String[%n⟦TextFold(Map<String Text4_text_sort>((x) -> StringToText(x), «MakeMetaVar[#count, (), TRUE]»), «Text-Text[%n⟪ ⟫]»)⟧];

MakeRulerefText[$String, $Numeric, $List[Text], Boolean /* list? */, x::Text.Text, Text /* list sort */] :: Text;

{#E}MakeRulerefText[#Ruleref, #count, #binders, FALSE, t x.#wrap[t, x], #sort]
→ Text-String[%n⟦«{#E; "@ruleRef": STRING[#Ruleref]}MakePrinterName»(«#wrap[#sort, MakeMetaVar[#count, #binders, TRUE]]»)⟧];

{#E}MakeRulerefText[#ruleRef, #count, (), TRUE, t x.#wrap[t, x], #sort]
→   Text-String[%n⟦TextFold(Map<«#sort» Text4_text_sort>((x) ->«{#E; "@ruleRef": STRING[#ruleRef]}MakePrinterName»(x), «#wrap[#sort, MakeMetaVar[#count, (), TRUE]]»), «Text-Text[%n⟪ ⟫]»)⟧];
 
/* Generate an unique fake rule name for block. */
MakeBlockRuleName[$String, $Numeric] :: $String;
-[Data[#ruleRef, #blockCount]]:
MakeBlockRuleName[#parentRuleRef, #blockCount]
→ $[:, #parentRuleRef, "_S", $[FormatNumber, #blockCount]];

TokenRefToText[$String] :: Text;
{#E; "@index": INDEX[{#I}RULEINDEX]}TokenRefToText[#tokenRef] → %n⟦ †«UnQuote[UnSOME[{#I}GetConstantTokenRef[#tokenRef]]]» ⟧;

UnQuote[$String] :: $String;
UnQuote[#] → RemoveFirstChar[RemoveLastChar[#]];

GetPrefix[$String] :: Text;
GetPrefix[#id] → $[:, #id, $[Get, "prefixsep", "_"]];

GetSortSuffix :: Text;
GetSortSuffix → $[Get, "sortsuffix", "_sort"];


)]
