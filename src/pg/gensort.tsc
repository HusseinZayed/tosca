/*
 * Copyright (c) 2015 IBM Corporation.
 *
 * Generates sorts and basic printer from normalized ANTLR grammar.
 *
 */

import std::text::Text4
import std::core
import std::text
import std::listdef
import std::pairdef
import std::string
import std::num
import std::string
import pg::util
import pg::ANTLR

// --- Environment
enum SortEnvEntry | STRING(String) | INDEX(RuleIndex) | TEXT(Text4_text_sort) | TEXTS(List<Text4_text_sort>) | BOOL(Bool) | NUM(Numeric)
              | WRAPPER((Text4_text_sort Text4_text_sort)->Text4_text_sort) | BOUNDVAR(String, Text4_text_sort)
type SortEnv = {String:SortEnvEntry}

/* Generates sorts and a basic printer for the given ANTLR grammar specification */
func MakeSorts(#: ANTLR_grammarSpec_sort) -> Text4_text_sort
→ SMakeGrammarSpec(#, {"@index": INDEX(IndexGrammar(#))})

/* Helper */
func SMakeGrammarSpec(ANTLR_grammarSpec_sort, SortEnv) -> Text4_text_sort
rule SMakeGrammarSpec(grammarSpec⟦ #DOC_COMMENT? #grammarType #id ; #prequelConstruct* #ruleSpec* #modeSpec* ⟧, #E)
→ SMakeModuleId(UnwrapId(#id), #E, (env)->SMakeRuleSpecs(#ruleSpec*, env))

/* Generate Sort/Printer module id */

func SMakeModuleId(#id: String, #E: SortEnv, #cont: (SortEnv)->Text4_text_sort) -> Text4_text_sort
→ text⟦/* Generated File. */
import std::core
import std::listdef
†⟨IfDef( "notext", ()->text⟦⟧,
  ()->text⟦
import std::text::Text4
import std::text⟧)⟩
†⟨IfDef("import", ()->text⟦⟨STRING: Rescape(GetEnv("import", ""))⟩⟧, ()->text⟦⟧)⟩
†⟨#cont({#E, "@id": STRING(#id)})⟩⟧

/* Generates sort and printer for grammar rules */
func SMakeRuleSpecs(List<ANTLR_ruleSpec_sort>, SortEnv) -> Text4_text_sort

  rule SMakeRuleSpecs(ruleSpec*⟦ #ruleSpec #ruleSpec* ⟧, #E)
  → SMakeRuleSpec(#ruleSpec, #E, (env)->SMakeRuleSpecs(#ruleSpec*, env))

  rule SMakeRuleSpecs(ruleSpec*⟦ ⟧, #E)
  → text⟦⟧

/* Generates sort and printer for grammar rule */
func SMakeRuleSpec(ANTLR_ruleSpec_sort, SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule SMakeRuleSpec(ruleSpec⟦ #DOC_COMMENT? #ruleModifiers? #RULE_REF #ARG_ACTION? #ruleReturns? #throwsSpec? #localsSpec?
                              #rulePrequel* : #ruleBlock ; #exceptionHandler* #finallyClause? ⟧, #E, #cont)
  → if IsStringRulePrequels(#rulePrequel*)
      #cont(#E)
    else
      SMakeSort(#ruleBlock, {#E, "@ruleRef": STRING(#RULE_REF)}, #cont)

  rule SMakeRuleSpec(ruleSpec⟦ #FRAGMENT? #TOKEN_REF : #lexerRuleBlock ; ⟧, #E, #cont)
  → #cont(#E)

/*―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

 Generate sorts, printer sorts and printer rules.

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――*/

/* Generates sort and printer for parser rule by iterating over the grammar alternatives
   and incrementally building the printer in the environment.
 */
func SMakeSort(#ruleBlock: ANTLR_ruleBlock_sort, #E: SortEnv, #cont: (SortEnv)->Text4_text_sort) -> Text4_text_sort
→ text⟦

†⟨IfDef("location", ()->text⟦@⟨STRING: GetEnv("location", "")⟩⟧, ()->text⟦⟧)⟩
enum †⟨SMakeSortName(#E)⟩ †⟨SMakeForms(#ruleBlock, {#E, "@sortname" : TEXT(SMakeSortName(#E)),
        "@sort"     : TEXT(text⟦⟧),
        "@pt-name"  : TEXT(SMakePrinterName(#E)),
        "@pt-rules" : TEXT(text⟦⟧),
        "@pt-subs"  : TEXT(text⟦⟧)
   }, (env)->SMakeSortTail(env, #cont))⟩⟧

// Retrieves the sort and printer from the environment and construct text
func SMakeSortTail(SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort
rule SMakeSortTail({#E, "@sortname": TEXT(#sortname),
                       "@sort"    : TEXT(#sort),
                       "@pt-name" : TEXT(#printerName),
                       "@pt-rules": TEXT(#printerRules),
                       "@pt-subs" : TEXT(#printerSubs)}, #cont)
→ text⟦†⟨#sort⟩


func †⟨#printerName⟩(†⟨#sortname⟩) -> Text4_text_sort†⟨#printerRules⟩†⟨#printerSubs⟩†⟨#cont(#E)⟩⟧

//
func SMakeForms(ANTLR_ruleBlock_sort, SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort
rule SMakeForms(ruleBlock⟦ #alternative #labeledAlt_S1?  #ruleAltList_S1* ⟧, #E, #cont)
→ SMakeForm(
    IfDef("truevar", ()->GetElementOptionAlternative(#alternative, "variable"), ()->()),
    GetElementOptionAlternative(#alternative, "type"), #alternative, #labeledAlt_S1?, 1, IsEmpty(#ruleAltList_S1*), #E,
    (count env)->SMakeRuleAltList_S1s(count, #ruleAltList_S1*, env, #cont))

//
func SMakeRuleAltList_S1s(Numeric, List<ANTLR_ruleAltList_S1_sort>, SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule SMakeRuleAltList_S1s(#count, ruleAltList_S1*⟦ | #alternative #labeledAlt_S1? #ruleAltList_S1* ⟧, #E, (env)->#(env))
  → SMakeForm(IfDef( "truevar", ()->GetElementOptionAlternative(#alternative, "variable"), ()->()),
             GetElementOptionAlternative(#alternative, "type"), #alternative, #labeledAlt_S1?, #count, FALSE,
             #E, (count env)->SMakeRuleAltList_S1s(count, #ruleAltList_S1*, env, #))

  rule SMakeRuleAltList_S1s(#count, (), #E, (env)->#(env))
  → #(#E)

//
func SMakeForm(List<ElementOption>, List<ElementOption>, ANTLR_alternative_sort, List<ANTLR_labeledAlt_S1_sort>, Numeric, Bool, SortEnv, (Numeric SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule SMakeForm((SYMBOL(NONE),), (), #alternative, #labeledAlt_S1?, #count, #unique,
                {#E, "@sort":TEXT(#sort),
                     "@pt-rules" : TEXT(#printerRules),
                     "@pt-name"  : TEXT(#printerName)}, (count env)->#(count, env))
  → #(#count, {#E, "@sort"     : TEXT(text⟦†⟨#sort⟩ | allows-variable⟧),
                   "@pt-rules" : TEXT(text⟦†⟨#printerRules⟩¶rule †⟨#printerName⟩(x) ⟨STRING:"\u2192"⟩ †⟨Text-User("text", Text-String(text⟦Show(x)⟧))⟩⟧)})

  rule SMakeForm((SYMBOL(#ref),), (TYPE(#type),), alternative⟦ #element* ⟧, #labeledAlt_S1?, #count, #unique, #E, (count env)->#(count, env))
  → SMakeFormNoDup(SMakeAlternativeName(#labeledAlt_S1?, #count, #unique, #E), #element*, #labeledAlt_S1?, #count, #unique, #E, (count env)->#(count, env))

  rule SMakeForm((), #type, alternative⟦ #element* ⟧, #labeledAlt_S1?, #count, #unique, #E, (count env)->#(count, env))
  → SMakeFormNoDup(SMakeAlternativeName(#labeledAlt_S1?, #count, #unique, #E), #element*, #labeledAlt_S1?, #count, #unique, #E, (count env)->#(count, env))

// Skip subsequent alternative with the same name
func SMakeFormNoDup(String, List<ANTLR_element_sort>, List<ANTLR_labeledAlt_S1_sort>, Numeric, Bool, SortEnv, (Numeric SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule SMakeFormNoDup(#key, #element*, #labeledAlt_S1?, #count, #unique, {#E, #key:BOOL(TRUE)}, (count env)->#(count, env))
  → #(#count, #E)

  rule SMakeFormNoDup(#key, #element*, #labeledAlt_S1?, #count, #unique, {#E, "@sort": TEXT(#sort)}, (count env)->#(count, env))
  → MaybeSMakeArguments(#element*, {#E, "@sort"    : TEXT(text⟦†⟨#sort⟩ | ⟨STRING: #key⟩⟧),
                                        "@freshes" : TEXTS(()), // Printer rule fresh variable
                                        "@plhs"    : TEXTS(()), // Printer rule lhs arguments
                                        "@prhs"    : TEXTS(()), // Printer rule rhs
                                        "@inblock" : BOOL(FALSE),
                                        #key       : BOOL(TRUE)
    }, (env)->SMakePrintingRule(text⟦⟨STRING:#key⟩⟧, env, (env)->#(Plus(#count, 1), env)))

//
func SMakePrintingRule(Text4_text_sort, SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort
rule SMakePrintingRule(#altName, {#E, "@pt-rules" : TEXT(#printerRules),
                                     "@pt-name"  : TEXT(#printerName),
                                     "@freshes"  : TEXTS(#freshes),
                                     "@plhs"     : TEXTS(#printerRuleLHS),
                                     "@prhs"     : TEXTS(#printerRuleRHS)}, (env)->#(env))
→ #({#E,
    "@pt-rules" : TEXT(text⟦†⟨#printerRules⟩
rule †⟨#printerName⟩(†⟨#altName⟩(†⟨ReverseTextFold(#printerRuleLHS, text⟦, ⟧)⟩)) ⟨STRING:"\u2192"⟩ †⟨Text-User("text", ReverseTextFold(#printerRuleRHS, text⟦⟧))⟩⟧)})

/* Iterates over the elements (maybe none) of an alternative.
 */
func MaybeSMakeArguments(List<ANTLR_element_sort>, SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule MaybeSMakeArguments(element*⟦ #element #element* ⟧, {#E, "@sort":TEXT(#sort)}, (env)->#(env))
  → SMakeArguments(1, element*⟦ #element #element* ⟧,
                  {#E, "@sort"       : TEXT(text⟦†⟨#sort⟩(⟧),  // Have at least one alternative
                       "@sep"        : TEXT(text⟦⟧),           // Current separator between data forms
                       "@block-count": NUM(0),                 // Count the number of subrules for generating unique names
                       "@sublist"    : WRAPPER((t x)->x)},      // Use to unfused elements
                  (env)->SMakeCloseArguments(env, (env)->#(env)))

  rule MaybeSMakeArguments((), {#E, "@sort":TEXT(#sort)}, (env)->#(env))
  → #({#E,"@sort": TEXT(text⟦†⟨#sort⟩⟧)})

/* Done iterating over alternative elements. Close sort bracket
*/
func SMakeCloseArguments(SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort
rule SMakeCloseArguments({#E, "@sort":TEXT(#sort)}, (env)->#(env))
→ #({#E, "@sort":TEXT(text⟦†⟨#sort⟩)⟧)})

//
func SMakeArguments(Numeric, List<ANTLR_element_sort>, SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule SMakeArguments(#count, element*⟦ #element #element* ⟧, {#E, "@index": INDEX(#I)}, (env)->#(env))
  → MaybeSMakeArgument(IsFused(#element, #element*, #I), IsSugarElement(#element, #I), #element, #count,
                      {#E, "@binders": TEXTS(())},  /* Collect <binds> variables */
                      (count env)->SMakeArguments(count, #element*, env, (env)->#(env)))

  rule SMakeArguments(#count, (), #E, (env)->#(env))
  → #(#E)

//
func MaybeSMakeArgument(Bool /* fused? */, Bool /* sugar? */, ANTLR_element_sort, Numeric, SortEnv, (Numeric SortEnv)->Text4_text_sort) -> Text4_text_sort

  // Common case: element is not fused and not a sugar. It is a binder?
  rule MaybeSMakeArgument(FALSE, FALSE, #element, #count, #E, (count env)->#(count, env))
  → MaybeSMakeBinderArgument(GetElementOptionElement(#element, "boundvar"), #element, #count, #E, (count env)->#(count, env))

  /* The first list argument has been fused but not sugar. Unfused by extracting it.
     Only update the right hand-side as the lhs metavariable is reused
   */
  rule MaybeSMakeArgument(TRUE, FALSE, #element, #count, {#E, "@index": INDEX(#I)}, (count env)->#(count, env))
  → SMakeFusedArgument(UnSOME(GetRefElement(#element, (), #I)), #element, #count, #E, (count env)->#(count, env))

  // The argument is sugar. Continue: it won't be added to sort but to printer.
  rule MaybeSMakeArgument(#fused, TRUE, #element, #count, #E, (count env)->#(count, env))
  → SMakeArgument(#element, #count, #E, (env)->#(#count, env))

func SMakeFusedArgument(String /* Ruleref */, ANTLR_element_sort, Numeric, SortEnv, (Numeric SortEnv)->Text4_text_sort) -> Text4_text_sort
rule SMakeFusedArgument(#ruleRef, #element, #count, {#E, "@prhs": TEXTS(#printerRHS), "@binders": TEXTS(#binders), "@index": INDEX(#I)}, (count env)->#(count, env))
→ #(#count, {#E, "@sublist": WRAPPER((t x)->text⟦Tail<†⟨t⟩>(†⟨x⟩)⟧),
       "@prhs": TEXTS((SMakeRulerefText(#ruleRef, #count, #binders, FALSE, WRAPPER((t x)->text⟦Head<†⟨t⟩>(†⟨x⟩)⟧), SMakeSortName2(EnvString("@id", #E), #ruleRef, IsStringRuleRuleRef(#ruleRef, #I)), #E), #printerRHS...))
  })

// Check element option is <bound=variable>
func MaybeSMakeBinderArgument(List<ElementOption>, ANTLR_element_sort, Numeric, SortEnv, (Numeric SortEnv)->Text4_text_sort) -> Text4_text_sort

  // No binder option. Could it be binds?
  rule MaybeSMakeBinderArgument((), #element, #count, #E, (count env)->#(count, env))
  → MaybeSMakeBindsArgument(GetElementOptionElement(#element, "bound"), #element, #count, #E, (count env)->#(count, env))

  /* Yes binder option (only one).
  */
  rule MaybeSMakeBinderArgument((BINDER(#binder),), #element, #count, {#E, "@index": INDEX(#index)}, (count env)->#(count, env))
  → SMakeBinderArgument(#binder, GetBinderType(GetElementOptionElement(#element, "type"), #E), SMakeBinderKey(#binder), GetRefElement(#element, (), #index), #count, #E, (count env)->#(count, env))

func GetBinderType(List<ElementOption>, SortEnv) -> Text4_text_sort
rule GetBinderType((               ), #E)                        → text⟦String⟧
rule GetBinderType((TYPE(#ruleRef),), {#E, "@index": INDEX(#I)}) → text⟦⟨STRING:SMakeSortName2(EnvString("@id", #E), #ruleRef, IsStringRuleRuleRef(#ruleRef, #I))⟩⟧


/* Handle <boundvar=x>:

  For the printing rule: get a fresh new variable to get a new name. Limit binder to
  token, and due to CRSX sort system limitation, the fresh variable sort is $String
  Due to current crsx limitation, there is no guarantee the name respects the grammar, and
  that the name is preserved. Fine for now...

   Don't add sort argument.

 */
func SMakeBinderArgument(String, Text4_text_sort, String, Option<String>, Numeric, SortEnv, (Numeric SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule SMakeBinderArgument(#binder, #type, #key, SOME(#ruleref), #count,  {#E,
    "@id"      : STRING(#id),
    "@freshes" : TEXTS(#freshes),
    "@prhs"    : TEXTS(#rhs)
  }, (count env)->#(count, env))
  →
  #(#count, {#E,
      #key       : BOUNDVAR(#ruleref, #type),
      "@freshes" : TEXTS((text⟦[†⟨#type⟩]⟧, #freshes...)),
      "@prhs"    : TEXTS((Text-String(text⟦Show(⟨STRING:#binder⟩)⟧), #rhs...))})

  // Binder on sugar: that's an error
  rule SMakeBinderArgument(#binder, #type, #key, NONE, #count, #E, (count env)->#(count, env))
  → Error("Invalid binder option on an element that is either a constant or skipped.")

// Check element option is list of <bound=variable>
func MaybeSMakeBindsArgument(List<ElementOption>, ANTLR_element_sort, Numeric, SortEnv, (Numeric SortEnv)->Text4_text_sort) -> Text4_text_sort

// No <bound> option. Check for variable
rule MaybeSMakeBindsArgument((), #element, #count, #E, (count env)->#(count, env))
→ MaybeSMakeSymbolArgument(GetElementOptionElement(#element, "variable"), GetElementOptionElement(#element, "type"), #element, #count, #E, (count env)->#(count, env))

rule MaybeSMakeBindsArgument((#binds, #bindss...), #element, #count, {#E, "@sort":TEXT(#sort), "@sep":TEXT(#sep)}, (count env)->#(count, env))
→ SMakeBindsArguments((#binds, #bindss...), {#E,
    "@sort"    : TEXT(text⟦†⟨#sort⟩†⟨#sep⟩[⟧),
    "@sep"     : TEXT(text⟦] -> ⟧)}, (env)->SMakeRawArgument(#element, #count, env, (count env)->#(count, env)))

func SMakeBindsArguments(List<ElementOption>, SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule SMakeBindsArguments((BINDS(#binder), #binds...), #E, (env)->#(env))
  → SMakeBindsArgument(#binder, SMakeBinderKey(#binder), #E, (env)->SMakeBindsArguments(#binds, env, (env)->#(env)))

  rule SMakeBindsArguments((), #E, (env)->#(env))
  → #(#E)

func SMakeBindsArgument(String, String,  SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort

rule SMakeBindsArgument(#binder, #key, {#E,  "@sort"    : TEXT(#sort),
                                            "@binders" : TEXTS(#binders),
                                            #key       : BOUNDVAR(#ruleref, #type)}, (env)->#(env))
→ #({#E,
    "@sort"    : TEXT(text⟦†⟨#sort⟩ †⟨#type⟩⟧),
    "@binders" : TEXTS((text⟦⟨STRING:#binder⟩⟧, #binders...))})

func MaybeSMakeSymbolArgument(List<ElementOption>, List<ElementOption>, ANTLR_element_sort, Numeric, SortEnv, (Numeric SortEnv)->Text4_text_sort) -> Text4_text_sort

  // No <variable=sort> option. done.
  rule MaybeSMakeSymbolArgument((), #type, #element, #count, #E, (count env)->#(count, env))
  → SMakeRawArgument(#element, #count, #E, (count env)->#(count, env))

  // <variable> and no <type> option. done.
  rule MaybeSMakeSymbolArgument((SYMBOL(NONE),), (), #element, #count, #E, (count env)->#(count, env))
  → SMakeRawArgument(#element, #count, #E, (count env)->#(count, env))

  // <variable> and <type> option. Update type.
  rule MaybeSMakeSymbolArgument((SYMBOL(NONE),), (TYPE(#RULE_REF),), #element, #count, #E, (count env)->#(count, env))
  → SMakeRawArgument(element⟦ #RULE_REF ⟧, #count, #E, (count env)->#(count, env))

  // Got a variable referring to a rule.
  rule MaybeSMakeSymbolArgument((SYMBOL(SOME(#RULE_REF)),), #type, #element, #count, #E, (count env)->#(count, env))
  → SMakeRawArgument(element⟦ #RULE_REF ⟧, #count, #E, (count env)->#(count, env))


// Common case: element has no options, and not fused. SMake regular argument
func SMakeRawArgument(ANTLR_element_sort, Numeric, SortEnv, (Numeric SortEnv)->Text4_text_sort) -> Text4_text_sort

rule SMakeRawArgument(#element, #count, {#E, "@sort":TEXT(#sort), "@sep":TEXT(#sep)}, (count env)->#(count, env))
→ SMakeArgument(#element, #count, {#E,
    "@sort" : TEXT(text⟦†⟨#sort⟩†⟨#sep⟩⟧),
    "@sep"  : TEXT(text⟦, ⟧)
  }, (env)->#(Plus( #count, 1), env))

//
func SMakeArgument(ANTLR_element_sort, Numeric,  SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort

  // labeled element with optional ebnf suffix
  rule SMakeArgument(element⟦ #labeledElement #element_A1_S1 ⟧, #count, {#E, "@plhs": TEXTS(#printerLHS), "@inblock":BOOL(#inblock)}, (env)->#(env))
  → SMakeArgFromAtom(GetAtom(#labeledElement), MapToList1(#element_A1_S1, #inblock), #count, #E, (env)->#(env))

  // atom with optional ebnf
  rule SMakeArgument(element⟦ #atom #element_A2_S1 ⟧, #count, {#E, "@inblock": BOOL(#inblock)}, (env)->#(env))
  → SMakeArgFromAtom(#atom, MapToList2(#element_A2_S1, #inblock), #count, #E, (env)->#(env))

  // A trivial block with no suffix: just inlined.
  /*rule SMakeArgument(element⟦ #block ⟧, #count, #E, (env)->#(env))
  → SMakeArgFromBlock(#block, #count, #E, (env)->#(env))*/

  // A trivial block with suffix: generate printing rule for block and apply it.
  rule SMakeArgument(element⟦ #block #blockSuffix ⟧, #count, #E, (env)->#(env))
  → SMakeArgFromSuffixedBlock(#block, #blockSuffix, #count, #E, (env)->#(env))

  // Skip action...
  rule SMakeArgument(element⟦ #ACTION #QUESTION? ⟧, #count, #E, (env)->#(env))
  → #(#E)

//
func SMakeArgFromAtom(ANTLR_atom_sort, Bool /* Is list? */, Numeric,  SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule SMakeArgFromAtom(atom⟦ #STRING_LITERAL #elementOptions? ⟧, TRUE, #count, {#E, "@sort": TEXT(#sort), "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS)}, (env)->#(env))
  → #({#E, "@sort":TEXT(text⟦†⟨#sort⟩List<String>⟧),
         "@plhs": TEXTS((SMakeMetaVar(#count, (), FALSE), #printerLHS...)),
         "@prhs": TEXTS((SMakeTerminalText(#count, (), TRUE), #printerRHS...))
    })

  // String literal are constants. Print it
  rule SMakeArgFromAtom(atom⟦ #STRING_LITERAL #elementOptions? ⟧, FALSE, #count, {#E, "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS)}, (env)->#(env))
  → #({#E, "@prhs": TEXTS((StringToText(#STRING_LITERAL), #printerRHS...))})

  // List of token ref.
  rule SMakeArgFromAtom(atom⟦ #TOKEN_REF #elementOptions? ⟧, TRUE, #count, {#E, "@sort": TEXT(#sort), "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS)}, (env)->#(env))
  → #({#E, "@sort": TEXT(text⟦†⟨#sort⟩List<String>⟧),
           "@plhs": TEXTS((SMakeMetaVar(#count, (), FALSE), #printerLHS...)),
           "@prhs": TEXTS((SMakeTerminalText(#count, (), TRUE), #printerRHS...))})

  rule SMakeArgFromAtom(atom⟦ #TOKEN_REF #elementOptions? ⟧, FALSE, #count, {#E, "@index": INDEX(#I)}, (env)->#(env))
  → SMakeArgFromTokenRef(IsConstantAtom(atom⟦ #TOKEN_REF ⟧, #I), #TOKEN_REF, #count, #E, (env)->#(env))

  rule SMakeArgFromAtom(atom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧, TRUE, #count, {#E, "@sort": TEXT(#sort), "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS), "@sublist": #wrapper,
       "@binders": TEXTS(#binders), "@index": INDEX(#I)}, (env)->#(env))
  → #({#E, "@sort": TEXT(text⟦†⟨#sort⟩List<⟨STRING:SMakeSortName2(EnvString("@id", #E), #RULE_REF, IsStringRuleRuleRef(#RULE_REF, #I))⟩>⟧),
         "@plhs": TEXTS((SMakeMetaVar(#count, #binders, FALSE), #printerLHS...)),
         "@prhs": TEXTS((SMakeRulerefText(#RULE_REF, #count, #binders, TRUE, #wrapper, SMakeSortName2(EnvString("@id", #E), #RULE_REF, IsStringRuleRuleRef(#RULE_REF, #I)), #E), #printerRHS...))})

  rule SMakeArgFromAtom(atom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧, FALSE, #count, {#E,
    "@sort": TEXT(#sort), "@plhs": TEXTS(#printerLHS),
    "@prhs": TEXTS(#printerRHS), "@sublist": #wrapper,
    "@binders": TEXTS(#binders), "@index": INDEX(#I)}, (env)->#(env))
  → #({#E, "@sort": TEXT(text⟦†⟨#sort⟩⟨STRING:SMakeSortName2(EnvString("@id", #E), #RULE_REF, IsStringRuleRuleRef(#RULE_REF, #I))⟩⟧),
         "@plhs": TEXTS((SMakeMetaVar(#count, #binders, FALSE), #printerLHS...)),
         "@prhs": TEXTS((SMakeRulerefText(#RULE_REF, #count, #binders, FALSE, #wrapper, SMakeSortName2(EnvString("@id", #E), #RULE_REF, IsStringRuleRuleRef(#RULE_REF, #I)), #E), #printerRHS...))})


func SMakeArgFromTokenRef(Bool, String, Numeric, SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule SMakeArgFromTokenRef(TRUE, #token, #count, {#E, "@prhs": TEXTS(#printerRHS)}, (env)->#(env))
  →  #({#E, "@prhs": TEXTS((TokenRefToText(#token, #E), #printerRHS...))})

  rule SMakeArgFromTokenRef(FALSE, #token, #count, {#E,
      "@sort": TEXT(#sort), "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS),
      "@binders": TEXTS(#binders)}, (env)->#(env))
  → #({#E, "@sort": TEXT(text⟦†⟨#sort⟩String⟧),
         "@plhs": TEXTS((SMakeMetaVar(#count, #binders, FALSE), #printerLHS...)),
         "@prhs": TEXTS((SMakeTerminalText(#count, #binders, FALSE), #printerRHS...))})


/* The block has to be trivial with only one alternative. Something like (C p)*
* Generate an helper rule printing the constant tokens
*/
func SMakeArgFromSuffixedBlock(ANTLR_block_sort, ANTLR_blockSuffix_sort, Numeric,  SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort
rule SMakeArgFromSuffixedBlock(block⟦ ( #element* ) ⟧, #blockSuffix, #count, {#E, "@block-count": NUM(#blkcnt), "@index": INDEX(#index)}, (env)->#(env))
→ SMakeArgFromSuffixedBlock1(GetRefElements(#element*, #index), #element*, #blkcnt, #count, {#E, "@block-count": NUM(Plus( #blkcnt, 1))}, (env)->#(env))

func SMakeArgFromSuffixedBlock1(Option<String>, List<ANTLR_element_sort>, Numeric, Numeric, SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort

  rule SMakeArgFromSuffixedBlock1(SOME(#ruleRef), #element*, #blkcnt, #count, {#E, "@id": STRING(#id), "@index": INDEX(#I)}, (env)->#(env))
  → SMakeArgFromSuffixedBlock2(SMakeBlockRuleName(#ruleRef, #blkcnt), #ruleRef,
         SMakeSortForBlock(#id, SMakePrinterName2(#id, SMakeBlockRuleName(#ruleRef, #blkcnt)),
                          #ruleRef,
                          MaybeSMakeArguments(#element*, {#E, "@plhs": TEXTS(()), "@prhs": TEXTS(()), "@inblock":BOOL(TRUE)}, (env)->ReverseTextFold(UnTEXTS(UnSOME(MapGet(env, "@prhs"))), text⟦⟧)), #I),
         #count, #E, (env)->#(env))

  rule SMakeArgFromSuffixedBlock1(NONE, #element*, #blkcnt, #count, #E, (env)->#(env))
  → Error( "constant subrules not supported yet")

func UnTEXTS(SortEnvEntry) -> List<Text4_text_sort>
rule UnTEXTS(TEXTS(#)) → #

func SMakeArgFromSuffixedBlock2(String, String, PPair<Text4_text_sort Text4_text_sort>, Numeric, SortEnv, (SortEnv)->Text4_text_sort) -> Text4_text_sort
rule SMakeArgFromSuffixedBlock2(#blockRuleRef, #ruleRef, PairCons(#blocksort, #printer), #count, {#E, "@sort": TEXT(#sort), "@id": STRING(#id), "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS),
     "@sublist": #wrapper, "@pt-subs":TEXT(#ptsubs), "@binders": TEXTS(#binders),
     "@index": INDEX(#I)}, (env)->#(env))
→ #({#E, "@sort": TEXT(text⟦†⟨#sort⟩List<⟨STRING:SMakeSortName2(#id, #ruleRef, IsStringRuleRuleRef(#ruleRef, #I))⟩>⟧),
       "@plhs": TEXTS((SMakeMetaVar(#count, (), FALSE), #printerLHS...)),
       "@prhs": TEXTS((SMakeRulerefText(#blockRuleRef, #count, #binders, TRUE, #wrapper, SMakeSortName2(#id, #ruleRef, IsStringRuleRuleRef(#ruleRef, #I)), #E), #printerRHS...)),
       "@pt-subs": TEXT(text⟦†⟨#ptsubs⟩†⟨#blocksort⟩†⟨#printer⟩⟧)})

func SMakeSortForBlock(String, Text4_text_sort, String, Text4_text_sort, RuleIndex) -> PPair<Text4_text_sort/* sort */ Text4_text_sort /* printer */>
rule SMakeSortForBlock(#id, #name, #ruleRef, #prhs, #I)
→ PairCons(
  text⟦¶func †⟨#name⟩(⟨STRING:SMakeSortName2(#id, #ruleRef, IsStringRuleRuleRef(#ruleRef, #I))⟩) -> Text4_text_sort⟧,
  text⟦¶rule †⟨#name⟩(#1) ⟨STRING:"\u2192"⟩ †⟨Text-User("text", #prhs)⟩⟧)

// Helpers

//
func MapToList1(ANTLR_element_A1_S1_sort, Bool) -> Bool
rule MapToList1(element_A1_S1⟦ #ebnfSuffix ⟧, FALSE)  → TRUE
rule MapToList1(element_A1_S1⟦ ⟧, FALSE)              → FALSE
rule MapToList1(element_A1_S1⟦ #ebnfSuffix ⟧, TRUE) → FALSE
rule MapToList1(element_A1_S1⟦ ⟧, TRUE)             → FALSE

//
func MapToList2(ANTLR_element_A2_S1_sort, Bool) -> Bool
rule MapToList2(element_A2_S1⟦ #ebnfSuffix ⟧, FALSE)  → TRUE
rule MapToList2(element_A2_S1⟦ ⟧, FALSE)              → FALSE
rule MapToList2(element_A2_S1⟦ #ebnfSuffix ⟧, TRUE) → FALSE
rule MapToList2(element_A2_S1⟦ ⟧, TRUE)             → FALSE

// Extract atom from labeled element
func GetAtom(ANTLR_labeledElement_sort) -> ANTLR_atom_sort
rule GetAtom(labeledElement⟦ #id #labeledElement_S1 #atom  ⟧) → #atom
rule GetAtom(labeledElement⟦ #id #labeledElement_S1 #block ⟧) → Error("Subrules are not allowed.")

//

func EnvString(#key: String, #E:SortEnv) -> String
→ EnvUnSTRING(MapGetD(#E, #key, STRING("")))

func EnvUnSTRING(SortEnvEntry) -> String
rule EnvUnSTRING(STRING(#value)) → #value

//
func SMakeSortName(SortEnv) -> Text4_text_sort
rule SMakeSortName({#E, "@id": STRING(#id), "@ruleRef": STRING(#ruleRef)})→ StringToText(ConcatString(GetPrefix(#id), #ruleRef, GetSortSuffix))

//
func SMakeSortName2(String, String, Bool /* String rule?*/) -> String

  rule SMakeSortName2(#id, #ruleRef, FALSE)
  → ConcatString( GetPrefix(#id), #ruleRef, GetSortSuffix)

  rule SMakeSortName2(#id, #ruleRef, TRUE)
  → "String"

func SMakeAlternativeName(List<ANTLR_labeledAlt_S1_sort>, Numeric, Bool, SortEnv) -> String

  rule SMakeAlternativeName((ANTLR_labeledAlt_S1(#POUND, #altid),), #count, #unique, {#E, "@id": STRING(#id)})
  → ConcatString( GetPrefix(#id), UnwrapId(#altid))

  rule SMakeAlternativeName((), #count, FALSE, {#E, "@id": STRING(#id), "@ruleRef": STRING(#ruleRef)})
  → ConcatString( GetPrefix(#id), #ruleRef, "_A", FormatNumber( #count))

  rule SMakeAlternativeName((), #count, TRUE, {#E, "@id": STRING(#id), "@ruleRef": STRING(#ruleRef)})
  → ConcatString( GetPrefix(#id), #ruleRef)

func SMakeBinderKey(#binder: String) -> String
→ ConcatString("/", #binder)

/*―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

 Printer helpers

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――*/

// Generate printer function name corresponding to the given ruleref
func SMakePrinterName(SortEnv) -> Text4_text_sort
rule SMakePrinterName({#E, "@id": STRING(#id), "@ruleRef": STRING(#ruleRef)})→ SMakePrinterName2(#id, #ruleRef)

// Generate printer function name corresponding to the given ruleref
func SMakePrinterName2(String, String) -> Text4_text_sort
rule SMakePrinterName2(#id, #ruleRef) → StringToText(ConcatString( #id, "_Print_", #ruleRef))

// Print metavar, optionally with binders
func SMakeMetaVar(Numeric, List<Text4_text_sort>, Bool /* Whether to only apply binders */) -> Text4_text_sort
rule SMakeMetaVar(#count, #binders, #applyOnly)
→ text⟦†⟨If(#applyOnly, ()->text⟦⟧, ()->SMakeMetaBinders(#binders))⟩#†⟨NumberToText(#count)⟩†⟨SMakeMetaArgs(#binders)⟩⟧

//
func SMakeMetaArgs(List<Text4_text_sort>) -> Text4_text_sort
rule SMakeMetaArgs(())             → text⟦⟧
rule SMakeMetaArgs((#arg,#args...)) → text⟦[†⟨ReverseTextFold((#arg,#args...), text⟦, ⟧)⟩]⟧

//
func SMakeMetaBinders(List<Text4_text_sort>) -> Text4_text_sort
rule SMakeMetaBinders(())              → text⟦⟧
rule SMakeMetaBinders((#arg,#args...)) → text⟦[†⟨ReverseTextFold((#arg,#args...), text⟦ ⟧)⟩]->⟧

//
func SMakeTerminalText(Numeric, List<Text4_text_sort>, Bool) -> Text4_text_sort
rule SMakeTerminalText(#count, #binders, FALSE)
→ Text-String(SMakeMetaVar(#count, #binders, TRUE))

rule SMakeTerminalText(#count, (), TRUE)
→ Text-Text(text⟦TextFold(Map((x) -> StringToText(x), †⟨SMakeMetaVar(#count, (), TRUE)⟩), †⟨Text-User("text", text⟦ ⟧)⟩)⟧)

func SMakeRulerefText(String, Numeric, List<Text4_text_sort>, Bool /* list? */, SortEnvEntry, String /* sort */, SortEnv) -> Text4_text_sort

  rule SMakeRulerefText(#Ruleref, #count, #binders, FALSE, WRAPPER((t x)->#wrap(t, x)), #sort, #E)
  → if Equal(#sort, "String")
      Text-String(text⟦†⟨SMakeMetaVar(#count, #binders, TRUE)⟩⟧)
    else
      Text-Text(text⟦†⟨SMakePrinterName({#E, "@ruleRef": STRING(#Ruleref)})⟩(†⟨#wrap(StringToText(#sort), SMakeMetaVar(#count, #binders, TRUE))⟩)⟧)

  rule SMakeRulerefText(#ruleRef, #count, #binders, TRUE, WRAPPER((t x)->#wrap(t, x)), #sort, #E)
  → if Equal(#sort, "String")
      Text-String(text⟦TextFold(Map((x) ->  StringToText(x), †⟨#wrap(StringToText(#sort),SMakeMetaVar(#count, #binders, TRUE))⟩), †⟨Text-User("text", text⟦ ⟧)⟩)⟧)
    else
      Text-Text(text⟦TextFold(Map((x) ->†⟨SMakePrinterName({#E, "@ruleRef": STRING(#ruleRef)})⟩(x), †⟨#wrap(StringToText(#sort) ,SMakeMetaVar(#count, #binders, TRUE))⟩), †⟨Text-User("text", text⟦ ⟧)⟩)⟧)

/* Generate an unique fake rule name for block. */
func SMakeBlockRuleName(#parentRuleRef: String, #blockCount: Numeric) -> String
→ ConcatString(#parentRuleRef, "_S", FormatNumber( #blockCount))

func TokenRefToText(String, SortEnv) -> Text4_text_sort
rule TokenRefToText(#tokenRef, {#E, "@index": INDEX(#I)}) → text⟦ ⟨STRING:UnQuote(UnSOME(GetConstantTokenRef(#tokenRef, #I)))⟩ ⟧

func UnQuote(String) -> String
rule UnQuote(#) → RemoveFirstChar(RemoveLastChar(#))

func GetPrefix(#id: String) -> String
→ ConcatString(#id, GetEnv("prefixsep", "_"))

func GetSortSuffix -> String
rule GetSortSuffix → GetEnv( "sortsuffix", "_sort")
