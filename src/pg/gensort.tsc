/*
 * Copyright (c) 2015 IBM Corporation.
 *
 * Generates sorts and basic printer from normalized ANTLR grammar.
 *
 * Note: the output is Text. It should be Crsx, when stable enough...
 */



import Text::Text
import Std::Core
import Std::Text
import Std::List
import Std::Pair
import Std::String
import Pg::Util

/* Generates sorts and a basic printer for the given ANTLR grammar specification */
func MakeSorts(ANTLR_grammarSpec_sort) -> Text4_text_sort
rule MakeSorts(#)
→
MakeGrammarSpec(#, {"@index": INDEX(IndexGrammar(#))})

/* Helper */
func MakeGrammarSpec(ANTLR_grammarSpec_sort) -> Text4_text_sort
rule MakeGrammarSpec(grammarSpec⟦ #DOC_COMMENT? #grammarType #id ; #prequelConstruct* #ruleSpec* #modeSpec* ⟧, {#E})
→ MakeModuleId(UnwrapId(#id), [ok]->ThenSeqMap(ok, [rule  cont]->MakeRuleSpec(rule, cont), #ruleSpec*, [ok]->text⟦⟧), {#E})

/* Generate Sort/Printer module id */

func MakeModuleId(ANTLR_grammarSpec_sort) -> Text4_text_sort
rule MakeModuleId(#id, [ok]->#[ok], {#E})
→ text⟦/* Generated File. */
import std::core
import std::listdef
†⟨IfDef( "notext", text⟦⟧, 
  text⟦
import std::text::Text4
import std::text⟧)⟩

†⟨#[OK, {#E, "@id": STRING(#id)}]⟩⟧ // TODO: must match CRSX syntax

/* `MakeRuleSpec[#rule, #cont] :: Text`
   Generates sort and printer for grammar rule
 */
func MakeRuleSpec(ANTLR_ruleSpec_sort, Cont<Text4_text_sort>) -> Text4_text_sort
rule MakeRuleSpec(ruleSpec⟦ #DOC_COMMENT? #ruleModifiers? #RULE_REF #ARG_ACTION? #ruleReturns? #throwsSpec? #localsSpec?
                                #rulePrequel* : #ruleBlock ; #exceptionHandler* #finallyClause? ⟧, #cont, {#E, "@index": INDEX(RULEINDEX({#I}))})
→ MaybeMakeSort(IsStringRulePrequels(#rulePrequel*, {#I}), #ruleBlock, #cont, {#E, "@ruleRef": STRING(#RULE_REF)})

rule MakeRuleSpec(ruleSpec⟦ #FRAGMENT? #TOKEN_REF : #lexerRuleBlock ; ⟧, #cont, {#E})
→ ApplyCont(#cont, {#E})

/*―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

 Generate sorts, printer sorts and printer rules.

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――*/

// Make sort only if this is not a string rule
func MaybeMakeSort(Bool /* String rule? */, ANTLR_ruleSpec_sort, Cont<Text4_text_sort>) -> Text4_text_sort
rule MaybeMakeSort(TRUE, #ruleBlock, #cont, {#E})  → ApplyCont(#cont, {#E})
rule MaybeMakeSort(FALSE, #ruleBlock, #cont, {#E}) → MakeSort(#ruleBlock, #cont, {#E})


/* Generates sort and printer for parser rule by iterating over the grammar alternatives
   and incrementally building the printer in the environment.
 */
func MakeSort(ANTLR_ruleSpec_sort, Cont<Text4_text_sort>) -> Text4_text_sort
 rule MakeSort(#ruleBlock, #cont, {#E})
→ text⟦¶¶enum †⟨MakeSortName({#E})⟩ †⟨MakeForms(#ruleBlock, [ok]->MakeSortTail(ok, #cont), {#E, "@sortname" : TEXT(MakeSortName({#E})),
        "@sort"     : TEXT(text⟦⟧),
        "@pt-name"  : TEXT(MakePrinterName({#E})),
        "@pt-rules" : TEXT(text⟦⟧),
        "@pt-subs"  : TEXT(text⟦⟧)
   })⟩⟧

// Retrieves the sort and printer from the environment and construct text
func MakeSortTail(OK_SORT, Cont<Text4_text_sort>) -> Text4_text_sort
rule MakeSortTail(OK, #cont, {#E, "@sortname": TEXT(#sortname),
     "@sort"    : TEXT(#sort),
     "@pt-name" : TEXT(#printerName),
     "@pt-rules": TEXT(#printerRules),
     "@pt-subs" : TEXT(#printerSubs)})
→ text⟦†⟨#sort⟩¶¶func †⟨#printerName⟩(†⟨#sortname⟩) -> Text4_text_sort†⟨#printerRules⟩†⟨#printerSubs⟩†⟨ApplyCont(#cont, {#E})⟩⟧

//
func MakeForms(ANTLR_ruleBlock_sort, [OK_SORT]->Text4_text_sort) -> Text4_text_sort
rule MakeForms(ruleBlock⟦ #alternative #labeledAlt_S1?  #ruleAltList_S1* ⟧, [ok]->#[ok], {#E})
→ MakeForm(IfDef( "truevar", GetElementOptionAlternative(#alternative, "variable"), ()), GetElementOptionAlternative(#alternative, "type"), #alternative, #labeledAlt_S1?, 1, IsEmpty(#ruleAltList_S1*), 
      [ok  count]->MakeRuleAltList_S1s(ok, count, #ruleAltList_S1*, [o2]->#[o2]), {#E})

//
func MakeRuleAltList_S1s(OK_SORT, Numeric, List<ANTLR_ruleAltList_S1_sort>, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeRuleAltList_S1s(OK, #count, (), [ok]->#[ok], {#E})
→ #[OK, {#E}]

rule MakeRuleAltList_S1s(OK, #count, ruleAltList_S1*⟦ | #alternative #labeledAlt_S1? #ruleAltList_S1* ⟧, [ok]->#[ok], {#E})
→ MakeForm(IfDef( "truevar", GetElementOptionAlternative(#alternative, "variable"), ()), GetElementOptionAlternative(#alternative, "type"), #alternative, #labeledAlt_S1?, #count, FALSE, 
      [ok  count]->MakeRuleAltList_S1s(ok, count, #ruleAltList_S1*, [o2]->#[o2]), {#E})

//
func MakeForm(List<ElementOption>, List<ElementOption>, ANTLR_alternative_sort, List<ANTLR_labeledAlt_S1_sort>, Numeric, Boolean, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeForm((SYMBOL(NONE),), (), #alternative, #labeledAlt_S1?, #count, #unique, [ok  count]->#[ok ,count], {#E, "@sort":TEXT(#sort),
     "@pt-rules" : TEXT(#printerRules),
     "@pt-name"  : TEXT(#printerName)})
→ #[OK ,#count, {#E, "@sort"    : TEXT(text⟦†⟨#sort⟩ | allows-variable⟧),
       "@pt-rules" : TEXT(text⟦†⟨#printerRules⟩¶rule †⟨#printerName⟩(x) → †⟨Text-Text(Text-String2(text⟦Show(x)⟧))⟩⟧)
  }]

rule MakeForm((SYMBOL(#ref),), (TYPE(#type),), alternative⟦ #element* ⟧, #labeledAlt_S1?, #count, #unique, [ok  count]->#[ok ,count], {#E})
→ MakeFormNoDup0(MakeAlternativeName(#labeledAlt_S1?, #count, #unique, {#E}), #element*, #labeledAlt_S1?, #count, #unique, [ok  count]->#[ok ,count], {#E})

rule MakeForm((), #type, alternative⟦ #element* ⟧, #labeledAlt_S1?, #count, #unique, [ok  count]->#[ok ,count], {#E})
→ MakeFormNoDup0(MakeAlternativeName(#labeledAlt_S1?, #count, #unique, {#E}), #element*, #labeledAlt_S1?, #count, #unique, [ok  count]->#[ok ,count], {#E})

// Skip subsequent alternative with the same name
// TODO: unify types.
func MakeFormNoDup0(String, List<ANTLR_element_sort>, List<ANTLR_labeledAlt_S1_sort>, Numeric, Boolean, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeFormNoDup0(#altname, #element*, #labeledAlt_S1?, #count, #unique, [ok  count]->#[ok ,count], {#E})
→ MakeFormNoDup(Show( #altname), #altname, #element*, #labeledAlt_S1?, #count, #unique, [ok  count]->#[ok ,count], {#E})

func MakeFormNoDup(String, Text4_text_sort, List<ANTLR_element_sort>, List<ANTLR_labeledAlt_S1_sort>, Numeric, Boolean, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeFormNoDup(#key, #altname, #element*, #labeledAlt_S1?, #count, #unique, [ok  count]->#[ok ,count], {#E, #key:TRUE})
→ #[OK ,#count, {#E}]

rule MakeFormNoDup(#key, #altname, #element*, #labeledAlt_S1?, #count, #unique, [ok  count]->#[ok ,count], {#E, "@sort": TEXT(#sort)})
→ MaybeMakeArguments(#element*, [ok]->MakePrintingRule(ok, #altname, [o2]->#[o2 ,Plus( #count, 1)]), {#E,
    "@sort"    : TEXT(text⟦†⟨#sort⟩ | †⟨#altname⟩⟧),
    "@freshes" : TEXTS(()), // Printer rule fresh variable
    "@plhs"    : TEXTS(()), // Printer rule lhs arguments
    "@prhs"    : TEXTS(()), // Printer rule rhs
    "@inblock" : NO,
    #key   : TRUE
  })

//
func MakePrintingRule(OK_SORT, Text4_text_sort, [OK_SORT]->Text4_text_sort) -> Text4_text_sort
rule MakePrintingRule(OK, #altName, [ok]->#[ok], {#E,
  "@pt-rules" : TEXT(#printerRules),
  "@pt-name"  : TEXT(#printerName),
  "@freshes"  : TEXTS(#freshes),
  "@plhs"     : TEXTS(#printerRuleLHS),
  "@prhs"     : TEXTS(#printerRuleRHS)})
→ #[OK, {#E,
    "@pt-rules" : TEXT(text⟦†⟨#printerRules⟩¶†⟨MakePrintFreshes(#freshes)⟩rule †⟨#printerName⟩(†⟨#altName⟩(†⟨ReverseTextFold(#printerRuleLHS, text⟦, ⟧)⟩)) → †⟨Text-Text(Text-ReverseConcat(#printerRuleRHS))⟩⟧)
  }]

//
func MakePrintFreshes(List<Text4_text_sort>) -> Text4_text_sort
rule MakePrintFreshes(())
→ text⟦⟧

rule MakePrintFreshes((#fresh, #freshes...))
→ text⟦⟧

/* Iterates over the elements (maybe none) of an alternative.
 */
func MaybeMakeArguments(List<ANTLR_element_sort>, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MaybeMakeArguments((), [ok]->#[ok], {#E, "@sort":TEXT(#sort)})
→ #[OK, {#E,"@sort": TEXT(text⟦†⟨#sort⟩⟧)}]

rule MaybeMakeArguments(element*⟦ #element #element* ⟧, [ok]->#[ok], {#E, "@sort":TEXT(#sort)})
→ MakeArguments(OK, 1, element*⟦ #element #element* ⟧, [ok]->MakeCloseArguments(ok, [o2]->#[o2]), {#E,
    "@sort"       : TEXT(text⟦†⟨#sort⟩(⟧),    // Have at least one alternative
    "@sep"        : TEXT(text⟦⟧),         // Current separator between data forms
    "@block-count": NUM(0),             // Count the number of subrules for generating unique names
    "@sublist"    : WRAPPER([t  x]->x)       // Use to unfused elements
  })

/* Done iterating over alternative elements. Close sort bracket
*/
func MakeCloseArguments(OK_SORT, [OK_SORT]->Text4_text_sort) -> Text4_text_sort
rule MakeCloseArguments(OK, [o2]->#[o2], {#E, "@sort":TEXT(#sort)})
→
#[OK, {#E, "@sort":TEXT(text⟦†⟨#sort⟩)⟧)}]

//
func MakeArguments(OK_SORT, Numeric, List<ANTLR_element_sort>, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeArguments(OK, #count, (), [ok]->#[ok], {#E})
→ #[OK, {#E}]

rule MakeArguments(OK, #count, element*⟦ #element #element* ⟧, [ok]->#[ok], {#E, "@index": INDEX(RULEINDEX({#I}))})
→ MaybeMakeArgument(IsFused(#element, #element*, RULEINDEX({#I})), IsSugarElement(#element, {#I}),  #element, #count, 
      [ok  count]->MakeArguments(ok, count, #element*, [o2]->#[o2]), {#E, 
     "@binders"    : TEXTS(())          // Collect <binds> variables
  })

//
func MaybeMakeArgument(Boolean /* fused? */, Boolean /* sugar? */, ANTLR_element_sort, Numeric, [OK_SORT  Numeric]->Text4_text_sort) -> Text4_text_sort

// Common case: element is not fused and not a sugar. It is a binder?
rule MaybeMakeArgument(FALSE, FALSE, #element, #count, [ok  count]->#[ok ,count], {#E})
→ MaybeMakeBinderArgument(GetElementOptionElement(#element, "boundvar"), #element, #count, [ok  count]->#[ok ,count], {#E})

/* The first list argument has been fused but not sugar. Unfused by extracting it.
   Only update the right hand-side as the lhs metavariable is reused
 */
rule MaybeMakeArgument(TRUE, FALSE, #element, #count, [ok  count]->#[ok ,count], {#E, "@index": INDEX(RULEINDEX({#I}))})
→ MakeFusedArgument(UnSOME(GetRefElement(#element, (), RULEINDEX({#I}))), #element, #count, [ok  count]->#[ok ,count], {#E})

// The argument is sugar. Continue: it won't be added to sort but to printer.
rule MaybeMakeArgument(#fused, TRUE, #element, #count, [ok  count]->#[ok ,count], {#E})
→ MakeArgument(#element, #count, [ok]->#[ok ,#count], {#E})

func MakeFusedArgument(String /* Ruleref */, ANTLR_element_sort, Numeric, [OK_SORT  Numeric]->Text4_text_sort) -> Text4_text_sort

rule MakeFusedArgument(#ruleRef, #element, #count, [ok  count]->#[ok ,count], {#E, "@prhs": TEXTS(#printerRHS), "@binders": TEXTS(#binders), "@index": INDEX(RULEINDEX({#I}))})
→ #[OK ,#count, {#E, "@sublist": WRAPPER([t  x]->text⟦Tail<†⟨t⟩>(†⟨x⟩)⟧),
       "@prhs": TEXTS((MakeRulerefText(#ruleRef, #count, #binders, FALSE, [t  x]->text⟦Head<†⟨t⟩>(†⟨x⟩)⟧, MakeSortName2(EnvString("@id", {#E}), #ruleRef, IsStringRuleRuleRef(#ruleRef, {#I})), {#E}), #printerRHS...))
  }]

// Check element option is <bound=variable>
func MaybeMakeBinderArgument(List<ElementOption>, ANTLR_element_sort, Numeric, [OK_SORT  Numeric]->Text4_text_sort) -> Text4_text_sort

// No binder option. Could it be binds?
rule MaybeMakeBinderArgument((), #element, #count, [ok  count]->#[ok ,count], {#E})
→ MaybeMakeBindsArgument(GetElementOptionElement(#element, "bound"), #element, #count, [ok  count]->#[ok ,count], {#E})

/* Yes binder option (only one).
*/
rule MaybeMakeBinderArgument((BINDER(#binder),), #element, #count, [ok  count]->#[ok ,count], {#E, "@index": INDEX(#index)})
→ MakeBinderArgument(#binder, GetBinderType(GetElementOptionElement(#element, "type"), {#E}), MakeBinderKey(#binder), GetRefElement(#element, (), #index), #count, [ok  count]->#[ok ,count], {#E})

func GetBinderType(List<ElementOption>) -> Text4_text_sort
rule GetBinderType((), {#E})                → text⟦String⟧
rule GetBinderType((TYPE(#ruleRef),), {#E, "@index": INDEX(RULEINDEX({#I}))}) → text⟦⟨STRING:MakeSortName2(EnvString("@id", {#E}), #ruleRef, IsStringRuleRuleRef(#ruleRef, {#I}))⟩⟧


/* Handle <boundvar=x>:

  For the printing rule: get a fresh new variable to get a new name. Limit binder to
  token, and due to CRSX sort system limitation, the fresh variable sort is $String
  Due to current crsx limitation, there is no guarantee the name respects the grammar, and
  that the name is preserved. Fine for now...

   Don't add sort argument.

 */
func MakeBinderArgument(String, Text4_text_sort, String, Option<String>, Numeric, [OK_SORT  Numeric]->Text4_text_sort) -> Text4_text_sort

// Binder on sugar: that's an error
rule MakeBinderArgument(#binder, #type, #key, NONE, #count, [ok  count]->#[ok ,count], {#E})
→ Special_error(text⟦Invalid binder option on an element that is either a constant or skipped.⟧)

rule MakeBinderArgument(#binder, #type, #key, SOME(#ruleref), #count, [ok  count]->#[ok ,count], {#E,
  "@id"      : STRING(#id),
  "@freshes" : TEXTS(#freshes),
  "@prhs"    : TEXTS(#rhs)
})
→ 
#[OK ,#count, {#E,
    #key       : BOUNDVAR(#ruleref, #type),
    "@freshes" : TEXTS((text⟦[†⟨#type⟩]⟧, #freshes...)),
    "@prhs"    : TEXTS((Text-String2(text⟦Show(⟨STRING:#binder⟩)⟧), #rhs...))
  }]

// Check element option is list of <bound=variable>
func MaybeMakeBindsArgument(List<ElementOption>, ANTLR_element_sort, Numeric, [OK_SORT  Numeric]->Text4_text_sort) -> Text4_text_sort

// No <bound> option. Check for variable
rule MaybeMakeBindsArgument((), #element, #count, [ok  count]->#[ok ,count], {#E})
→ MaybeMakeSymbolArgument(GetElementOptionElement(#element, "variable"), GetElementOptionElement(#element, "type"), #element, #count, [ok  count]->#[ok ,count], {#E})

rule MaybeMakeBindsArgument((#binds, #bindss...), #element, #count, [ok  count]->#[ok ,count], {#E, "@sort":TEXT(#sort), "@sep":TEXT(#sep)})
→ MakeBindsArguments(OK, (#binds, #bindss...), 
   [ok]->MakeRawArgument(ok, #element, #count, [ok  count]->#[ok ,count]), {#E,
    "@sort"    : TEXT(text⟦†⟨#sort⟩†⟨#sep⟩[⟧),
    "@sep"     : TEXT(text⟦] -> ⟧)
  })

func MakeBindsArguments(OK_SORT, List<ElementOption>, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeBindsArguments(OK, (), [ok]->#[ok], {#E})
→ #[OK, {#E}]

rule MakeBindsArguments(OK, (BINDS(#binder), #binds...), [ok]->#[ok], {#E})
→ MakeBindsArgument(#binder, MakeBinderKey(#binder), [ok]->MakeBindsArguments(ok, #binds, [ok]->#[ok]), {#E})

func MakeBindsArgument(String, String, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeBindsArgument(#binder, #key, [ok]->#[ok], {#E})
→ MakeBindsArgument2(#binder, #key, [ok]->#[ok], {#E})

func MakeBindsArgument2(String, String, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeBindsArgument2(#binder, #key, [ok]->#[ok], {#E,
  "@sort"    : TEXT(#sort),
  "@binders" : TEXTS(#binders),
  #key       : BOUNDVAR(#ruleref, #type)
})
→ #[OK, {#E,
    "@sort"    : TEXT(text⟦†⟨#sort⟩ †⟨#type⟩⟧),
    "@binders" : TEXTS((text⟦⟨STRING:#binder⟩⟧, #binders...))
  }]


func MaybeMakeSymbolArgument(List<ElementOption>, List<ElementOption>, ANTLR_element_sort, Numeric, [OK_SORT  Numeric]->Text4_text_sort) -> Text4_text_sort

// No <variable=sort> option. done.
rule MaybeMakeSymbolArgument((), #type, #element, #count, [ok  count]->#[ok ,count], {#E})
→ MakeRawArgument(OK, #element, #count, [ok  count]->#[ok ,count], {#E})

// <variable> and no <type> option. done.
rule MaybeMakeSymbolArgument((SYMBOL(NONE),), (), #element, #count, [ok  count]->#[ok ,count], {#E})
→ MakeRawArgument(OK, #element, #count, [ok  count]->#[ok ,count], {#E})

// <variable> and <type> option. Update type.
rule MaybeMakeSymbolArgument((SYMBOL(NONE),), (TYPE(#RULE_REF),), #element, #count, [ok  count]->#[ok ,count], {#E})
→ MakeRawArgument(OK, element⟦ #RULE_REF ⟧, #count, [ok  count]->#[ok ,count], {#E})

// Got a variable referring to a rule.
rule MaybeMakeSymbolArgument((SYMBOL(#RULE_REF),), #type, #element, #count, [ok  count]->#[ok ,count], {#E})
→ MakeRawArgument(OK, element⟦ #RULE_REF ⟧, #count, [ok  count]->#[ok ,count], {#E})


// Common case: element has no options, and not fused. Make regular argument
func MakeRawArgument(OK_SORT, ANTLR_element_sort, Numeric, [OK_SORT  Numeric]->Text4_text_sort) -> Text4_text_sort

rule MakeRawArgument(OK, #element, #count, [ok  count]->#[ok ,count], {#E, "@sort":TEXT(#sort), "@sep":TEXT(#sep)})
→ MakeArgument(#element, #count, [ok]->#[ok ,Plus( #count, 1)], {#E,
    "@sort" : TEXT(text⟦†⟨#sort⟩†⟨#sep⟩⟧),
    "@sep"  : TEXT(text⟦, ⟧)
  })

//
func MakeArgument(ANTLR_element_sort, Numeric, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

// labeled element with optional ebnf suffix
rule MakeArgument(element⟦ #labeledElement #element_A1_S1 ⟧, #count, [ok]->#[ok], {#E, "@plhs": TEXTS(#printerLHS), "@inblock":#inblock})
→ MakeArgFromAtom(GetAtom(#labeledElement), MapToList1(#element_A1_S1, #inblock), #count, [ok]->#[ok], {#E})

// atom with optional ebnf
rule MakeArgument(element⟦ #atom #element_A2_S1 ⟧, #count, [ok]->#[ok], {#E, "@inblock":#inblock})
→ MakeArgFromAtom(#atom, MapToList2(#element_A2_S1, #inblock), #count, [ok]->#[ok], {#E})

// A trivial block with no suffix: just inlined.
rule MakeArgument(element⟦ #block ⟧, #count, [ok]->#[ok], {#E})
→ MakeArgFromBlock(#block, #count, [ok]->#[ok], {#E})

// A trivial block with suffix: generate printing rule for block and apply it.
rule MakeArgument(element⟦ #block #blockSuffix ⟧, #count, [ok]->#[ok], {#E})
→ MakeArgFromSuffixedBlock(#block, #blockSuffix, #count, [ok]->#[ok], {#E})

// Skip action...
rule MakeArgument(element⟦ #ACTION #QUESTION? ⟧, #count, [ok]->#[ok], {#E})
→ #[OK, {#E}]

//
func MakeArgFromAtom(ANTLR_atom_sort, Boolean /* Is list? */, Numeric, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeArgFromAtom(atom⟦ #STRING_LITERAL #elementOptions? ⟧, TRUE, #count, [ok]->#[ok], {#E, "@sort": TEXT(#sort), "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS)})
→ #[OK, {#E, "@sort":TEXT(text⟦†⟨#sort⟩List<String>⟧),
       "@plhs": TEXTS((MakeMetaVar(#count, (), FALSE), #printerLHS...)),
       "@prhs": TEXTS((MakeTerminalText(#count, (), TRUE), #printerRHS...))
  }]

// String literal are constants. Print it
rule MakeArgFromAtom(atom⟦ #STRING_LITERAL #elementOptions? ⟧, FALSE, #count, [ok]->#[ok], {#E, "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS)})
→ #[OK, {#E, "@prhs": TEXTS((StringToText(#STRING_LITERAL), #printerRHS...))}]

// List of token ref.
rule MakeArgFromAtom(atom⟦ #TOKEN_REF #elementOptions? ⟧, TRUE, #count, [ok]->#[ok], {#E, "@sort": TEXT(#sort), "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS)})
→
#[OK, {#E, "@sort":TEXT(text⟦†⟨#sort⟩List<String>⟧),
       "@plhs": TEXTS((MakeMetaVar(#count, (), FALSE), #printerLHS...)),
       "@prhs": TEXTS((MakeTerminalText(#count, (), TRUE), #printerRHS...))
  }]

rule MakeArgFromAtom(atom⟦ #TOKEN_REF #elementOptions? ⟧, FALSE, #count, [ok]->#[ok], {#E, "@index": INDEX(RULEINDEX({#I}))})
→ MakeArgFromTokenRef(IsConstantAtom(atom⟦ #TOKEN_REF ⟧, {#I}), #TOKEN_REF, #count, [ok]->#[ok], {#E})

rule MakeArgFromAtom(atom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧, TRUE, #count, [ok]->#[ok], {#E, "@sort": TEXT(#sort), "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS), "@sublist": WRAPPER([t  x]->#wrap[t ,x]),
     "@binders": TEXTS(#binders), "@index": INDEX(RULEINDEX({#I}))})
→ #[OK, {#E, "@sort": TEXT(text⟦†⟨#sort⟩List<⟨STRING:MakeSortName2(EnvString("@id", {#E}), #RULE_REF, IsStringRuleRuleRef(#RULE_REF, {#I}))⟩>⟧),
       "@plhs": TEXTS((MakeMetaVar(#count, #binders, FALSE), #printerLHS...)),
       "@prhs": TEXTS((MakeRulerefText(#RULE_REF, #count, #binders, TRUE, [t  x]->#wrap[t ,x], MakeSortName2(EnvString("@id", {#E}), #RULE_REF, IsStringRuleRuleRef(#RULE_REF, {#I})), {#E}), #printerRHS...))}]

rule MakeArgFromAtom(atom⟦ #RULE_REF #ARG_ACTION? #elementOptions? ⟧, FALSE, #count, [ok]->#[ok], {#E,
  "@sort": TEXT(#sort), "@plhs": TEXTS(#printerLHS),
  "@prhs": TEXTS(#printerRHS), "@sublist": WRAPPER([t  x]->#wrap[t ,x]),
  "@binders": TEXTS(#binders), "@index": INDEX(RULEINDEX({#I}))
})
→ #[OK, {#E, "@sort": TEXT(text⟦†⟨#sort⟩⟨STRING:MakeSortName2(EnvString("@id", {#E}), #RULE_REF, IsStringRuleRuleRef(#RULE_REF, {#I}))⟩⟧),
       "@plhs": TEXTS((MakeMetaVar(#count, #binders, FALSE), #printerLHS...)),
       "@prhs": TEXTS((MakeRulerefText(#RULE_REF, #count, #binders, FALSE, [t  x]->#wrap[t ,x], MakeSortName2(EnvString("@id", {#E}), #RULE_REF, IsStringRuleRuleRef(#RULE_REF, {#I})), {#E}), #printerRHS...))}]

func MakeArgFromTokenRef(Boolean, String, Numeric, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeArgFromTokenRef(TRUE, #token, #count, [ok]->#[ok], {#E, "@prhs": TEXTS(#printerRHS)})
→  #[OK, {#E, "@prhs": TEXTS((TokenRefToText(#token, {#E}), #printerRHS...))}]

rule MakeArgFromTokenRef(FALSE, #token, #count, [ok]->#[ok], {#E,
    "@sort": TEXT(#sort), "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS),
    "@binders": TEXTS(#binders)
})
→ #[OK, {#E, "@sort": TEXT(text⟦†⟨#sort⟩String⟧),
       "@plhs": TEXTS((MakeMetaVar(#count, #binders, FALSE), #printerLHS...)),
       "@prhs": TEXTS((MakeTerminalText(#count, #binders, FALSE), #printerRHS...))}]

func MakeArgFromSuffixedBlock(ANTLR_block_sort, ANTLR_blockSuffix_sort, Numeric, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

/* The block has to be trivial with only one alternative. Something like (C p)*
 * Generate an helper rule printing the constant tokens
 */
rule MakeArgFromSuffixedBlock(block⟦ ( #element* ) ⟧, #blockSuffix, #count, [ok]->#[ok], {#E, "@block-count": NUM(#blkcnt), "@index": INDEX(#index)})
→ MakeArgFromSuffixedBlock1(GetRefElements(#element*, #index), #element*, #blkcnt, #count, [ok]->#[ok], {#E, "@block-count": NUM(Plus( #blkcnt, 1))})

func MakeArgFromSuffixedBlock1(Option<String>, List<ANTLR_element_sort>, Numeric, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeArgFromSuffixedBlock1(NONE, #element*, #blkcnt, #count, [ok]->#[ok], {#E}) → Error( "constant subrules not supported yet")

rule MakeArgFromSuffixedBlock1(SOME(#ruleRef), #element*, #blkcnt, #count, [ok]->#[ok], {#E, "@id": STRING(#id), "@index": INDEX(RULEINDEX({#I}))})
→ MakeArgFromSuffixedBlock2(MakeBlockRuleName(#ruleRef, #blkcnt), #ruleRef,
       MakeSortForBlock(#id, MakePrinterName2(#id, MakeBlockRuleName(#ruleRef, #blkcnt)),
                        #ruleRef,
                        UnSOME(MaybeMakeArguments(#element*, [ok]->ThenGetSome(ok, "@prhs"), {#E, "@plhs": TEXTS(()), "@prhs": TEXTS(()), "@inblock":YES})), {#I}),
       #count, [ok]->#[ok], {#E})

func MakeArgFromSuffixedBlock2(String, String, PPair<Text4_text_sort Text4_text_sort>, Numeric, [OK_SORT]->Text4_text_sort) -> Text4_text_sort

rule MakeArgFromSuffixedBlock2(#blockRuleRef, #ruleRef, PairCons(#blocksort, #printer), #count, [ok]->#[ok], {#E, "@sort": TEXT(#sort), "@id": STRING(#id), "@plhs": TEXTS(#printerLHS), "@prhs": TEXTS(#printerRHS), 
     "@sublist": WRAPPER([t  x]->#wrap[t ,x]), "@pt-subs":TEXT(#ptsubs), "@binders": TEXTS(#binders), 
     "@index": INDEX(RULEINDEX({#I}))})
→ #[OK, {#E, "@sort": TEXT(text⟦†⟨#sort⟩List<⟨STRING:MakeSortName2(#id, #ruleRef, IsStringRuleRuleRef(#ruleRef, {#I}))⟩>⟧),
       "@plhs": TEXTS((MakeMetaVar(#count, (), FALSE), #printerLHS...)),
       "@prhs": TEXTS((MakeRulerefText(#blockRuleRef, #count, #binders, TRUE, [t  x]->#wrap[t ,x], MakeSortName2(#id, #ruleRef, IsStringRuleRuleRef(#ruleRef, {#I})), {#E}), #printerRHS...)),
       "@pt-subs": TEXT(text⟦‹#ptsubs›‹#blocksort›‹#printer›⟧)}]

func MakeSortForBlock(String, Text4_text_sort, String, StringEntry) -> PPair<Text4_text_sort/* sort */ Text4_text_sort /* printer */>
rule MakeSortForBlock(#id, #name, #ruleRef, TEXTS(#prhs), {#I})
→ PairCons(
  text⟦¶func †⟨#name⟩(⟨STRING:MakeSortName2(#id, #ruleRef, IsStringRuleRuleRef(#ruleRef, {#I}))⟩) -> Text4_text_sort⟧,
  text⟦¶rule †⟨#name⟩(#1) → †⟨Text-Text(Text-ReverseConcat(#prhs))⟩⟧)

// Helpers

//
rule MapToList1(element_A1_S1⟦ #ebnfSuffix ⟧, NO)  → TRUE
rule MapToList1(element_A1_S1⟦ ⟧, NO)              → FALSE
rule MapToList1(element_A1_S1⟦ #ebnfSuffix ⟧, YES) → FALSE
rule MapToList1(element_A1_S1⟦ ⟧, YES)             → FALSE

//
rule MapToList2(element_A2_S1⟦ #ebnfSuffix ⟧, NO)  → TRUE
rule MapToList2(element_A2_S1⟦ ⟧, NO)              → FALSE
rule MapToList2(element_A2_S1⟦ #ebnfSuffix ⟧, YES) → FALSE
rule MapToList2(element_A2_S1⟦ ⟧, YES)             → FALSE

// Extract atom from labeled element
func GetAtom(ANTLR_labeledElement_sort) -> ANTLR_atom_sort
rule GetAtom(labeledElement⟦ #id #labeledElement_S1 #atom  ⟧) → #atom
rule GetAtom(labeledElement⟦ #id #labeledElement_S1 #block ⟧) → Special_error(text⟦Subrules are not allowed.⟧, {#L})

//
rule EnvString(#key, {#E}) → EnvString2(MapGetD({#E}, #key, STRING("")))

rule EnvString2(STRING(#value)) → #value

//
func MakeSortName -> Text4_text_sort
rule MakeSortName
({#E, "@id": STRING(#id), "@ruleRef": STRING(#ruleRef)})→ StringToText(ConcatString( GetPrefix(#id), #ruleRef, GetSortSuffix))

//
func MakeSortName2(String, String, Bool /* String rule?*/) -> String

rule MakeSortName2(#id, #ruleRef, FALSE)
→ ConcatString( GetPrefix(#id), #ruleRef, GetSortSuffix)

rule MakeSortName2(#id, #ruleRef, TRUE)
→ "String"

func MakeAlternativeName(List<ANTLR_labeledAlt_S1_sort>, Numeric, Boolean) -> Text4_text_sort

rule MakeAlternativeName((ANTLR_labeledAlt_S1(#POUND, #altid),), #count, #unique, {#E, "@id": STRING(#id)})
→ StringToText(ConcatString( GetPrefix(#id), UnwrapId(#altid)))

rule MakeAlternativeName((), #count, FALSE, {#E, "@id": STRING(#id), "@ruleRef": STRING(#ruleRef)})
→ StringToText(ConcatString( GetPrefix(#id), #ruleRef, "_A", FormatNumber( #count)))

rule MakeAlternativeName((), #count, TRUE, {#E, "@id": STRING(#id), "@ruleRef": STRING(#ruleRef)})
→ StringToText(ConcatString( GetPrefix(#id), #ruleRef))

func MakeBinderKey(String) -> String
rule MakeBinderKey(#binder) → ConcatString( "/", #binder)

/*―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

 Printer helpers

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――*/

// Generate printer function name corresponding to the given ruleref
func MakePrinterName -> Text4_text_sort

rule MakePrinterName  ({#E, "@id": STRING(#id), "@ruleRef": STRING(#ruleRef)})→ MakePrinterName2(#id, #ruleRef)

// Generate printer function name corresponding to the given ruleref
func MakePrinterName2(String, String) -> Text4_text_sort
rule MakePrinterName2(#id, #ruleRef) → StringToText(ConcatString( #id, "_Print_", #ruleRef))

// Print metavar, optionally with binders
func MakeMetaVar(Numeric, List<Text4_text_sort>, Boolean /* Whether to only apply binders */) -> Text4_text_sort
rule MakeMetaVar(#count, #binders, #applyOnly)
→ text⟦†⟨If(#applyOnly,  text⟦⟧, MakeMetaBinders(#binders))⟩#†⟨NumberToText(#count)⟩†⟨MakeMetaArgs(#binders)⟩⟧

//
func MakeMetaArgs(List<Text4_text_sort>) -> Text4_text_sort
rule MakeMetaArgs(())           → text⟦⟧
rule MakeMetaArgs((#arg,#args...))
→ text⟦[†⟨ReverseTextFold((#arg,#args...), text⟦, ⟧)⟩]⟧

//
func MakeMetaBinders(List<Text4_text_sort>) -> Text4_text_sort
rule MakeMetaBinders(())           → text⟦⟧
rule MakeMetaBinders((#arg,#args...)) → text⟦[†⟨ReverseTextFold((#arg,#args...), text⟦ ⟧)⟩]->⟧

//
func MakeTerminalText(Numeric, List<Text4_text_sort>, Boolean) -> Text4_text_sort
rule MakeTerminalText(#count, #binders, FALSE)
→ Text-String2(MakeMetaVar(#count, #binders, TRUE))
  
rule MakeTerminalText(#count, (), TRUE)
→ Text-String(text⟦TextFold(Map((x) -> StringToText(x), †⟨MakeMetaVar(#count, (), TRUE)⟩), †⟨Text-Text(text⟦ ⟧)⟩)⟧)

func MakeRulerefText(String, Numeric, List<Text4_text_sort>, Boolean /* list? */, [Text4_text_sort]->Text4_text_sort, String /* sort */) -> Text4_text_sort

rule MakeRulerefText(#Ruleref, #count, #binders, FALSE, [t  x]->#wrap[t ,x], #sort, {#E})
→ If( Equal( #sort, "String")
    , ()->Text-String2(text⟦†⟨MakeMetaVar(#count, #binders, TRUE)⟩⟧)
    , ()->Text-String(text⟦†⟨MakePrinterName({#E, "@ruleRef": STRING(#Ruleref)})⟩(†⟨#wrap[StringToText(#sort) ,MakeMetaVar(#count, #binders, TRUE)]⟩)⟧))

rule MakeRulerefText(#ruleRef, #count, #binders, TRUE, [t  x]->#wrap[t ,x], #sort, {#E})
→ If( Equal( #sort, "String")
    , ()->Text-String2(text⟦TextFold(Map((x) ->  StringToText(x), †⟨#wrap[StringToText(#sort) ,MakeMetaVar(#count, #binders, TRUE)]⟩), †⟨Text-Text(text⟦ ⟧)⟩)⟧)
    , ()->Text-String(text⟦TextFold(Map((x) ->†⟨MakePrinterName({#E, "@ruleRef": STRING(#ruleRef)})⟩(x), †⟨#wrap[StringToText(#sort) ,MakeMetaVar(#count, #binders, TRUE)]⟩), †⟨Text-Text(text⟦ ⟧)⟩)⟧))
 
/* Generate an unique fake rule name for block. */
func MakeBlockRuleName(String, Numeric) -> String
rule MakeBlockRuleName(#parentRuleRef, #blockCount)
→ ConcatString( #parentRuleRef, "_S", FormatNumber( #blockCount))

func TokenRefToText(String) -> Text4_text_sort
rule TokenRefToText(#tokenRef, {#E, "@index": INDEX(RULEINDEX({#I}))}) → text⟦ ⟨STRING:UnQuote(UnSOME(GetConstantTokenRef(#tokenRef, {#I})))⟩ ⟧

func UnQuote(String) -> String
rule UnQuote(#) → RemoveFirstChar(RemoveLastChar(#))

func GetPrefix(String) -> Text4_text_sort
rule GetPrefix(#id) → ConcatString( #id, GetEnv( "prefixsep", "_"))

func GetSortSuffix -> Text4_text_sort
rule GetSortSuffix → GetEnv( "sortsuffix", "_sort")



