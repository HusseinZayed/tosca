// Copyright (c) 2016 IBM Corporation.
/*
 * Generate C++ header file
 */
import Std::Core
import Std::Path
import Std::String
import Std::Mapdef
import Std::Listdef
import Core::Core
import Core::Utils
import Std::Text
import Text::Text4
import Cg::Cppcommon
import Cg::Cppenv

import Systemdef

/* Generate C++ header file for module */
func CppHeader(Module) -> Text4_text_sort
rule CppHeader(Module(#url:String, Content::Loaded(#content:LoadedContent)))
→ text⟦#ifndef †⟨HeaderGuard(#url)⟩
#define †⟨HeaderGuard(#url)⟩
#include "ts.h"
†⟨CppIncludes(GetImports(#content))⟩
†⟨CppForwardDecls(MapValues<String Core_cdecl_sort>(GetDataSorts(#content)))⟩
†⟨CppClassDecls(MapValues<String Core_cdecl_sort>(GetDataSorts(#content)))⟩
†⟨CppFunctionDecls(SetContent(CppNewEnv, #content))⟩
#endif⟧

/* Generate C++ header guard */
func HeaderGuard(#url: String) -> Text4_text_sort
→ text⟦_⟨STRING: UpCase(PathFileStem(#url))⟩⟧

/* Generate C++ header inclusion declarations */
func CppIncludes(#imports: List<Core_cqconstructor_sort>) -> Text4_text_sort
→ TextFold(Map<Core_cqconstructor_sort Text4_text_sort>((imp) -> text⟦
#include "⟨STRING: QConsToString(imp, "/")⟩"⟧, #imports), text⟦⟧)

// --------- Data sorts

/* Generate data sort and data form forward declarations */
func CppForwardDecls(#datasorts: List<Core_cdecl_sort>) -> Text4_text_sort
→ TextFold(Map<Core_cdecl_sort Text4_text_sort>((decl) -> CppForwardDecl(decl), #datasorts), text⟦⟧)

func CppForwardDecl(Core_cdecl_sort) -> Text4_text_sort
rule CppForwardDecl(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧)
→ text⟦
†⟨CppTemplatePrefix(#csortvars?)⟩
class †⟨SortNameToCppClassName(#CONSTRUCTOR)⟩;
†⟨TextFold(Map<Core_cform_sort Text4_text_sort>((cform) -> CppForwardForm(#CONSTRUCTOR, #csortvars?, cform), #cform*), text⟦⟧)⟩⟧

func CppForwardForm(String, List<Core_csortvars_sort>, Core_cform_sort) -> Text4_text_sort
  rule CppForwardForm(#sortname, #csortvars?, cform⟦ ##CONSTRUCTOR ##csorts? ⟧)
  → text⟦
    †⟨CppTemplatePrefix(#csortvars?)⟩
    class †⟨FormCppClassName(#CONSTRUCTOR)⟩;⟧

  rule CppForwardForm(#sortname, #csortvars?, cform⟦ allows-variable ⟧)
  → text⟦
    †⟨CppTemplatePrefix(#csortvars?)⟩
    class †⟨SortNameToCppClassName(#sortname)⟩Var;⟧

/* Generate class and method signatures for data sorts */
func CppClassDecls(#datasorts: List<Core_cdecl_sort>) -> Text4_text_sort
→ TextFold(Map<Core_cdecl_sort Text4_text_sort>((decl) -> CppClassDecl(decl), #datasorts), text⟦⟧)

func CppClassDecl(Core_cdecl_sort) -> Text4_text_sort
rule CppClassDecl(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧)
→ text⟦
†⟨TextFold(Map<Core_cform_sort Text4_text_sort>((cform) -> CppMethodNew(#CONSTRUCTOR, #csortvars?, cform, IsNotEmpty<Core_csortvars_sort>(#csortvars?)), #cform*), text⟦⟧)⟩
†⟨CppTemplatePrefix(#csortvars?)⟩
class †⟨SortNameToCppClassName(#CONSTRUCTOR)⟩ : public _Term
{
  †⟨TextFold(Map<Core_cform_sort Text4_text_sort>((cform) -> CppMethodAs(#CONSTRUCTOR, #csortvars?, cform, IsNotEmpty<Core_csortvars_sort>(#csortvars?)), #cform*), text⟦⟧)⟩
};
†⟨TextFold(Map<Core_cform_sort Text4_text_sort>((cform) -> CppFormClass(#CONSTRUCTOR, #csortvars?, cform), #cform*), text⟦⟧)⟩
⟧

/* Generate class and method signatures for the given data form */
func CppFormClass(String, List<Core_csortvars_sort>, Core_cform_sort) -> Text4_text_sort
  rule CppFormClass(#sortname, #csortvars?, cform⟦ ##CONSTRUCTOR ##csorts? ⟧)
  → text⟦
  †⟨CppTemplatePrefix(#csortvars?)⟩
  class †⟨FormCppClassName(#CONSTRUCTOR)⟩: public †⟨SortNameToCppClassName(#sortname)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩
  {
    †⟨CppFormMethodAs(#sortname, #csortvars?, #CONSTRUCTOR, IsNotEmpty<Core_csortvars_sort>(#csortvars?))⟩
    †⟨CppFormMethodCopy(#sortname, #csortvars?, #CONSTRUCTOR, IsNotEmpty<Core_csortvars_sort>(#csortvars?))⟩
  };⟧

  rule CppFormClass(#sortname, #csortvars?, cform⟦ allows-variable ⟧)
  → text⟦/*TODO: allows-variable*/⟧

// --------- Function sorts

/* Generate function declarations corresponding to function sorts. */
func CppFunctionDecls(#env: {String : EnvEntry}) -> Text4_text_sort
→ TextFold(Map<String Text4_text_sort>((key) ->CppFunctionDecl(#env, key), MapKeys<String Core_cdecl_sort>(GetFuncSorts(GetContent(#env)))), text⟦⟧)
