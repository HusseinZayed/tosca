// Copyright (c) 2016 IBM Corporation.

import Std::Core
import Std::String
import Std::Num
import Std::Listdef
import Std::Text
import Text::Text4
import Core::Core
import Core::Utils
import Cg::Cppenv
import Systemdef

// --- Data translation functions

/* Generate a constructor method for the given form. */
func CppMethodNew(String, List<Core_csortvars_sort>, Core_cform_sort, Bool) -> Text4_text_sort
  rule CppMethodNew(#sortname, #csortvars?, cform⟦ ##CONSTRUCTOR ##csorts? ⟧, #header)
  → text⟦
    †⟨CppTemplatePrefix(#csortvars?)⟩
    †⟨CppTypeName(#csortvars?, #sortname)⟩ †⟨CppConsMethodName(#CONSTRUCTOR)⟩ (Context context†⟨MaybeCppFormalParams(#csorts?, text⟦, ⟧, FALSE)⟩)†⟨
    If<Text4_text_sort>(GenBody(#csortvars?, #header), ()->text⟦{
       return (*new †⟨SortNameToCppClassName(#CONSTRUCTOR)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩(†⟨MaybeCppFormalParams(#csorts?, text⟦⟧, TRUE)⟩));
    }⟧, ()->text⟦;⟧)⟩
  ⟧
/*
  rule FormToCppMethodNew(#constructor, #csortvars?, cform⟦ allows-variable ⟧, #body)
  → text⟦
    static †⟨SortParamToTypeParam(#csortvars?, TRUE)⟩ Var⟨STRING: ToJavaClassName(#constructor)⟩†⟨SortParamToTypeParam(#csortvars?, FALSE)⟩ ⟨STRING: ToJavaMethodName(ConcatString("var", #constructor))⟩ (Context ctx, String hint)
    {
      return new Var⟨STRING: ToJavaClassName(#constructor)⟩†⟨SortParamToTypeParam(#csortvars?, FALSE)⟩(ctx.makeGlobalName(hint));
    }⟧
*/

/* Generate base lookup method (the 'as' method) for the given form. */
func CppMethodAs(String, List<Core_csortvars_sort>, Core_cform_sort, Bool) -> Text4_text_sort
  rule CppMethodAs(#sortname, #csortvars?, cform⟦ ##CONSTRUCTOR ##csorts? ⟧, #header)
  → text⟦
    †⟨TextIf(#header, ()->text⟦virtual⟧)⟩ Optional<†⟨FormCppClassName(#CONSTRUCTOR)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩&> †⟨CppAsMethodName(#CONSTRUCTOR)⟩(Context context)†⟨
    If<Text4_text_sort>(GenBody(#csortvars?, #header), ()->text⟦{
       return Optional<†⟨FormCppClassName(#CONSTRUCTOR)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩&>::nullopt;
    }⟧, ()->text⟦;⟧)⟩⟧

  rule CppMethodAs(#enumname, #csortvars?, cform⟦ allows-variable ⟧)
  → text⟦⟧

/*
func FormToMethodMemoAs(String, List<Core_csortvars_sort>, Core_cform_sort) -> Text4_text_sort
  rule FormToMethodMemoAs(#enumname, #csortvars?, cform⟦ ##CONSTRUCTOR ##csorts? ⟧)
  → text⟦
   @Override
   final public †⟨EValueClassName(#CONSTRUCTOR)⟩†⟨SortParamToTypeParam(#csortvars?, FALSE)⟩ †⟨MethodNameAs(#CONSTRUCTOR)⟩(Context context)
   {
     return eval(context).†⟨MethodNameAs(#CONSTRUCTOR)⟩(context);
   }⟧

 rule FormToMethodMemoAs(#enumname, #csortvars?, cform⟦ allows-variable ⟧)
 → text⟦⟧
*/

/* Generate overridden lookup method (the 'as' method) for the given form. Generate body only if asked for. */
func CppFormMethodAs(String, List<Core_csortvars_sort>, String, Bool) -> Text4_text_sort
  rule CppFormMethodAs(#sortname, #csortvars?, #formname, #header)
  → text⟦
    Optional<†⟨FormCppClassName(#formname)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩&> †⟨CppFormQualifier(#formname, #csortvars?, #header)⟩†⟨CppAsMethodName(#formname)⟩(Context context)†⟨
    If<Text4_text_sort>(GenBody(#csortvars?, #header), ()->text⟦{
       return make_optional<†⟨FormCppClassName(#formname)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩&>(*this);
    }⟧, ()->text⟦;⟧)⟩⟧

/* Generate overridden copy method for the given form. Generate body only if asked for. */
func CppFormMethodCopy(String, List<Core_csortvars_sort>, String, Bool) -> Text4_text_sort
  rule CppFormMethodCopy(#sortname, #csortvars?, #formname, #header)
  → text⟦
    Term †⟨CppQualifier(#formname, #csortvars?, #header)⟩Copy(Context context)†⟨
    If<Text4_text_sort>(GenBody(#csortvars?, #header), ()->text⟦{
       return (*new †⟨FormCppClassName(#formname)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩());
    }⟧, ()->text⟦;⟧)⟩⟧

// --- Function translation functions

func CppFunctionDecl(#env: {String : EnvEntry}, #key: String) -> Text4_text_sort
→ CppFunctionDecl2(#env, UnSOME<Core_cdecl_sort>(GetFuncSort(GetContent(#env), #key)), HasSortVars(UnSOME<Core_cdecl_sort>(GetFuncSort(GetContent(#env), #key))))

func CppFunctionDecl2({String : EnvEntry}, Core_cdecl_sort, Bool) -> Text4_text_sort
rule CppFunctionDecl2(#env, cdecl⟦ ##canno* ##extern_TOK? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧, #body)
→ text⟦
   †⟨CppTemplatePrefix(#csortvars?)⟩
   †⟨CppTypeRef(#csort)⟩ †⟨CppFnName(#CONSTRUCTOR)⟩(Context ctx†⟨CppMaybeFunctionParams(#env, #csorts?, #body)⟩⟧

func CppMaybeFunctionParams({String : EnvEntry}, List<Core_csorts_sort>, Bool) -> Text4_text_sort
   rule CppMaybeFunctionParams(#env, csorts?⟦⟧, #body)
   → CppBody(#env, #body)

   rule CppMaybeFunctionParams(#env, csorts?⟦ ( ##csort* ) ⟧, #body)
   → CppFunctionParams(#env, #csort*, #body)

/* Generate method signature and record the argument names in the environment, keeping them in order */
func CppFunctionParams({String : EnvEntry}, List<Core_csort_sort>, Bool) -> Text4_text_sort

  rule CppFunctionParams(#env, csort*⟦ ⟧, #body)
   → CppBody(#env, #body)

  rule CppFunctionParams(#env, csort*⟦ ##csort ##csort* ⟧, #body)
  → CppFunctionParam(#env, CppTypes(#csort), #csort, (env) -> CppFunctionParams(env, #csort*, #body))

func CppFunctionParam({String : EnvEntry}, List<Text4_text_sort>, Core_csort_sort, ({String : EnvEntry}) -> Text4_text_sort) -> Text4_text_sort

  // Monomorphic sort
  rule CppFunctionParam(#env, Cons(#type:Text4_text_sort, List<Text4_text_sort>::Nil), csort⟦ ##CONSTRUCTOR ##csorts? ⟧, #next)
  → text⟦, †⟨#type⟩ ⟨STRING: value:String⟩†⟨#next(AddParam(#env, text⟦⟨STRING: value⟩⟧, csort⟦ ##CONSTRUCTOR ##csorts? ⟧))⟩⟧

  // Sort variable
  rule CppFunctionParam(#env, Cons(#type:Text4_text_sort, List<Text4_text_sort>::Nil), csort⟦ ##VARIABLE ⟧, #next)
  → text⟦, †⟨#type⟩ ⟨STRING: value:String⟩†⟨#next(AddParam(#env, text⟦⟨STRING: value⟩⟧, csort⟦ ##VARIABLE ⟧))⟩⟧


/*
  // Syntactic variable sort
  //rule CppFunctionParams(#env, csort⟦ [ ##csort ] ##csort2 ⟧, #data, Cons(#type, #types), #rules)
   rule CppFunctionParam(#env, Core_csort_A3(#csort:Core_csort_sort, #csort2:Core_csort_sort), #data, Cons(#type:Text4_text_sort, #types:List<Text4_text_sort>), #csort*, #rules)
   → text⟦, †⟨#type⟩ ⟨STRING: var:String⟩†⟨
       CppFunctionParam(AddThunk(AddParam(#env, text⟦⟨STRING: var⟩⟧, #csort), text⟦⟨STRING: var⟩⟧), #csort2, #data, #types, #csort*, #rules)⟩⟧

     // Formal parameter sort
     //rule CppFunctionParams(#env, csort⟦ ( ##csort ) ##csort2 ⟧, #data, #rules)
     rule CppFunctionParam(#env, Core_csort_A4(#csort:Core_csort_sort, #csort2:Core_csort_sort), #data, #types, #csort*, #rules)
     → CppFunctionParam(#env, #csort2, #data, #types, #csort*, #rules)

     rule CppFunctionParam(#env, csort⟦ { ##cmapsort* } ⟧, #data, Cons(#type:Text4_text_sort, List<Text4_text_sort>::Nil), #csort*, #rules)
     → text⟦, †⟨#type⟩ ⟨STRING: map:String⟩†⟨
         CppFunctionParams(AddThunk(AddParam(AddMaybeData(#env, #data, text⟦⟨STRING: map⟩⟧), text⟦⟨STRING: map⟩⟧, Core_csort_A5(#cmapsort*)), text⟦⟨STRING: map⟩⟧), #csort*, #rules)⟩⟧

     rule CppFunctionParam(#env, csort⟦ data ##csort ⟧, #data, #types, #csort*, #rules)
     → CppFunctionParam(#env, #csort, TRUE, #types, #csort*, #rules)

     rule CppFunctionParam(#env, csort⟦ thunk ##csort ⟧, #data, #types, #csort*, #rules)
     → CppFunctionParam(#env, #csort, #data, #types, #csort*, #rules)
*/

/* Generate function body */
func CppBody({String : EnvEntry}, Bool) -> Text4_text_sort
  rule CppBody(#env, FALSE) → text⟦);⟧
  rule CppBody(#env, TRUE)  → text⟦) {

  }⟧

// --- Sort translation functions

/* Generate template prefix for given sort variables */
func CppTemplatePrefix(List<Core_csortvars_sort>) -> Text4_text_sort
  rule CppTemplatePrefix(csortvars?⟦⟧) → text⟦⟧

  rule CppTemplatePrefix(csortvars?⟦ ∀ ##variable_TOK+ . ⟧)
  → text⟦template <†⟨CppTypeParameters(#variable_TOK+)⟩>⟧

/* Generate comma-seperated list of type parameters */
func CppTypeParameters(#vars: List<String>) -> Text4_text_sort
→ TextFold(Map<String Text4_text_sort>((var) -> text⟦typename ⟨STRING: var⟩⟧, #vars), text⟦, ⟧)

/* Generate comma-separated list of type arguments from sort variables, if any*/
func MaybeCppTypeArguments(List<Core_csortvars_sort>) -> Text4_text_sort
  rule MaybeCppTypeArguments(csortvars?⟦⟧) → text⟦⟧
  rule MaybeCppTypeArguments(csortvars?⟦ ∀ ##variable_TOK+ . ⟧) → text⟦<†⟨CppTypeArguments(#variable_TOK+)⟩>⟧

/* Generate comma-separated list of type arguments from sort variables */
func CppTypeArguments(#vars: List<String>) -> Text4_text_sort
→ TextFold(Map<String Text4_text_sort>((var) -> text⟦⟨STRING: var⟩⟧, #vars), text⟦, ⟧)

/* Generate (possibility dependent) type name corresponding to the given data sort type */
func CppTypeName(List<Core_csortvars_sort>, String) -> Text4_text_sort
  rule CppTypeName(csortvars?⟦⟧, #sortname)
  → SortNameToCppClassNameRef(#sortname)

  //TODO: might need typename when occurs within a template class.
  rule CppTypeName(csortvars?⟦ ∀ ##variable_TOK+ . ⟧, #sortname)
  → text⟦†⟨SortNameToCppClassName(#sortname)⟩<†⟨CppTypeArguments(#variable_TOK+)⟩>&⟧

/* Generate arguments for template instantiation */
func MaybeCppTemplateArgs(List<Core_csorts_sort>) -> Text4_text_sort
    rule MaybeCppTemplateArgs(csorts?⟦ ⟧)
    → text⟦⟧

    rule MaybeCppTemplateArgs(csorts?⟦ ( ##csort* )⟧)
    → text⟦<†⟨TextFold(Map<Core_csort_sort Text4_text_sort>((csort) -> CppType(csort), #csort*), text⟦, ⟧)⟩>⟧

/* Convert list of sorts to a list of formal parameters or arguments. */
func MaybeCppFormalParams(List<Core_csorts_sort>, Text4_text_sort, Bool /* omit types */) -> Text4_text_sort
  rule MaybeCppFormalParams(csorts?⟦⟧, #sep, #isarg)
  → text⟦⟧

  rule MaybeCppFormalParams(csorts?⟦ ( ##csort*) ⟧, #sep, #isarg)
  → CppFormalParams(#csort*, 1, #sep, #isarg)

func CppFormalParams(List<Core_csort_sort>, Numeric, Text4_text_sort, Bool) -> Text4_text_sort
  rule CppFormalParams(csort*⟦⟧, #index, #sep, #isarg)
  → text⟦⟧

  rule CppFormalParams(csort*⟦ ##csort ##csort* ⟧, #index, #sep, #isarg)
  → text⟦†⟨#sep⟩†⟨CppFormalParam(CppTypes(#csort), #index, 1, #isarg)⟩†⟨CppFormalParams(#csort*, Plus(#index, 1), text⟦, ⟧, #isarg)⟩⟧

func CppFormalParam(List<Text4_text_sort>, Numeric, Numeric, Bool) -> Text4_text_sort
  rule CppFormalParam(Cons(#type:Text4_text_sort, List<Text4_text_sort>::Nil), #index, #subindex, #isarg)
  → text⟦†⟨If<Text4_text_sort>(#isarg, ()->text⟦⟧, ()->text⟦†⟨#type⟩& ⟧)⟩param†⟨NumberToText(#index)⟩⟧

  rule CppFormalParam(Cons(#type:Text4_text_sort, #types:List<Text4_text_sort>), #index, #subindex, #isarg)
  → text⟦†⟨If<Text4_text_sort>(#isarg, ()->text⟦⟧, ()->text⟦†⟨#type⟩& ⟧)⟩param†⟨NumberToText(#index)⟩_†⟨NumberToText(#subindex)⟩, †⟨CppFormalParam(#types, #index, Plus(#subindex, 1), #isarg)⟩⟧


/* Translate TS sort to equivalent list of C++ types:
 * A list of types corresponding to syntactic variable sorts and a type for the last sort
 * Note: return a type, not a type reference
 */
func CppTypes(#csort: Core_csort_sort) -> List<Text4_text_sort>
→ CppTypes2(#csort, ())

func CppTypes2(Core_csort_sort, List<Text4_text_sort> /* formal params */) -> List<Text4_text_sort>

  rule CppTypes2(csort⟦ ##CONSTRUCTOR ##csorts? ⟧, ())
  → Cons(text⟦†⟨SortNameToCppClassName(CppFixupPrimitiveType(#CONSTRUCTOR))⟩†⟨MaybeCppTemplateArgs(#csorts?)⟩⟧, Nil)
/*
  rule CppTypes2(csort⟦ ##CONSTRUCTOR ##csorts? ⟧, Cons(#formal:Text4_text_sort, #formals:List<Text4_text_sort>))
  → Cons(text⟦Closure†⟨NumberToText(Plus(ListLength<Text4_text_sort>(#formals), 1))⟩<⟨STRING:
       ToJavaClassName(FixupPrimitiveType(#CONSTRUCTOR))⟩†⟨MaybeSortsToTypeParams(#csorts?) /* Return type */⟩, †⟨
       TextFold(Cons(#formal, #formals), text⟦, ⟧) /* Formal params */⟩>⟧, Nil)
*/
  rule CppTypes2(csort⟦ ##VARIABLE ⟧, ())
  → Cons(text⟦⟨STRING: #VARIABLE⟩⟧, Nil)
/*
  rule CppTypes2(csort⟦ ##VARIABLE ⟧, Cons(#formal:Text4_text_sort, #formals:List<Text4_text_sort>))
  → Cons(text⟦Closure†⟨NumberToText(Plus(ListLength<Text4_text_sort>(#formals), 1))⟩<⟨STRING: #VARIABLE /* Return type */⟩, †⟨
       TextFold(Cons(#formal, #formals), text⟦, ⟧) /* Formal params */⟩>⟧, Nil)

  rule CppTypes2(csort⟦ [ ##csort ] ##csort2 ⟧, #formals)
  → Cons(text⟦Var†⟨SortToType(#csort)⟩⟧, CppTypes2(#csort2, #formals))

  rule CppTypes2(csort⟦ ( ##csort ) ##csort2 ⟧, #formals)
  → CppTypes2(#csort2, Concat<Text4_text_sort>(#formals, CppTypes(#csort)))

  rule CppTypes2(csort⟦ { ##csort1 : ##csort2 } ⟧, ())
  → Cons(text⟦MapTerm<†⟨SortToType(#csort1)⟩,†⟨SortToType(#csort2)⟩>⟧, Nil)

  rule CppTypes2(csort⟦ { ##cmapsort } ⟧, Cons(#formal:Text4_text_sort, #formals:List<Text4_text_sort>))
  → Cons(text⟦Closure†⟨NumberToText(Plus(ListLength<Text4_text_sort>(#formals), 1))⟩<MapTerm, †⟨
       TextFold(Cons(#formal, #formals), text⟦, ⟧) /* Formal params */⟩>⟧, Nil)

  rule CppTypes2(csort⟦ data ##csort ⟧, #formals)
  → CppTypes2(#csort, #formals)

  rule CppTypes2(csort⟦ thunk ##csort ⟧, #formals)
  → Cons(text⟦LazyTerm<†⟨SortToType(#csort)⟩>⟧, Nil)
*/

/* Same as above, expect ignore syntactic variables */
func CppType(#csort: Core_csort_sort) -> Text4_text_sort
→ Last<Text4_text_sort>(CppTypes(#csort)) // TODO: could optimize

/* Same as above, but return a reference type */
func CppTypeRef(#csort: Core_csort_sort) -> Text4_text_sort
→ text⟦†⟨CppType(#csort)⟩&⟧

/* Rename builtin types to avoid conflict with C++ types */
func CppFixupPrimitiveType(#typename: String) -> String
→ If<String>(StringEqual(#typename, "String"), ()->"StringTerm",
    ()->If<String>(StringEqual(#typename, "Numeric"), ()->"DoubleTerm",
         ()->#typename))

// --- Basic conversion functions

/* Convert data sort name to corresponding C++ class name */
func SortNameToCppClassName(#name: String) -> Text4_text_sort
→ text⟦_⟨STRING: #name⟩⟧

/* Convert data sort name to equivalent C++ class name reference */
func SortNameToCppClassNameRef(#name: String) -> Text4_text_sort
→ text⟦_⟨STRING: #name⟩&⟧

/* Convert data form to corresponding C++ constructor method name */
func CppConsMethodName(#name: String) -> Text4_text_sort
→ text⟦⟨STRING: #name⟩⟧

/* Convert data form to corresponding C++ 'as' method name */
func CppAsMethodName(#name: String) -> Text4_text_sort
→ text⟦as⟨STRING: #name⟩⟧

/* Convert data form to corresponding C++ class name */
func FormCppClassName(#name: String) -> Text4_text_sort
→ text⟦_⟨STRING: #name⟩⟧

/* Convert data form to corresponding C++ class name reference */
func FormCppClassNameRef(#name: String) -> Text4_text_sort
→ text⟦_⟨STRING: #name⟩&⟧

/* Convert TS function name to corresponding C++ function name  */
func CppFnName(#name: String) -> Text4_text_sort
→ text⟦_⟨STRING: #name⟩⟧

// --- helper function

/* Whether to generate function body */
func GenBody(#csortvars? : List<Core_csortvars_sort>, #header : Bool) -> Bool
→ Or(
    And(IsEmpty<Core_csortvars_sort>(#csortvars?), Not(#header)),
    And(IsNotEmpty<Core_csortvars_sort>(#csortvars?), #header))

/* Generate method qualifier, only for non-templated method in source file */
func CppQualifier(#sortname: String, #csortvars? : List<Core_csortvars_sort>, #header : Bool) -> Text4_text_sort
→ TextIf(And(IsEmpty<Core_csortvars_sort>(#csortvars?), Not(#header)),
    ()->text⟦†⟨SortNameToCppClassName(#sortname)⟩::⟧)

/* Generate method qualifier, only for non-templated method in source file */
func CppFormQualifier(#formname: String, #csortvars? : List<Core_csortvars_sort>, #header : Bool) -> Text4_text_sort
→ TextIf(And(IsEmpty<Core_csortvars_sort>(#csortvars?), Not(#header)),
    ()->text⟦†⟨FormCppClassName(#formname)⟩::⟧)
