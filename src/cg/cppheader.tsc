// Copyright (c) 2016 IBM Corporation.
/*
 * Generate C++ header file
 */
import std::core
import std::path
import std::string
import std::mapdef
import std::listdef
import std::text
import std::text::Text4

import core::Core
import core::utils
import cg::cppcommon
import cg::cppenv

import Systemdef

/* Generate C++ header file for module */
func CppHeader(#module: Module) -> Text4_text_sort
→ text⟦
#ifndef †⟨HeaderGuard(GetModuleURL(#module))⟩
#define †⟨HeaderGuard(GetModuleURL(#module))⟩
#include "ts.h"

†⟨CppIncludes     (GetImports(GetModuleContent(#module)))⟩
†⟨CppForwardDecls (MapValues(GetDataSortsC(GetModuleContent(#module))))⟩
†⟨CppClassDecls   (MapValues(GetDataSortsC(GetModuleContent(#module))))⟩
†⟨CppFunctionDecls(SetContent(CppNewEnv, GetModuleContent(#module)))⟩

#endif⟧

/* Generate C++ header guard */
func HeaderGuard(#url: String) -> Text4_text_sort
→ text⟦_⟨STRING: UpCase(PathFileStem(#url))⟩⟧

/* Generate C++ header inclusion declarations */
func CppIncludes(#imports: List<Core_cqidentifier_sort>) -> Text4_text_sort
→ TextFold(Map((imp) -> text⟦
#include "⟨STRING: JoinQIdentifier(imp, "/")⟩"⟧, #imports), text⟦⟧)

// --------- Data sorts

/* Generate data sort and data form forward declarations */
func CppForwardDecls(#datasorts: List<Core_cdecl_sort>) -> Text4_text_sort
→ TextFold(Map<Core_cdecl_sort Text4_text_sort>((decl) -> CppForwardDecl(decl), #datasorts), text⟦⟧)

func CppForwardDecl(Core_cdecl_sort) -> Text4_text_sort
rule CppForwardDecl(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧)
→ text⟦
†⟨CppTemplatePrefix(#csortvars?)⟩
class †⟨SortNameToCppClassName(#CONSTRUCTOR)⟩;
†⟨TextFold(Map<Core_cform_sort Text4_text_sort>((cform) -> CppForwardForm(#CONSTRUCTOR, #csortvars?, cform), #cform*), text⟦⟧)⟩⟧

func CppForwardForm(String, List<Core_csortvars_sort>, Core_cform_sort) -> Text4_text_sort
  rule CppForwardForm(#sortname, #csortvars?, cform⟦ ##CONSTRUCTOR ##csorts? ⟧)
  → text⟦
    †⟨CppTemplatePrefix(#csortvars?)⟩
    class †⟨FormCppClassName(#CONSTRUCTOR)⟩;⟧

  rule CppForwardForm(#sortname, #csortvars?, cform⟦ allows-variable ⟧)
  → text⟦
    †⟨CppTemplatePrefix(#csortvars?)⟩
    class †⟨SortNameToCppClassName(#sortname)⟩Var;⟧

/* Generate class and method signatures for data sorts */
func CppClassDecls(#datasorts: List<Core_cdecl_sort>) -> Text4_text_sort
→ TextFold(Map<Core_cdecl_sort Text4_text_sort>((decl) -> CppClassDecl(decl), #datasorts), text⟦⟧)

func CppClassDecl(Core_cdecl_sort) -> Text4_text_sort
rule CppClassDecl(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧)
→ text⟦
†⟨TextFold(Map<Core_cform_sort Text4_text_sort>((cform) -> CppMethodNew(#CONSTRUCTOR, #csortvars?, cform, TRUE), #cform*), text⟦⟧)⟩
†⟨CppTemplatePrefix(#csortvars?)⟩
class †⟨SortNameToCppClassName(#CONSTRUCTOR)⟩ : public _Term
{
public:
  †⟨TextMapFold<Core_cform_sort>((cform) -> CppMethodAs(#CONSTRUCTOR, #csortvars?, cform, TRUE), #cform*)⟩
};
†⟨TextFold(Map<Core_cform_sort Text4_text_sort>((cform) -> CppFormClass(#CONSTRUCTOR, #csortvars?, cform), #cform*), text⟦⟧)⟩
⟧

/* Generate class and method signatures for the given data form */
func CppFormClass(String, List<Core_csortvars_sort>, Core_cform_sort) -> Text4_text_sort
  rule CppFormClass(#sortname, #csortvars?, cform⟦ ##CONSTRUCTOR ##csorts? ⟧)
  → text⟦
  †⟨CppTemplatePrefix(#csortvars?)⟩
  class †⟨FormCppClassName(#CONSTRUCTOR)⟩: public †⟨SortNameToCppClassName(#sortname)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩
  {
  public:
    †⟨CppFormConstructor(#sortname, #csortvars?, #CONSTRUCTOR, #csorts?, TRUE)⟩
    †⟨CppFormMethodAs(#sortname, #csortvars?, #CONSTRUCTOR, TRUE)⟩
    †⟨CppFormGetValue(#sortname, #csortvars?, #CONSTRUCTOR, #csorts?, TRUE)⟩

  protected:
    †⟨MaybeCppClassFields(#csorts?, (isvar type index subindex)->CppDeclField(isvar, type, index, subindex))⟩
  };⟧

  rule CppFormClass(#sortname, #csortvars?, cform⟦ allows-variable ⟧)
  → text⟦/*TODO: allows-variable*/⟧
//†⟨CppFormMethodCopy(#sortname, #csortvars?, #CONSTRUCTOR, TRUE)⟩
// --------- Form to class fields

/* Field declaration helper */
func CppDeclField(Bool, Text4_text_sort, Numeric, Numeric) -> Text4_text_sort
rule CppDeclField(FALSE, #type, #index, #subindex) → text⟦†⟨#type⟩& †⟨FieldName(#index)⟩;⟧
rule CppDeclField(TRUE, #type, #index, #subindex)  → text⟦†⟨#type⟩& †⟨VarFieldName(#index, #subindex)⟩;⟧

// --------- Function sorts

/* Generate function declarations corresponding to function sorts. */
func CppFunctionDecls(#env: {String : EnvEntry}) -> Text4_text_sort
→ TextMapFold<String>((key) ->CppFunctionDecl(#env, key, TRUE), MapKeys<String Core_cdecl_sort>(GetFuncSorts(GetContent(#env))))
