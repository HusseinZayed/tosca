// Copyright (c) 2016 IBM Corporation.
/*
 * Generate C++ header file
 */
import std::core
import std::path
import std::string
import std::mapdef
import std::listdef
import std::text
import std::text::Text4

import core::Core
import core::utils
import cg::cppcommon
import cg::cppenv

import Systemdef

/* Generate C++ header file for module */
func CppHeader(#module: Module) -> Text4_text_sort
→ text⟦
#ifndef †⟨HeaderGuard(GetModuleURL(#module))⟩
#define †⟨HeaderGuard(GetModuleURL(#module))⟩
#include "ts.h"

#if __has_include("⟨STRING: Mangle(PathFileStem(GetModuleURL(#module)))⟩-extern.h")
#include "⟨STRING: Mangle(PathFileStem(GetModuleURL(#module)))⟩-extern.h"
#endif

// Imports

†⟨CppIncludes     (GetImports(GetModuleContent(#module)))⟩

// Enumeration forward declarations

†⟨CppForwardDecls (MapValues(GetDataSortsC(GetModuleContent(#module))))⟩

// Function forward declarations

†⟨CppForwardDecls (MapValues(GetFuncSorts(GetModuleContent(#module))))⟩

// Enumeration declarations

†⟨CppClassDecls   (MapValues(GetDataSortsC(GetModuleContent(#module))))⟩

// Template function definitions

†⟨CppFunctionDecls(SetContent(CppNewEnv, GetModuleContent(#module)))⟩

#endif⟧

/* Generate C++ header guard */
func HeaderGuard(#url: String) -> Text4_text_sort
→ text⟦_⟨STRING: Mangle(UpCase(PathFileStem(#url)))⟩⟧

/* Generate C++ header inclusion declarations */
func CppIncludes(#imports: List<Core_cqidentifier_sort>) -> Text4_text_sort
→ TextFoldES(Map((imp) -> text⟦
#include "⟨STRING: JoinQIdentifier(imp, "/", TRUE)⟩.h"⟧, #imports))

// --------- Data sorts

/* Generate data sort, data form and parameterized function forward declarations */
func CppForwardDecls(#decls: List<Core_cdecl_sort>) -> Text4_text_sort
→ TextFoldES(Map((decl) -> CppForwardDecl(decl), #decls))

func CppForwardDecl(Core_cdecl_sort) -> Text4_text_sort

  rule CppForwardDecl(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧)
  → text⟦
    †⟨CppTemplatePrefix(#csortvars?)⟩
    class †⟨SortNameToCppClassName(#CONSTRUCTOR)⟩;
    †⟨TextFoldES(Map((cform) -> CppForwardForm(#CONSTRUCTOR, #csortvars?, cform), #cform*))⟩⟧

  rule CppForwardDecl(cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧)
  → CppFunctionDeclD({}, cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧, TRUE, TRUE)

  rule CppForwardDecl(#cdecl)
  → text⟦⟧

func CppForwardForm(String, List<Core_csortvars_sort>, Core_cform_sort) -> Text4_text_sort

  rule CppForwardForm(#sortname, #csortvars?, cform⟦ ##CONSTRUCTOR ##csorts? ⟧)
  → text⟦
    †⟨CppTemplatePrefix(#csortvars?)⟩
    class †⟨FormCppClassName(#CONSTRUCTOR)⟩;⟧

  rule CppForwardForm(#sortname, #csortvars?, cform⟦ allows-variable ⟧)
  → text⟦
    †⟨CppTemplatePrefix(#csortvars?)⟩
    class †⟨FormCppClassName(#sortname)⟩Use;⟧

/* Generate class and method signatures for data sorts */
func CppClassDecls(#datasorts: List<Core_cdecl_sort>) -> Text4_text_sort
→ TextFoldES(Map((decl) -> CppClassDecl(decl), #datasorts))

func CppClassDecl(Core_cdecl_sort) -> Text4_text_sort
rule CppClassDecl(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧)
→ text⟦
†⟨TextMapFoldES((cform) -> CppMethodNew(#CONSTRUCTOR, #csortvars?, cform, TRUE), #cform*)⟩
†⟨CppTemplatePrefix(#csortvars?)⟩
class †⟨SortNameToCppClassName(#CONSTRUCTOR)⟩ : public †⟨CppExtendTerm(#CONSTRUCTOR, #cform*)⟩
{
public:
  †⟨TextMapFoldES((cform) -> CppMethodAs(#CONSTRUCTOR, #csortvars?, cform, TRUE), #cform*)⟩
};
†⟨TextMapFoldES((cform) -> CppFormClass(#CONSTRUCTOR, #csortvars?, cform), #cform*)⟩
⟧

func CppExtendTerm(#sortname: String, #form*: List<Core_cform_sort>) -> Text4_text_sort
→ IfPresent(PickFirst(#form*, (form)->IsAllowsVar(form)),
    (form)->text⟦virtual TermVar<†⟨FormCppClassName(#sortname)⟩Use>⟧,
    ()->text⟦Term⟧)

/* Generate class and method signatures for the given data form */
func CppFormClass(String, List<Core_csortvars_sort>, Core_cform_sort) -> Text4_text_sort

  rule CppFormClass(#sortname, #csortvars?, cform⟦ ##CONSTRUCTOR ##csorts? ⟧)
  → text⟦
      †⟨CppTemplatePrefix(#csortvars?)⟩
      class †⟨FormCppClassName(#CONSTRUCTOR)⟩: public †⟨SortNameToCppClassName(#sortname)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩
      {
      public:
        †⟨CppFormConstructor(#sortname, #csortvars?, #CONSTRUCTOR, #csorts?, TRUE)⟩
        †⟨CppFormMethodAs(#sortname, #csortvars?, #CONSTRUCTOR, TRUE)⟩
        †⟨CppFormGetValue(#sortname, #csortvars?, #CONSTRUCTOR, #csorts?, TRUE)⟩

      protected:
        †⟨MaybeCppClassFields(#csorts?, (isvar type index subindex)->CppDeclField(isvar, type, index, subindex))⟩
      };⟧

  rule CppFormClass(#sortname, #csortvars?, cform⟦ allows-variable ⟧)
  → text⟦
      †⟨CppTemplatePrefix(#csortvars?)⟩
      class †⟨FormCppClassName(#sortname)⟩Use: public †⟨SortNameToCppClassName(#sortname)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩, public VariableUse<†⟨FormCppClassName(#sortname)⟩Use†⟨MaybeCppTypeArguments(#csortvars?)⟩>
      {
        public:
          typedef †⟨FormCppClassName(#sortname)⟩Use†⟨MaybeCppTypeArguments(#csortvars?)⟩ type;
          †⟨CppFormConstructorVar(#sortname, #csortvars?, TRUE)⟩
          †⟨CppFormMethodMake(#sortname, #csortvars?, TRUE)⟩
      };
    ⟧

// --------- Form to class fields

/* Field declaration helper */
func CppDeclField(Bool, Text4_text_sort, Numeric, Numeric) -> Text4_text_sort
rule CppDeclField(FALSE, #type, #index, #subindex) → text⟦†⟨#type⟩& †⟨FieldName(#index)⟩;⟧
rule CppDeclField(TRUE, #type, #index, #subindex)  → text⟦†⟨#type⟩& †⟨VarFieldName(#index, #subindex)⟩;⟧

// --------- Function sorts

/* Generate template function definition corresponding to function sorts. */
func CppFunctionDecls(#env: {String : EnvEntry}) -> Text4_text_sort
→ TextMapFoldES((key) ->CppFunctionDecl(#env, key, TRUE), MapKeys(GetFuncSorts(GetContent(#env))))
