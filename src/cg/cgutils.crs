// Copyright (c) 2015 IBM Corporation.
/*
 * Common set of utility functions shared across code generators
 */
CgUtils[(

$Use["std/core.crs"];
$Use["std/text.crs"];
$Use["std/string.crs"];
$Use["core/Core.crs"];

// ===== Utilities  

// Print the meta variable identifier. 
MetaVar[$String] :: Text;
{#E}MetaVar[#] → {#E}MetaVar0[MetaKey[#]];

MetaVar0[$String] :: Text;
-[Data[#]]: {#E}MetaVar0[#] → UnMETA[$[{#E}Get, #]];

// Gets property name for given meta-application
MetaKey[$String] :: $String;
-[Data[#]]: MetaKey[#] → $[:, "$meta$", #];

// Add metavar to the environment and call continuation
AddMetaVar[$String, Text, $List[Text], ok::OK_SORT.Text] :: Text;
{#E}AddMetaVar[#metavar, #javavar, #binders, ok.#[ok]]
→
{#E}AddMetaVar0[MetaKey[#metavar], #javavar, #binders, ok.#[ok]];

AddMetaVar0[$String, Text, $List[Text], ok::OK_SORT.Text] :: Text;
-[Data[#key]]: {#E}AddMetaVar0[#key, #javavar, #binders, ok.#[ok]] → {#E; #key : META[#javavar, #binders]}#[OK];

// Gets property name for dispatched metavariable
MetaDispatchKey[$Numeric] :: $String;
MetaDispatchKey[#position] → $[:, "$dispatch$", $[FormatNumber, #position]];

// Gets the dispatched metavar at the given position
DispatchedMetaVar[$Numeric] :: Text;
{#E}DispatchedMetaVar[#position] → {#E}DispatchedMetaVar1[MetaDispatchKey[#position]];

DispatchedMetaVar1[$String] :: Text;
-[Data[#key]]: {#E}DispatchedMetaVar1[#key] → {#E}DispatchedMetaVar2[UnSTRING[$[{#E}Get, #key]]];

DispatchedMetaVar2[$String] :: Text;
-[Data[#key]]: {#E}DispatchedMetaVar2[#key] → UnMETA[$[{#E}Get, #key]];

// Gets the binders of the dispatched metavar at the given position
DispatchedMetaVarBinders[$Numeric] :: $List[Text];
{#E}DispatchedMetaVarBinders[#position] → {#E}DispatchedMetaVarBinders1[MetaDispatchKey[#position]];

DispatchedMetaVarBinders1[$String] :: $List[Text];
-[Data[#key]]: {#E}DispatchedMetaVarBinders1[#key] → {#E}DispatchedMetaVarBinders2[UnSTRING[$[{#E}Get, #key]]];

DispatchedMetaVarBinders2[$String] :: $List[Text];
-[Data[#key]]: {#E}DispatchedMetaVarBinders2[#key] → UnMETABinders[$[{#E}Get, #key]];
//
//// Gets property name for given binder
//BinderKey[Crsx_binder_sort] :: $String;
//BinderKey[%binder⟦ ##variable ⟧] → VarKey[#variable];
//
//// Gets property name for given variable
//VarKey[Crsx_variable_sort] :: $String;
//VarKey[%variable⟦ ##VARIABLE ##linear? ##functional? ##varsort? ⟧] → $[:, "$var$", #VARIABLE];

// Gets the text corresponding to the given variable
Variable[$String] :: Text;
{#E}Variable[#var] → {#E}Variable0[$[:, "$var$", #var]];

Variable0[$String] :: Text;
-[Data[#key]]: {#E}Variable0[#key] → UnTEXT[$[{#E}Get, #key]];

// Print construction descriptor name
Descriptor[$String] :: Text;
Descriptor[#constructor] → ToJavaIdString[#constructor];

// Print literal as a java string
Literal[Core_cliteral_sort] :: Text;
Literal[%cliteral⟦ ##STRING ⟧] → StringToText[#STRING];
Literal[%cliteral⟦ ##NUMBER ⟧] → StringToText[#NUMBER];

// Convert constructor to legal Java ID
ToJavaId[$String] :: Text;
ToJavaId[#constructor] → Text-Mangle[UpCaseFirst[#constructor]]; 

// Convert constructor to legal Java ID
ToJavaIdString[$String] :: Text;
ToJavaIdString[#name] → Text-Mangle[#name]; 
)]