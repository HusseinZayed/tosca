// Copyright (c) 2016 IBM Corporation.

/*
 * Tosca C++--11 code generator.
 */
import std::core
import std::listdef
import std::mapdef
import std::text
import std::path
import std::string
import std::num
import std::language
import std::text::Text4

import systemdef
import cg::cpp::cpptypes
import cg::cpp::cppsigs
import cg::cpp::cppheader
import cg::cpp::cppsource

// ===== API

/* Generate C++ source and header file for given `#module` */
func ToCppM(#system:TSystem, #module: Module) -> Result
→ let #mainurl = GetSystemURL(#system)
  let #url = GetModuleURL(#module)
  let #base = GetModuleURLBase(#module)
  let #buildir = GetConfigDef(#system, "build-dir", "")
  let #types = TargetCppTypes(#mainurl, #url, #base, #buildir)
  let #sigs = TargetCppSigs(#mainurl, #url, #base, #buildir)
  let #header = TargetCppHeader(#mainurl, #url, #base, #buildir)
  let #source = TargetCppSource(#mainurl, #url, #base, #buildir)
  let #result = CppSaveAllTmp(#system, #module, #types, #sigs, #header, #source)
  let #result1 = CppMoveTmp(#result, #types)
  let #result2 = CppMoveTmp(#result1, #sigs)
  let #result3 = CppMoveTmp(#result2, #header)
  let #result4 = CppMoveTmp(#result3, #source)
  #result4

func CppSaveAllTmp(#system:TSystem, #module: Module, #types:String, #sigs:String, #header:String, #source:String) -> Result
→ SaveResource("text", ConcatString(#types, ".tmp"), CppHeaderTypes(#module), ()->
  SaveResource("text", ConcatString(#sigs, ".tmp"),  CppSigs(#module), ()->
  SaveResource("text", ConcatString(#header, ".tmp"), CppHeader(#module), ()->
  SaveResource("text", ConcatString(#source, ".tmp"), CppSource(#module), ()->
  Success((#header, #source))))))

func CppMoveTmp(#result:Result, #filename: String) -> Result
→ let #tmp = ConcatString(#filename, ".tmp")
  if FileSame(#filename, #tmp)
    Debug(ConcatString("delete ", #tmp), ()->#result)
  else
    if FileMoveTo(#tmp, #filename)
      #result
    else
      Debug(ConcatString("delete ", #tmp), ()->#result)

/* Get the absolute name of the target c++ header file containing forward declarations */
func TargetCppTypes(#mainurl: String, #input: String, #base: String, #dest: String) -> String
→ Replace(TargetCppHeader(#mainurl, #input, #base, #dest), ".h", "_types.h")

/* Get the absolute name of the target c++ header file containing signatures */
func TargetCppSigs(#mainurl: String, #input: String, #base: String, #dest: String) -> String
→ Replace(TargetCppHeader(#mainurl, #input, #base, #dest), ".h", "_sigs.h")

/* Get the absolute name of the target c++ header file */
@Extern func TargetCppHeader(#mainurl: String, #input: String, #base: String, #dest: String) -> String

/* Get the absolute name of the target c++ source file */
@Extern func TargetCppSource(#mainurl: String, #input: String, #base: String, #dest: String) -> String

/* Tell whether the generated files needed to be regenerated */
func CppNeedRegen(#system:TSystem, #module_url: URLAndBase) -> Bool
→ let #mainurl = GetSystemURL(#system)
  let #buildir = GetConfigDef(#system, "build-dir", "")
  let #url = GetURLOfUnB(#module_url)
  let #base = GetBaseOfUnB(#module_url)
  let #srcmod = FileLastModified(#url)
  if GreaterThan(#srcmod, FileLastModified(TargetCppTypes(#mainurl, #url, #base, #buildir)))
    TRUE
  else if GreaterThan(#srcmod, FileLastModified(TargetCppSigs(#mainurl, #url, #base, #buildir)))
    TRUE
  else if GreaterThan(#srcmod, FileLastModified(TargetCppHeader(#mainurl, #url, #base, #buildir)))
    TRUE
  else if GreaterThan(#srcmod, FileLastModified(TargetCppSource(#mainurl, #url, #base, #buildir)))
    TRUE
  else
    FALSE
