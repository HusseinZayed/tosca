// Copyright (c) 2016 IBM Corporation.
/*
 * Generate C++ header file containing function and method signatures
 */
import std::core
import std::path
import std::string
import std::text
import std::text::Text4
import core::Core
import core::utils
import cg::cpp::cppcommon

import Systemdef

/* Generate C++ header file for module */
func CppSigs(#module: Module) -> Text4_text_sort
→ text⟦
#ifndef †⟨HeaderSigsGuard(GetModuleURL(#module))⟩
#define †⟨HeaderSigsGuard(GetModuleURL(#module))⟩
#include "ts.h"
#include "⟨STRING: Mangle(PathFileStem(GetModuleURL(#module)))⟩_types.h"
†⟨TextIf(HasExternFuncM(#module), ()->text⟦
#include "⟨STRING: Mangle(PathFileStem(GetModuleURL(#module)))⟩-extern.h"⟧)⟩

†⟨CppIncludeTypes(GetImports(GetModuleContent(#module)))⟩

using tosca::StringTerm;
using tosca::CStringTerm;
using tosca::CStringTermVar;
using tosca::DoubleTerm;
using tosca::CDoubleTerm;
using tosca::CDoubleTermVar;
using tosca::MapTerm;

// Enumeration declarations
†⟨CppClassDecls(MapValues(GetDataSortsM(#module)))⟩

// Function forward declarations
†⟨CppForwardDecls (MapValues(GetFuncSortsM(#module)))⟩

/* @Brief Initialize module. Register data symbols and variable types */
void InitModule_⟨STRING: Mangle(PathFileStem(GetModuleURL(#module)))⟩(tosca::Context& context);
#endif⟧

/* Generate C++ header guard */
func HeaderSigsGuard(#url: String) -> Text4_text_sort
→ text⟦⟨STRING: Mangle(UpCase(PathFileStem(#url)))⟩_SIGS_H_⟧

/* Generate C++ header inclusion declarations */
func CppIncludeTypes(#imports: List<Core_cqidentifier_sort>) -> Text4_text_sort
→ TextFoldES(Map((imp) -> text⟦
#include "⟨STRING: JoinQIdentifier(imp, "/", TRUE)⟩_types.h"⟧, #imports))

//--- Class declaration

/* Generate class and method signatures for data sorts */
func CppClassDecls(#datasorts: List<Core_cdecl_sort>) -> Text4_text_sort
→ TextFoldES(Map((decl) -> CppClassDecl(decl), #datasorts))

func CppClassDecl(Core_cdecl_sort) -> Text4_text_sort

  rule CppClassDecl(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧)
  → let #allowvar = IsAllowsVarForms(#cform*)
    text⟦†⟨TextMapFoldES((cform) -> CppMethodNew(#CONSTRUCTOR, #csortvars?, cform, FALSE), #cform*)⟩
†⟨CppTemplatePrefix(#csortvars?)⟩
class †⟨SortNameToCppClassName(#CONSTRUCTOR)⟩ : public tosca::Term
{
public:→
†⟨TextMapFoldES((cform) -> CppMethodAs(#CONSTRUCTOR, #csortvars?, cform, FALSE), #cform*)⟩
†⟨CppMethodMakeVariable(#CONSTRUCTOR, #csortvars?, #allowvar, FALSE) /* TODO: consider generating only when allow variables */⟩
†⟨CppMethodMakeTerm(#CONSTRUCTOR, #csortvars?, #cform*, FALSE)⟩
†⟨TextIf(#allowvar, ()->CppMethodGetVariable(#CONSTRUCTOR, #csortvars?, FALSE))⟩←
};
†⟨TextMapFoldES((cform) -> CppFormClassDecl(#CONSTRUCTOR, #csortvars?, cform), #cform*)⟩

†⟨TextIf(IsEmpty(MaybeSortVarsToSorts(#csortvars?)), ()->text⟦¶STD_HASH_EQUAL_TO_TERM(†⟨SortNameToCppClassName(#CONSTRUCTOR)⟩)⟧)⟩⟧

  rule CppClassDecl(#cdecl)
  → text⟦⟧

/* Generate class and method signatures for the given data form */
func CppFormClassDecl(String, List<Core_csortvars_sort>, Core_cform_sort) -> Text4_text_sort

  rule CppFormClassDecl(#sortname, #csortvars?, cform⟦ ##CONSTRUCTOR ##csortsdefault? ⟧)
  → let #sorts? = MaybeSortsDefaultToMaybeSorts(#csortsdefault?)
    text⟦
†⟨CppTemplatePrefix(#csortvars?)⟩
class †⟨FormCppClassName(#CONSTRUCTOR)⟩: public †⟨SortNameToCppClassName(#sortname)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩
{
public:→
†⟨CppFormConstructor(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩
const std::string Symbol() const { return †⟨Text-QuoteEscape(#CONSTRUCTOR)⟩; }
†⟨CppFormMethodMake(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩
†⟨CppFormMethodCopy(#sortname, #csortvars?, #CONSTRUCTOR, FALSE)⟩
†⟨CppFormMethodAs(#sortname, #csortvars?, #CONSTRUCTOR, FALSE)⟩
†⟨CppFormGetValue(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩
†⟨CppFormGetSub(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩
†⟨CppFormSetSub(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩
†⟨CppFormGetBinder(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩
†⟨CppFormSetBinder(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩
†⟨CppFormMakeFree(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩
†⟨CppFormMakeBound(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩
†⟨CppFormMakeTerm(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩
←protected:→
†⟨MaybeCppClassFields(#sorts?, (isvar type index subindex)->CppDeclField(isvar, type, index, subindex))⟩
†⟨CppFormDefaultConstructor(#sortname, #csortvars?, #CONSTRUCTOR, #sorts?, FALSE)⟩←
};⟧

  rule CppFormClassDecl(#sortname, #csortvars?, cform⟦ allows-variable ⟧)
  → text⟦†⟨CppTemplatePrefix(#csortvars?)⟩
class †⟨FormCppClassName(#sortname)⟩Var: public tosca::Variable
{
public:→
†⟨CppVarConstructorVar(#sortname, #csortvars?, FALSE)⟩
†⟨CppVarMethodUse(#sortname, #csortvars?, FALSE)⟩
†⟨CppVarMethodGUse(#sortname, #csortvars?, FALSE)⟩
†⟨CppVarMethodCopy(#sortname, #csortvars?, FALSE)⟩←
};

†⟨CppTemplatePrefix(#csortvars?)⟩
class †⟨FormCppClassName(#sortname)⟩Use: public †⟨SortNameToCppClassName(#sortname)⟩†⟨MaybeCppTypeArguments(#csortvars?)⟩, public tosca::VariableUse
{
public:→
†⟨CppVarConstructorUse(#sortname, #csortvars?, FALSE)⟩
†⟨CppVarMethodGetVariable(#sortname, #csortvars?, FALSE)⟩
†⟨CppVarMethodGetGVariable(#sortname, #csortvars?, FALSE)⟩
size_t HashCode() { return VariableUse::HashCode(); }←
};
†⟨TextIf(IsEmpty(MaybeSortVarsToSorts(#csortvars?)), ()->text⟦¶STD_HASH_EQUAL_TO_TERM(†⟨FormCppClassName(#sortname)⟩Use)⟧)⟩⟧

// --------- Form to class fields

/* Field declaration helper */
func CppDeclField(Bool, Text4_text_sort, Numeric, Numeric) -> Text4_text_sort
rule CppDeclField(FALSE, #type, #index, #subindex) → text⟦†⟨#type⟩* †⟨FieldName(#index)⟩;⟧
rule CppDeclField(TRUE, #type, #index, #subindex)  → text⟦†⟨#type⟩* †⟨VarFieldName(#index, #subindex)⟩;⟧

// --------- Global constants declarations for data forms

/* Generate class and method signatures for data sorts */
func CppGlobalData(#datasorts: List<Core_cdecl_sort>) -> Text4_text_sort
→ TextFoldES(Map((decl) -> CppGlobalDataDecl(decl), #datasorts))

func CppGlobalDataDecl(Core_cdecl_sort) -> Text4_text_sort
rule CppGlobalDataDecl(cdecl⟦ data ##CONSTRUCTOR ( ##cform* ) ⟧) → TextFoldES(Map((form) -> CppGlobalDataForm(#CONSTRUCTOR, form), #cform*))
rule CppGlobalDataDecl(#cdecl)                                   → text⟦⟧

func CppGlobalDataForm(String, Core_cform_sort) -> Text4_text_sort

  rule CppGlobalDataForm(#sortname, cform⟦ ##CONSTRUCTOR ##csortsdefault? ⟧)
  → text⟦
       extern const CStringTerm& GC†⟨STRING: Mangle(#CONSTRUCTOR)⟩;⟧

  rule CppGlobalDataForm(#sortname, cform⟦ allows-variable ⟧)
  → text⟦
       extern const CStringTerm& GT†⟨STRING: Mangle(#sortname)⟩;⟧
