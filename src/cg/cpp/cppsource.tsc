// Copyright (c) 2016 IBM Corporation.
/*
 * Generate C++ source file
 */
import std::core
import std::path
import std::string
import std::listdef
import std::text
import std::mapdef
import std::text::Text4

import core::Core
import core::utils
import cg::cpp::cppcommon
import cg::cpp::cppenv
import systemdef

/* Generate C++ source file for module */
func CppSource(#module: Module) -> Text4_text_sort
→ text⟦#include "⟨STRING: Mangle(PathFileStem(GetModuleURL(#module)))⟩.h"

// Include template definitions
†⟨CppIncludeDefs(GetImportsM(#module))⟩

using namespace tosca;

†⟨CppClassDefs(MapValues(GetDataSortsC(GetModuleContent(#module))))⟩
†⟨CppFunctionDefs(SetContent(CppNewEnv, GetModuleContent(#module)))⟩

†⟨CppInitModule(Mangle(PathFileStem(GetModuleURL(#module))), GetImportsM(#module), GetDataSortsM(#module))⟩⟧

/* Generate C++ header inclusion declarations */
func CppIncludeDefs(#imports: List<Core_cqidentifier_sort>) -> Text4_text_sort
→ TextFoldES(Map((imp) -> text⟦
#include "⟨STRING: JoinQIdentifier(imp, "/", TRUE)⟩.h"⟧, #imports))


// --------- Data sorts

/* Generate class definition and method body for data sorts */
func CppClassDefs(#datasorts: List<Core_cdecl_sort>) -> Text4_text_sort
→ TextMapFoldES<Core_cdecl_sort>((decl) -> CppClassDef(decl), #datasorts)

func CppClassDef(Core_cdecl_sort) -> Text4_text_sort

  rule CppClassDef(cdecl⟦ data ##CONSTRUCTOR ( ##cform* ) ⟧)
  → text⟦
    †⟨TextMapFoldES((cform) -> CppMethodNew(#CONSTRUCTOR, (), cform, TRUE), #cform*)⟩
    †⟨TextMapFoldES((cform) -> CppMethodAs(#CONSTRUCTOR, (), cform, TRUE), #cform*)⟩
    †⟨TextMapFoldES((cform) -> CppFormDefs(#CONSTRUCTOR, cform), #cform*)⟩⟧

  rule CppClassDef(#cdecl)
  → text⟦⟧

/* Generate class and method definitions for the given data form */
func CppFormDefs(String, Core_cform_sort) -> Text4_text_sort

  rule CppFormDefs(#sortname, cform⟦ ##CONSTRUCTOR ##csorts? ⟧)
  → text⟦
     †⟨CppFormConstructor(#sortname, (), #CONSTRUCTOR, #csorts?, TRUE)⟩
     †⟨CppFormDefaultConstructor(#sortname, (), #CONSTRUCTOR, #csorts?, TRUE)⟩
     †⟨CppFormMethodMake(#sortname, (), #CONSTRUCTOR, #csorts?, TRUE)⟩
     †⟨CppFormMethodCopy(#sortname, (), #CONSTRUCTOR, TRUE)⟩
     †⟨CppFormMethodAs(#sortname, (), #CONSTRUCTOR, TRUE)⟩
     †⟨CppFormGetValue(#sortname, (), #CONSTRUCTOR, #csorts?, TRUE)⟩
     †⟨CppFormGetSub(#sortname, (), #CONSTRUCTOR, #csorts?, TRUE)⟩
     †⟨CppFormSetSub(#sortname, (), #CONSTRUCTOR, #csorts?, TRUE)⟩
     †⟨CppFormGetBinder(#sortname, (), #CONSTRUCTOR, #csorts?, TRUE)⟩
     †⟨CppFormSetBinder(#sortname, (), #CONSTRUCTOR, #csorts?, TRUE)⟩⟧

  rule CppFormDefs(#sortname, cform⟦ allows-variable ⟧)
  → text⟦
      †⟨CppVarConstructorVar(#sortname, (), TRUE)⟩
      †⟨CppVarMethodUse(#sortname, (), TRUE)⟩
      †⟨CppVarMethodGUse(#sortname, (), TRUE)⟩
      †⟨CppVarMethodCopy(#sortname, (), TRUE)⟩
      †⟨CppVarConstructorUse(#sortname, (), TRUE)⟩
      †⟨CppMethodGetVariable(#sortname, (), TRUE)⟩
      †⟨CppVarMethodGetVariable(#sortname, (), TRUE)⟩
      †⟨CppVarMethodGetGVariable(#sortname, (), TRUE)⟩⟧

// --------- Function sorts and associated rules

/* Generate function definitions corresponding to function sorts. */
func CppFunctionDefs(#env: {String : EnvEntry}) -> Text4_text_sort
→ TextMapFoldES((key) -> CppFunctionDecl(#env, key, FALSE), MapKeys(GetFuncSorts(GetContent(#env))))

// --------- Global constants definitions for data forms

/* Generate class and method signatures for data sorts */
func CppDefGlobalData(#datasorts: List<Core_cdecl_sort>) -> Text4_text_sort
→ TextFoldES(Map((decl) -> CppDefGlobalDataDecl(decl), #datasorts))

func CppDefGlobalDataDecl(Core_cdecl_sort) -> Text4_text_sort
rule CppDefGlobalDataDecl(cdecl⟦ data ##CONSTRUCTOR ( ##cform* ) ⟧) → TextFoldES(Map((form) -> CppDefGlobalDataForm(#CONSTRUCTOR, form), #cform*))
rule CppDefGlobalDataDecl(#cdecl)                                   → text⟦⟧

func CppDefGlobalDataForm(String, Core_cform_sort) -> Text4_text_sort

  rule CppDefGlobalDataForm(#sortname, cform⟦ ##CONSTRUCTOR ##csorts? ⟧)
  → text⟦
       const CStringTerm& GC†⟨STRING: Mangle(#CONSTRUCTOR)⟩ = *(new CStringTerm(†⟨Text-QuoteEscape(#CONSTRUCTOR)⟩));⟧

  rule CppDefGlobalDataForm(#sortname, cform⟦ allows-variable ⟧)
  → text⟦
       const CStringTerm& GT†⟨STRING: Mangle(#sortname)⟩ = *(new CStringTerm(†⟨Text-QuoteEscape(#sortname)⟩));⟧

// ----- InitModule

/* Generate code initializing a module. */
func CppInitModule(#name: String, #imports: List<Core_cqidentifier_sort>, #data: {String : Core_cdecl_sort}) -> Text4_text_sort
→ text⟦
  static bool initialized = false;
  void InitModule_⟨STRING: #name⟩(tosca::Context& context)
  {
    if (!initialized) {
      initialized = true;
      †⟨TextFoldES(Map((sort )->CppRegisterDataSort(sort), MapValues(#data)))⟩
      †⟨TextFoldES(Map((qcons)->CppRegisterImport(qcons),  #imports))⟩
    }
}⟧

func CppRegisterImport(#name: Core_cqidentifier_sort) -> Text4_text_sort
→ text⟦
    InitModule_⟨STRING: Mangle(PathFileStem(JoinQIdentifier(#name, "/", TRUE)))⟩(context);⟧

func CppRegisterDataSort(Core_cdecl_sort) -> Text4_text_sort

  // Only register non-parameterized data sorts since template arguments are not available here.
  rule CppRegisterDataSort(cdecl⟦ data  ##CONSTRUCTOR ( ##cform* ) ⟧)
  → TextFoldES(Map((x) -> CppRegisterDataForm(#CONSTRUCTOR, x), #cform*))

  rule CppRegisterDataSort(#cdecl)
  → text⟦⟧

func CppRegisterDataForm(String, Core_cform_sort) -> Text4_text_sort

  rule CppRegisterDataForm(#sortname, cform⟦ ##CONSTRUCTOR ##csorts? ⟧)
  → text⟦
       context.Register(newStringTerm(†⟨Text-QuoteEscape(#CONSTRUCTOR)⟩), †⟨CppFormQualifier(#CONSTRUCTOR, (), CFC_CONS, TRUE)⟩Make);⟧

  rule CppRegisterDataForm(#sortname, cform⟦ allows-variable ⟧)
  → text⟦
       context.RegisterVariable(newStringTerm(†⟨Text-QuoteEscape(#sortname)⟩), reinterpret_cast<const VarFactory>(†⟨CppFnName(ConcatString("var", #sortname))⟩));⟧
