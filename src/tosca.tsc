// Copyright (c) 2015-2016 IBM Corporation.
/*
  Tosca compiler.
*/

import std::core
import std::listdef
import std::mapdef
import std::string
import std::language
import std::path
import std::text::Text4
import std::test::unit  // not used but keep it so it gets compiled.
import std::text::printer  // not used but keep it so it gets compiled.

import systemdef
import normalizer
import checker
import cc
import infer::infer
import cg::cgjava
import cg::cgcpp
import core::Core
import core::utils
import parser::TransScript

//--- API

/* Compile the Tosca program located to the given url, as well as imported modules
   @param `#url` a url pointing to the main program to compiler
   @param `#config` a set of configuration properties
   @return a result
 */
func Compile(#url: String, #config: {String:String}) -> Result
→ CompileS(LoadModuleS(InitSystem(#url, #config), #url, FALSE))

// --- Compilation

/* Compile system. */
func CompileS(#system: TSystem) -> Result
→ FoldResults(Map( (mod)->CompileM(#system, mod), MapValues(GetModules(#system)) ))

/* Compile module (if not part of the standard library). */
func CompileM(#system: TSystem, #module: Module) -> Result
→ If(IsModuleCompiled(#module),
    ()->Success(()),
    ()->CodeGenerateM(#system, CheckCoreM(#system, InferM(#system, ClosureConvertM(#system, #module)))))

func CodeGenerateM(#system: TSystem, #module: Module) -> Result
→ IfConfigDef(#system, "cpp", (v)->ToCppM(#system, #module), ()->ToJavaM(#system, #module))

/* Merge all results */
func FoldResults(#results: List<Result>) -> Result
→ FoldlP<Result Result>((r rs)->FoldResult(r, rs), Success(()), #results)

func FoldResult(Result, Result) -> Result
rule FoldResult(Success(#1), Success(#2)) → Success(Concat(#1, #2))
rule FoldResult(#1, #2) → FAILURE

// --- Module loading.

/* Load imported modules into the system, recursively */
func LoadImportedModules(#system: TSystem, #url:String, #imports: List<Core_cqidentifier_sort>) -> TSystem
→ FoldlP((imp system)->LoadImport(system, #url, imp), #system, #imports)

/* Load imported module into the system */
func LoadImport(#system: TSystem, #url:String, #import: Core_cqidentifier_sort) -> TSystem
→ LoadModuleS(#system, ResolveImport(#system, #url, #import), IsStandardImport(#system, #import))

/* Load module content and update system */
func LoadModuleS(#system: TSystem, #url: String, #standard:Bool) -> TSystem
→ If(HasModule(#system, #url), ()->#system, ()->LoadModuleAux(#system, #url, LoadModuleM(#url, #standard)))

func LoadModuleAux(#system: TSystem, #url: String, #module: Module) -> TSystem
→ LoadImportedModules(PutModule(#system, #url, #module), #url, GetImportsM(#module))

/* Load module content.
   @param `#url` the location of the module. Support loading core Tosca program (*.tscc file). */
func LoadModuleM(#url: String, #standard:Bool) -> Module
→ Module(#url, LoadCore(If(EndsWith(#url, ".tscc"),
                             ()->ParseResource("ccrsx", #url),
                             ()->ToCore(#url, ParseResource("transscript", #url)))), #standard)

//--- Path manipulation functions

/* Convert Tosca module into an url */
func ResolveImport(#system: TSystem, #url:String, #import: Core_cqidentifier_sort) -> String
→ ResolveImportAux(#system, #url, QIdentifierList(#import))

func ResolveImportAux(#system: TSystem, #url:String, #name: List<String>) -> String
→ ConcatString(If(IsStandardPrefix(Head(#name)), ()->GetConfigDef(#system, "baseStd", ""), ()->PathJoin(PathParent(Path(GetSystemURL(#system))))),
  ConcatString("/",
  ConcatString(Join(#name, "/"), ".tsc")))

//--- Helpers

/* @return `TRUE` if the given `#import` is a standard library module */
func IsStandardImport(#system: TSystem, #import: Core_cqidentifier_sort) -> Bool
→ IfConfigDef(#system, "bootstrap", (v)->FALSE, ()->IsStandardPrefix(Head(QIdentifierList(#import))))

/* @return `TRUE` if the given `#prefix` denotes a standard library module */
func IsStandardPrefix(#prefix: String) -> Bool
→ Or(StringEqual(#prefix, "std"), StringEqual(#prefix, "Std"))
