// Copyright (c) 2015-2016 IBM Corporation.
/*
  Tosca compiler.
*/

import std::core
import std::listdef
import std::mapdef
import std::string
import std::language
import std::path
import std::text::Text4
import std::test::unit  // not used but keep it so it gets compiled.
import std::text::printer  // not used but keep it so it gets compiled.

import analyzer
import systemdef
import normalizer
import cc
import noalias
import noanno
import infer::infer
import cg::java::cgjava
import cg::cpp::cgcpp
import core::Core
import core::utils
import parser::TransScript

import pg::ANTLR
import pg::normalizer
import pg::gensort
import pg::genparser

//--- API

/* Compile the Tosca program located to the given url, as well as imported modules
   @param `#url` a url pointing to the main program to compiler
   @param `#config` a set of configuration properties
   @return a result
 */
func Compile(#url: String, #config: {String:String}) -> Result
= let #system = InitSystem(#url, #config)
  let #loaded = LoadModuleS(#system, URLAndBase(#url,""), FALSE)
  CompileS(NoAnnoS(#loaded))

// --- Compilation

/* Compile system. */
func CompileS(#system: TSystem) -> Result
= FoldResults(Map((mod)->CompileM(#system, mod), MapValues(GetModules(#system))))

/* Compile module (if not part of the standard library). */
func CompileM(#system: TSystem, #module: Module) -> Result
= if IsModuleCompiled(#module)
    Success(())
  else
    Debug(ConcatString("Compile", GetModuleURL(#module)),
            ()->CodeGenerateM(#system, AnalyzeM(#system, NoAliasM(#system, ClosureConvertM(#system, InferM(#system, #module))))))

func CodeGenerateM(#system: TSystem, #module: Module) -> Result
= IfConfigDef(#system, "cpp", (v)->ToCppM(#system, #module), ()->ToJavaM(#system, #module))

/* Merge all results */
func FoldResults(#results: List<Result>) -> Result
= FoldlP((r rs)->FoldResult(r, rs), Success(()), #results)

func FoldResult(Result, Result) -> Result
rule FoldResult(Success(#1), Success(#2)) = Success(Concat(#1, #2))
rule FoldResult(#1, #2) = FAILURE

// --- Module loading.

/* Load imported modules into the system, recursively */
func LoadImportedModules(#system: TSystem, #url:String, #imports: List<Core_cqidentifier_sort>) -> TSystem
= FoldlP((imp system)->LoadImport(system, #url, imp), #system, #imports)

/* Load imported module into the system */
func LoadImport(#system: TSystem, #url:String, #import: Core_cqidentifier_sort) -> TSystem
= LoadModuleS(#system, ResolveImport(#system, #url, #import), IsStandardImport(#system, #import))

/* Load module content and update system */
func LoadModuleS(#system: TSystem, #url_and_base: URLAndBase, #standard:Bool) -> TSystem
= let #url = GetURLOfUnB(#url_and_base)
  if HasModule(#system, #url)
     #system
  else
    let #core = if EndsWith(#url, ".tscc")
                  ParseResource("ccrsx", #url)
                else
                  ToCore(#url, ParseResource("transscript", Debug(#url, ()->#url)))
    LoadModuleAux(LoadCore(#system, #url_and_base, #core, Or(#standard, Not(NeedRegen(#system, #url_and_base, #standard)))), #url)

func LoadModuleAux(#system: TSystem, #url: String) -> TSystem
= LoadImportedModules(#system, #url, GetImportsS(#system, #url))

// --- Determine whether module source file is newer than the corresponding generated files.

func NeedRegen(#system: TSystem, #url_and_base: URLAndBase, #standard: Bool) -> Bool
→ if #standard
    FALSE
  else if HasOption(GetConfig(#system, "inc"))
    IfConfigDef(#system, "cpp", (v)->CppNeedRegen(#system, #url_and_base), ()->JavaNeedRegen(#system, #url_and_base))
  else
    TRUE

// --- Parser generator

/* Generate parser, meta-parser, printer and sorts
 * for the grammar located at the given url */
func PG(#url:String, #config: {String:String}) -> Result
→ let #grammar = ParseResource("grammarSpec", #url)
  let #norm = NormalizeGrammar(#grammar)
  let #builddir = GetEnv("build-dir", ".")
  let #stem = PathFileStem(#url)
  let #sortfilename = ConcatString(#builddir, "/", #stem, ".tsc")
  let #metapfilename = ConcatString(#builddir, "/", #stem, "MetaParser.g4")
  let #metalfilename = ConcatString(#builddir, "/", #stem, "MetaLexer.g4")
  SaveResource("text", #sortfilename, MakeSorts(#norm), ()->
  SaveResource("text", #metapfilename, MakeMetaParser(#norm), ()->
  SaveResource("text", #metalfilename, MakeMetaLexer(#norm), ()->
  Success((#sortfilename, #metapfilename, #metalfilename)))))
