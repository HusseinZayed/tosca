/* Copyright (c) 2015-2016 IBM Corporation. */

/*
 * Standard String library
 */

import std::core
import std::num
import std::listdef

// --- Querying

/* @return TRUE if and only if the first given string contains the second given string */
@Extern func Contains(String, String) -> Bool

/* @return the length of the given string */
@Extern func Length(String) -> Numeric

/* @return the index of the first occurrence of `#pattern` in `#string`. */
@Extern func Index(#string: String, #pattern: String) -> Numeric

/* Tests if the beginning of the given string starts with the specified prefix. */
@Extern func StartsWith(String /* string */, String /* prefix */) -> Bool

/* Tests if the ending of the given string finishes with the specified suffix. */
@Extern func EndsWith(String /* string */, String /* suffix */) -> Bool

/* @return `TRUE` if and only if the given strings are equals. */
@Extern func StringEqual(String /* string */, String /* other string */) -> Bool

/* @return `TRUE` if the given `#string` matches the given `#pattern` */
@Extern func MatchRegex(#pattern: String, #string: String) -> Bool

/* If string empty, then apply `#true`, otherwise apply `#false` */
func IfEmptyString<a>(#string: String, #true: ()->a, #false: ()->a) -> a
→ If(NumberEqual(Length(#string), 0), #true, #false)

/* Splits the string around the given separator string */
@Extern func Split(String, String) -> List<String>

// --- Mutation

/* @return the concatenation of the given strings */
@Extern func ConcatString(String...) -> String

@Extern func Rescape(String) -> String

/* Converts all of the characters of the given string to lower case */
@Extern func DownCase(String) -> String

/* Converts all of the characters of the given string to upper case */
@Extern func UpCase(String) -> String

@Extern func Substring(String, Numeric, Numeric) -> String

@Extern func Substring2(String, Numeric) -> String
/* @return the given string for which he first character is upper case */
func UpCaseFirst(#string: String) -> String
→ if StringEqual(#string, "")
    ""
  else
    ConcatString(UpCase(Substring(#string, 0, 1)), Substring(#string, 1, Length(#string)))

/* @return the given string for which the first character is lower case
 */
func DownCaseFirst(#string: String) -> String
→ if StringEqual(#string, "")
    ""
  else
    ConcatString(DownCase(Substring(#string, 0, 1)), Substring(#string, 1, Length(#string)))

/* Returns given string without its first character */
func RemoveFirstChar(#string: String) -> String
→ let #length = Length(#string)
  Substring(#string, 1, #length)

/* Returns given string without its last character */
func RemoveLastChar(#string: String) -> String
→ Substring(#string, 0, Minus(Length(#string), 1))

/* Trim leading and trailing spaces */
@Extern func Trim(String) -> String

@Extern func Replace(String, String, String) -> String

/* @return the string after the first occurrence of the given first string, or
           the empty string if there is no such occurrences */
@Extern func AfterFirst(String, String) -> String

/* @return the string before the first occurrence of the given first string, or
           the original string if there is no such occurrences */
@Extern func BeforeFirst(String, String) -> String

@Extern func Escape(String) -> String

/* @return the string converted to a valid Java/C/C++ identifier */
@Extern func Mangle(String) -> String


func AfterLast(String, String) -> String

  rule AfterLast(#string, #sep)
  → if Contains(#string, #sep)
      AfterLast(AfterFirst(#string, #sep), #sep)
    else
      #string

/* @return the string before the last given `#sep` string.
   If `#sep` is not found in `#string`, return the empty string */
func BeforeLast(#string: String, #sep:String) -> String
→ if Contains(#string, #sep)
    BeforeLast-Helper(BeforeFirst(#string, #sep), #sep, BeforeLast(AfterFirst(#string, #sep), #sep))
  else
    ""

func BeforeLast-Helper(#before: String, #sep: String, #after: String) -> String
→ If(StringEqual(#after, ""),
    ()->#before,
    ()->ConcatString(#before, ConcatString(#sep, #after)))

/* Returns a new String joining the given list of strings together with the specified separator.*/
func Join(List<String>, String) -> String
rule Join((#str, #strs...), #sep) → FoldlP((str r) -> ConcatString(r, #sep, str), #str, #strs)
rule Join((              ), #sep) → ""

/* @return `#string` with all occurrences of white space collapsed to single ordinary spaces */
@Extern func Squash(#string: String) -> String
