/* Copyright (c) 2015-2016 IBM Corporation. */

/*
 * Standard String library
 */

import Std::Core
import Std::Num
import Std::Listdef

// --- Querying

/* @return TRUE if and only if the first given string contains the second given string */
extern func Contains(String, String) -> Bool

/* @return the length of the given string */
extern func Length(String) -> Numeric

/* Tests if the beginning of the given string starts with the specified prefix. */
extern func StartsWith(String /* string */, String /* prefix */) -> Bool

/* Tests if the ending of the given string finishes with the specified suffix. */
extern func EndsWith(String /* string */, String /* suffix */) -> Bool

/* @return TRUE if and only if the given strings are equals. */
extern func StringEqual(String /* string */, String /* other string */) -> Bool

// --- Mutation

extern func ConcatString(String, String) -> String

extern func Rescape(eager String) -> String
extern func DownCase(eager String) -> String

extern func Substring(eager String, eager Numeric, eager Numeric) -> String

/* Converts all of the characters of the given string to upper case */
extern func UpCase(eager String) -> String

/* @return the given string for which he first character is upper case
 */
func UpCaseFirst(String) -> String
rule UpCaseFirst(#string)
→ If<String>(StringEqual(#string, ""),
    ()->"",
    ()->ConcatString(UpCase(Substring(#string, 0, 1)), Substring(#string, 1, Length(#string))))

/* @return the given string for which the first character is lower case
 */
func DownCaseFirst(String) ->String
rule DownCaseFirst(#string)
→ If<String>(StringEqual(#string, ""),
    ()->"",
    ()->ConcatString(DownCase(Substring(#string, 0, 1)), Substring(#string, 1, Length(#string))))

/*
 * Returns given string without its first character
 */
func RemoveFirstChar(eager String) -> String
rule RemoveFirstChar(#string) → Substring(#string, 1, Length(#string))

/*
 * Returns given string without its last character
 */
func RemoveLastChar(eager String) -> String
rule RemoveLastChar(#string) → Substring(#string, 0, Minus(Length(#string), 1))

/* Trim leading and trailing spaces */
extern func Trim(eager String) -> String

extern func Replace(eager String, eager String, eager String) -> String

/* @return the string after the first occurrence of the given first string, or
          the empty string if there is no such occurrences
*/
extern func AfterFirst(eager String, eager String) -> String

extern func BeforeFirst(eager String, eager String) -> String

extern func Escape(String) -> String
extern func FormatNumber(Numeric) -> String
extern func Mangle(String) -> String

func AfterLast(eager String, eager String) -> String

  rule AfterLast(#string, #sep)
  → If<String>(Contains(#string, #sep),
      ()->AfterLast2(AfterFirst(#string, #sep), #sep),
      ()->#string)

// Internal helper.
func AfterLast2(eager String, String) -> String
rule AfterLast2(#string, #sep) → AfterLast(#string, #sep)

func BeforeLast(eager String, eager String) -> String

rule BeforeLast(#String, #Sep)
→ If<String>(Contains(#String, #Sep),
    ()->BeforeLast2(BeforeFirst(#String, #Sep), #Sep, BeforeLast(AfterFirst(#String, #Sep), #Sep)),
    ()->"")

func BeforeLast2(eager String, String, eager String) -> String
rule BeforeLast2(#Before, #Sep, #After)
→ If<String>(StringEqual(#After, ""),
    ()->#Before,
    ()->ConcatString(#Before, ConcatString(#Sep, #After)))

/* Returns a new String joining the given list of strings together with the specified separator.*/
func Join(List<String>, String) -> String
rule Join((                                   ), #sep) → ""
rule Join(Cons(#str:String, #strs:List<String>), #sep) → FoldlP<String String>((str r) -> ConcatString(r, ConcatString(#sep, str)), #str, #strs)

/* Splits the string around the given separator string */
@Extern func Split(String, String) -> List<String>
