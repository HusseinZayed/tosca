/* Copyright (c) 2015 IBM Corporation. */

import std::core
import std::pairdef
import std::num

// Sort list definition.
enum List<a> | Cons(a, List<a>) | Nil

/*
 * Basic List Operations
 */

/* @return `TRUE` if list is empty */
func IsEmpty<a>(List<a>) -> Bool
rule IsEmpty(()        ) → TRUE
rule IsEmpty((#, #s...)) → FALSE

/* @return `TRUE` if list is not empty */
func IsNotEmpty<a>(List<a>) -> Bool
rule IsNotEmpty(()                   ) → FALSE
rule IsNotEmpty(Cons(#:a, #s:List<a>)) → TRUE

/* Evaluate `#true` if the specified `#list` is empty, otherwise `#false` */
func IfEmpty<a b>(List<a>, b, b) -> b
rule IfEmpty((                   ), #1, #2) → #1
rule IfEmpty(Cons(#:a, #s:List<a>), #1, #2) → #2

/* `Null(#XS)`
   @param `#XS` list
   @return `TRUE`  if  #XS is the empty list
           `FALSE` otherwise
*/
func Null<a>(List<a>) -> Bool
rule Null((                    )) → TRUE
rule Null(Cons(#H:a, #T:List<a>)) → FALSE

/* @return `TRUE` is list is a singleton, otherwise `FALSE` */
func IsSingleton<a>(List<a>) -> Bool
rule IsSingleton((                     )) → FALSE
rule IsSingleton(Cons(#:a, #s : List<a>)) → IsEmpty<a>(#s)

/* Evaluate `#true` if the specified `#list` is a singleton, otherwise `#false` */
func IfSingleton<a b>(List<a>, b, b) -> b
rule IfSingleton((                   ), #1, #2) → #2
rule IfSingleton(Cons(#:a, #s:List<a>), #1, #2) → IfEmpty<a b>(#s, #1, #2)

/* @return head of the given `#list` */
func Head<a>(List<a>) -> a
rule Head((                   )) → Error<a>("Head of empty list")
rule Head(Cons(#:a, #s:List<a>)) → #

/* @return head of the given `#list`, as an Option */
func HeadO<a>(List<a>) -> Option<a>
rule HeadO((                   )) → NONE
rule HeadO(Cons(#:a, #s:List<a>)) → SOME(#)

/* @return all element in the list, except the last one. If the list is empty, return the empty list. */
func HeadAll<a>(List<a>) -> List<a>
rule HeadAll((                     )) → ()
rule HeadAll(Cons(#:a, List<a>::Nil)) → ()
rule HeadAll(Cons(#:a, List<a>::Cons(#2:a, #s:List<a>))) → Cons(#, HeadAll<a>(Cons(#2:a, #s:List<a>)))

/* @return last item of the list */
func Last<a>(List<a>) -> a
rule Last((                     )) → Error<a>("Last of empty list")
rule Last(Cons(#:a, List<a>::Nil)) → #
rule Last(Cons(#:a, #s:List<a>  )) → Last<a>(#s)

/* @return Tail of the list */
func Tail<a>(List<a>) -> List<a>
rule Tail((                   )) → Error<List>("Tail of empty list")
rule Tail(Cons(#:a, #s:List<a>)) → #s

/* `SubList(#XS, #from)`
   @param  `#XS` list
   @param  `#from` zero-based starting index
   @return a sublist
*/
func SubList<a>(List<a>, Numeric) -> List<a>
rule SubList((), #index)           → ()
rule SubList((#X, #XS...), #index) → If(NumberEqual(#index, 0), (#X, #XS...), SubList(#XS, Minus(#index, 1)))


/* Get element at given index (zero-based), or NONE
   @param `List<a>` the list
   @param `Numeric` the index
 */
func At<a>(List<a>, eager Numeric) -> Option<a>
rule At((        ), #i) → NONE
rule At((#, #s...), #i) → If(Equal(#i, 0), ()->SOME(#), ()->At(#s, Minus(#i, 1)))

/*
  Concat the two list
*/
func Concat<a>(List<a>, List<a>) -> List<a>
rule Concat((                    ), #tail) → #tail
rule Concat(Cons(#1:a, #s:List<a>), #tail) → Cons(#1, Concat<a>(#s, #tail))

/* Flatten list of lists
*/
func Flatten<a>(List<List<a>>) -> List<a>
rule Flatten((                                )) → ()
rule Flatten(Cons(#1:List<a>, #s:List<List<a>>)) → Concat<a>(#1, Flatten<a>(#s))

/* `Elem(#X,#XS)`
   @param  `#X`  element
   @param  `#XS` list
   @return `TRUE`  if `#X` is element of `#XS`, i.e., occurs at least once,
           `FALSE` otherwise
   @note   read "#X is element of #XS to remember the order of the parameters"
*/
func Elem<a>(a , List<a>) -> Bool
rule Elem(#X, #XS) → Foldr<a Bool>((x y) -> Or(Equal<a a>(#X, x), y), FALSE, #XS)

/* `Insert(#X, #XS)`
   @param  `#X`  element
   @param  `#XS` list
   @return a new list, where `#X` is inserted at the head of `#XS`
   @note   read "insert #X in #XS to remember the order of the parameters"
*/
func Insert<a>(a, List<a>) -> List<a>
rule Insert(#X, #XS) → Cons(#X, #XS)

/* `Range(#FROM, #TO)`
   @param  `#FROM` first number
   @param  `#TO`
   @return a new list of number from #FROM to #TO *all inclusive
*/
func Range(Numeric, Numeric) -> List<Numeric>
rule Range(#from, #to)
→ If<List>(LessThan(#from, #to),
    ()->Cons(#from, Range(Plus(#from, 1), #to)),
    ()->Cons(#to, Nil))

/*
   Append element to list.
   @param  `a` element
   @param  `List<a>` list
   @return a new list, where the element is inserted at the end of the list
*/
func Append<a>(a, List<a>) -> List<a>
rule Append(#x, (                    )) → (#x,)
rule Append(#x, Cons(#1:a, #s:List<a>)) → Cons(#1, Append<a>(#x, #s))

/*
   Pick first element matching condition
   @param  `List<a>` list
   @return an element or NONE
*/
func PickFirst<a>(List<a>,  (a) -> Bool) -> Option<a>
rule PickFirst((                    ), #) → NONE
rule PickFirst(Cons(#1:a, #s:List<a>), #) → PickFirst1<a>(#(#1), #1, #s, #)

func PickFirst1<a>(Bool, a, List<a>, (a) -> Bool) -> Option<a>
rule PickFirst1(TRUE,  #1, #s, #) → SOME(#1)
rule PickFirst1(FALSE, #1, #s, #) → PickFirst<a>(#s, #)

/* Pick first option other than `NONE`.
   @return a `SOME` option, or `NONE` */
func PickFirstO<a>(#list: List<Option<a>>) -> Option<a>
→ Maybe((option)->UnSOME(option), PickFirst(#list, (option2)->HasOption(option2)))

/* `ListEqual((x y) -> #C(x, y), #XS, #YS)`
   @param  `#C`  a condition to check for equality
   @param  `#XS` list
   @param  `#YS` list
   @return `TRUE` if the elements of `#XS` are equal to the elements of `#YS`
           wrt the supplied condition for equality `#C`
*/
func ListEqual<a b>((a b) -> Bool, List<a>, List<b>) -> Bool
rule ListEqual(#C, (                     ), (                     )) → TRUE
rule ListEqual(#C, Cons(#x:a, #xs:List<a>), (                     )) → FALSE
rule ListEqual(#C, (                     ), Cons(#y:b, #ys:List<b>)) → FALSE
rule ListEqual(#C, Cons(#x:a, #xs:List<a>), Cons(#y:b, #ys:List<b>)) → And(#C(#x, #y), ListEqual<a b>(#C, #xs, #ys))


/* `ConditionalInsert(#Condition, #X, #XS)`
   @param  `#Condition` condition for inserting the element
   @param  `#X`         element
   @param  `#XS`        list
   @return if `#Condition` evaluates to TRUE it calls Insert(`#X`,`#XS`)
           otherwise `#XS`
*/
func ConditionalInsert<a>(Bool, a, List<a>) -> List<a>
rule ConditionalInsert(TRUE,  #X, #XS) → Insert<a>(#X,#XS)
rule ConditionalInsert(FALSE, #X, #XS) → #XS

/* `ContainsDuplicates(#XS)`
   @param `#XS`   list
   @return `TRUE` if `#XS` contains duplicate elements, `FALSE` otherwise
*/
func ContainsDuplicates<a>(List<a>) -> Bool
rule ContainsDuplicates(()                    ) → FALSE
rule ContainsDuplicates(Cons(#H:a, #T:List<a>)) → Or(Elem<a>(#H, #T), ContainsDuplicates<a>(#T))

/* `RemoveDuplicates(#XS)`
   @param  `#XS` list
   @return a duplicate free version of `#XS`
*/
func RemoveDuplicates<a>(List<a>) -> List<a>
rule RemoveDuplicates(())           → ()
rule RemoveDuplicates(Cons(#X:a, #XS:List<a>)) → Cons(#X, RemoveDuplicates<a>(Filter<a>((x) -> Not(Equal<a a>(x,#X)), #XS)))

/* `Length(#XS)`
   @param  `#XS` list
   @return length of `#XS`
*/
func ListLength<a>(List<a>) -> Numeric
rule ListLength(#XS) → IWrapFoldlP<a Numeric>((x y) -> Plus(1, y), 0, #XS)

/* `Intersect(#XS, #YS)`
   @param  `#XS` list
   @param  `#YS` list
   @return the intersection of `#XS` and `#YS`
   @note   if the first list contains duplicates, the resulting list will as well
           but not vice versa
*/
func Intersect<a>(List<a>, List<a>) -> List<a>
rule Intersect(#XS, #YS) → Foldr<a List>((x zs) -> ConditionalInsert<a>(Elem<a>(x,#YS), x, zs), (), #XS)

/* `Union(#XS, #YS)`
   @param  `#XS` list
   @param  `#YS` list
   @return the union of `#XS` and `#YS`, in particular the duplicates are removed
*/
func Union<a>(List<a>, List<a>) -> List<a>
rule Union(#XS, #YS) → RemoveDuplicates<a>(Concat<a>(#XS,#YS))

/* `Reverse(#XS)`
   @param  `#XS` list
   @return the reverse list of `#XS`
*/
func Reverse<a>(List<a>) -> List<a>
rule Reverse(#XS) → Foldl<a List>((x xs) -> Insert<a>(x, xs), (), #XS)

/*
 * Zip
 */

/* `Zip(#XS,#YS)`
   @param  `#XS` list
   @param  `#YS` list
   @return a list of Pairs where the first argument is taken from `#XS` and the second argument from `#YS`.
   @error: if `Length(#XS) != Length(#YS)`
*/
func Zip<a b>(List<a>, List<b>) -> List<Pair<a b>>
rule Zip(() ,      ())      → ()
rule Zip(() ,      # )      → Error<List>("ListExtension.Zip: second argument list was longer")
rule Zip(#  ,      ())      → Error<List>("ListExtension.Zip: first argument list was longer")
rule Zip(Cons(#X:a, #XS:List<a>), Cons(#Y:b, #YS:List<b>)) → Cons(PairCons(#X,#Y), Zip<a b>(#XS,#YS))

/* `UnZipF(#XS)`
   @param  `#XS` list of pairs
   @return a list of the pairs first component
*/
func UnZipF<a b>(List<Pair<a b>>) -> List<a>
rule UnZipF(())      → ()
rule UnZipF(Cons(Pair<a b>::PairCons(#F: a, #S: b), #XS:List<Pair<a b>>)) → Cons(#F, UnZipF<a b>(#XS))

/* `UnZipS(#XS)`
   @param  `#XS` list of pairs
   @return a list of the pairs second component
*/
func UnZipS<a b>(List<Pair<a b>>) -> List<b>
rule UnZipS(())      → ()
rule UnZipS(Cons(Pair<a b>::PairCons(#F: a, #S: b), #XS:List<Pair<a b>>)) → Cons(#S, UnZipS<a b>(#XS))


/* `LookUp( #Key, #KeyValueList)`
    @param `#Key`          a key
    @param `#KeyValueList` a list of key-value pairs
    @return a list of values associated to the `#Key` in `#KeyValueList` and returns the empty list, if `#Key` was not found
*/
func LookUp<a b>(a, eager List<Pair<a b>>) -> List<b>
rule LookUp(#Key, #KeyValueList) → Map<Pair b>((x) -> Snd<a b>(x), Filter<Pair>((pair) -> Equal<a a>(#Key, Fst<a b>(pair)), #KeyValueList))

/* `LookUpVar( #Key, #KeyValueList)`
    @param `#Key`          a variable
    @param `#KeyValueList` a list of key-value pairs
    @return a list of values associated to the `#Key` in `#KeyValueList` and returns the empty list, if `#Key` was not found
*/
func LookUpVar<a b>(a, List<Pair<a b>>) -> List<b>
rule LookUpVar(#Key, #KeyValueList) → Map((x) -> Snd(x), Filter((pair) -> SameVariable(#Key, Fst(pair)), #KeyValueList))


/* DelEntry
   @param  `#Key`          of the key-value pairs to delete
   @param  #KeyValueist` the key-value pairs
   @return a list of `#KeyValueList`, where all entries with `#Key` are deleted
 */
func DelEntry<a b>(a, List<Pair<a b>>) -> List<Pair<a b>>
rule DelEntry(#Key, #KeyValueList) → Filter<Pair>((pair) -> Not(Equal<a a>(Fst<a b>(pair), #Key)), #KeyValueList)

/* `Partition((x) ->#C(x), #XS)`
    @param `(x) ->#C(x)` a condition to partition
    @param `XS`      the list to partition
    @return a pair `PairCons(#Ts, #Fs)`, where the first component `#Ts` holds all
           elements of `#XS` for which `#C` evaluates to `TRUE` and the second compoent `#Fs`
           holds all elements for `#C` evaluates to `FALSE`
*/

func Partition<a>((a) -> Bool, List<a>) -> Pair<List<a> List<a>>
rule Partition(#C, #XS) → Foldr<a Pair>((x res) -> MatchPartition<a>(#C(x), x, res), PairCons((),()), #XS)

func MatchPartition<a>(Bool, a, Pair<List<a> List<a>>) -> Pair<List<a> List<a>>
rule MatchPartition(TRUE,  #X, PairCons(#TS:List<a>, #FS:List<a>)) → PairCons(Insert<a>(#X,#TS), #FS)
rule MatchPartition(FALSE, #X, PairCons(#TS:List<a>, #FS:List<a>)) → PairCons(#TS, Insert<a>(#X,#FS))

/* Apply each item in list to function
 */
func Map<a b>((a) -> b, List<a>) -> List<b>
rule Map(#, (                    )) → ()
rule Map(#, Cons(#1:a, #s:List<a>)) → Cons(#(#1), Map<a b>(#, #s))

/* `Map2((x) ->#F(x), #XS)`
   @param   `(x) ->#F(x)` a function which takes one element of the list as input
   @param   `#XS`     a list of elements
   @returns a list where the function `#F` is applied to all elements `#X` in `#XS`
   @note    alternative implementation to `Map` based on `Foldr`
*/
func Map2<a b>((a) -> b, List<a>) -> List<b>
rule Map2(#F, #XS) → Foldr<a List>((y ys) -> Insert<b>(#F(y), ys), (), #XS)

/* Monadic map. Apply each item in list to the function taking a state and an element,
   evaluating to a new state and a value. Apply the next element with the new state.
   @param `state->a x->b.Pair<a c>` the function to apply
   @param `a` the initial state
   @param `List<b>` the list of elements to apply
   @return a pair containing the end state and the a list containing resulting values.
 */
func MapM<a b c>((a b) -> Pair<a c>, a, List<b>) -> Pair<a List<c>>
rule MapM(#, #state, #s) → MapM2<a b c>(#, #state, #s, ())

func MapM2<a b c>((a b) -> Pair<a c>, a, List<b>, List<c>) -> Pair<a List<c>>
rule MapM2(#, #state, (                    ), #rs) → PairCons(#state, #rs)
rule MapM2(#, #state, Cons(#1:b, #s:List<b>), #rs) → MapM3<a b c>(#(#state, #1), #, #s, #rs)

func MapM3<a b c>(Pair<a c>, (a b) -> Pair<a c>, List<b>, List<c>) -> Pair<a List<c>>
rule MapM3(PairCons(#nstate:a, #r:c), #, #s, #rs) → MapM2<a b c>(#, #nstate, #s, Append<c>(#r, #rs))


/* `Filter((x) ->#C(x), #XS)`
    @param  `(x) ->#C(x)` a function which takes an element of the list as input and returns a `Bool`
    @param  `#XS`     a list
    @return a list, where with only those `#X` in `#XS` where condition `#C(#X)` evaluates to `TRUE`
*/
func Filter<a>((a) -> Bool, List<a>) -> List<a>
rule Filter(#C, #XS) → Foldr<a List>((x y) -> ConditionalInsert<a>(#C(x), x, y) , (), #XS)

/*
 * Folds
 */

/* `Foldl((x y) -> #F(x,y), #Z, #XS)`
    @param  `(x y) -> #F(x, y)` a function which takes as first argument an element of `#XS` and `#Z` as a second.
    @param  `#Z`           the starting value of the accumulator
    @param  `#XS`          a list
    @return a value, where the the function `#F` is applied left associatively to all `#X` in `#XS` starting from the accumulator `#Z`
*/
func Foldl<a b>((a b) -> b, b, List<a>) -> b
rule Foldl(#F, #Z, (                    )) → #Z
rule Foldl(#F, #Z, Cons(#H:a, #T:List<a>)) → Foldl<a b>(#F, #F(#H,#Z), #T)

/*
  @note `InterpreterWrap` for `FoldP` enforcing computation of argument list `#XS`
*/
func IWrapFoldlP<a b>((a b) -> b, b, List<a>) -> b
rule IWrapFoldlP(#F, #Z, #XS) → FoldlP<a b>(#F, #Z, #XS)

/* `FoldlP((x y) -> #F(x,y), #Z, #XS)`
    @param  `(x y) -> #F(x, y)` a function which takes as first argument an element of `#XS` and `#Z` as a second.
    @param  `#Z`           the starting value of the accumulator
    @param  `#XS`          a list
    @return  a list, where the the function `#F` is applied left associatively to all `#X` in `#XS` starting from the accumulator `#Z`, which is evaluated at each intermediate step
    @note    as `Foldl` but forces intermediate data computation
*/
func FoldlP<a b>((a b) -> b, eager b, List<a>) -> b
rule FoldlP(#F, #Z, (                    )) → #Z
rule FoldlP(#F, #Z, Cons(#H:a, #T:List<a>)) → FoldlP<a b>(#F, #F(#H,#Z), #T)


/* `Foldr((x y) -> #F(x,y), #Z, #XS):
    @param  `(x y) -> #F(x, y)` a function which takes as first argument an element of `#XS` and `#Z` as a second.
    @param  `#Z`           the starting value of the accumulator
    @param  `#XS`          a list
    @return a list, where the the function `#F` is applied right associatively to all `#X` in `#XS` starting from the accumulator `#Z`
    @note like Foldl, but right associative
*/
func Foldr<a b>((a b) -> b, b, List<a>) -> b
rule Foldr(#F, #Z, (                    )) → #Z
rule Foldr(#F, #Z, Cons(#H:a, #T:List<a>)) → #F(#H, Foldr<a b>(#F, #Z, #T))
