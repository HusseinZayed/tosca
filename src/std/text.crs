Text[(

$Use["std/core.crs"];
$Use["std/list.crs"];
$Use["std/pair.crs"];

// Sorts using constructors from grammar.
Text ::= ( $TextCons[Text-Part, Text] ; $TextNil ; ) ;

Text-Part ::= (
    $TextChars[$String]; // text characters, as is
    $TextBreak[$String]; // '¶' output a newline
    $TextIndent[Text];   // '⟦' ... '⟧' indent text
    $TextEmbed[Text];    // '«' ... '»' embedded term
    $TextString[Text];   // '†' cast embedded term as string
) ;

∀ a . AsText[a] :: Text;
AsText[#text] → #text ;

// Fragment denoting term embedded in user language text.
//
Text-Embed[Text<!--Term-->] :: Text ;
Text-Embed[#TermText] → %n⟦†«"\u00ab\u00ab"»« #TermText »†«"\u00bb\u00bb"»⟧ ;

// Fragment denoting string embedded in user language text.
//
Text-String[Text<!--String-->] :: Text ;
Text-String[#TermText] → %n⟦†«"\u2020\u2020"»†«"\u00ab\u00ab"»« #TermText »†«"\u00bb\u00bb"»⟧ ;

// Fragment to be parsed as generated text (to be printed).
//
Text-Text[Text] :: Text ;
Text-Text[#content] → Text-User["n", #content] ;

/* `Text-ConcatPair[#Pair]`
 * Concat pair of `Text`
*/
Text-ConcatPair[Pair[Text, Text]] :: Text;
Text-ConcatPair[PairCons[#1, #2]] → %n⟦«#1»«#2»⟧;

// Fragment to be parsed as user language text.
//
Text-User[$String<!--ParsePrefix-->, Text<!-- Unparsed -->] :: Text ;
Text-User[#ParsePrefix, #Unparsed] →  %n⟦%†«#ParsePrefix»†«"\u27e6\u27e6"»« #Unparsed »†«"\u27e7\u27e7"»⟧ ;

Text-Token[$String] :: Text;
-[Data[#t]] : Text-Token[#t] → %n⟦†« #t »⟧ ; 

Text-CommentToken[$String] :: Text;
-[Data[#t]] : Text-CommentToken[#t] → %n⟦†« $[Replace,#t,"*/","*_/"] »⟧ ; 

Text-Comment[$String] :: Text;
-[Data[#t]] : Text-Comment[#t] → %n⟦†« $[:, "/*", $[Replace,#t,"*/","*_/"], "*/"] »⟧ ;

Text-QuoteEscape[$String] :: Text;
-[Data[#t]] : Text-QuoteEscape[#t] → %n⟦†«$[Escape,#t]»⟧;

Text-Integer[$Numeric] :: Text;
-[Data[#t]] : Text-Integer[#t] → %n⟦†« $[FormatNumber, #t] »⟧ ;

Text-Mangle[$String] :: Text;
-[Data[#t]] : Text-Mangle[#t] → %n⟦†« $[Mangle,#t] »⟧ ;

TextFold[$List[Text], Text] :: Text;
TextFold[()     , #sep] → %n⟦⟧ ;
TextFold[(#1;#s), #sep] → %n⟦« #1 »« TextFold1[#s, #sep] »⟧ ;

TextFold1[$List[Text], Text] :: Text;
TextFold1[()     , #sep] → %n⟦⟧ ;
TextFold1[(#1;#s), #sep] → %n⟦« #sep »« #1 »« TextFold1[#s, #sep] »⟧ ;

ReverseTextFold[$List[Text], Text] :: Text;
-[Discard[#sep]]: ReverseTextFold[()        , #sep] → %n⟦⟧ ;
-[Discard[#sep]]: ReverseTextFold[(#1;)     , #sep] → %n⟦« #1 »⟧ ;
-               : ReverseTextFold[(#1;#2;#s), #sep] → %n⟦« ReverseTextFold[(#2;#s), #sep] »« #sep »« #1 »⟧ ;

// -- Conversion

StringToText[$String] :: Text ;
StringToText[#] → %n⟦†«#»⟧ ;

NumberToText[$Numeric] :: Text;
-[Data[#n]]: NumberToText[#n] → %n⟦†«$[FormatNumber,#n]»⟧;

TextToString[Text] :: $String ;
-[Data[#]] : TextToString[#] → $[Show, #]; // TODO.


)]