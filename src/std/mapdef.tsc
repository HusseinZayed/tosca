/* Copyright (c) 2016 IBM Corporation. */

/*
    Standard library for homogeneous (hash) map,
    associated with syntactic variable map
 */
import std::core
import std::listdef
import std::pairdef

/* Extend the given map with the given key-value pair.
   If a entry for the given key already exists in the map, it is shadowed.
   @return the extended map.
 */
@Extern func MapPut<a b>({a : b}, a /* key */,  b /* value */) -> {a : b}

/* Lookup entry for given key.
   @return the value of type b or NONE if not in the map
 */
@Extern func MapGet<a b>({a : b} /* map */,  a /* key */) -> Option<b>

/* Lookup entry for given key.
 @return the value of type b or the default value if not in the map
*/
func MapGetD<a b>(#map: {a : b}, #key: a, #default: b) -> b
→ IfPresent(MapGet(#map, #key), (v)->v, ()->#default)

/* Extend the given map with the given key-value pair, where key is a syntactic variable
   If a entry for the given key already exists in the map, it is shadowed.
   @return the extended map.
 */
@Extern func MapPutVar<a b c d>({a : b},  c /* variable key */,  d /* value */) -> {a : b}

/* Lookup entry for given variable key.
   @return the value of type b or NONE if not in the map
 */
@Extern func MapGetVar<a b c>({a : b}, c /* variable key */) -> Option<b>

/* Lookup entry for given variable key.
   @return the value of type d or NONE if not in the map
 */
@Extern func MapGetVarT<a b c d>({a : b}, c /* variable key */) -> Option<d>

/* Lookup entry for given variable key.
   @return the value of type b or NONE if not in the map
 */
func MapGetVarD<a b c d>(#map: {a : b}, #var: c, #default: d) -> d
→ IfPresent(MapGetVarT(#map, #var), (v)->v, ()->#default)

/* Gets list of keys, excluding variable keys */
@Extern func MapKeys<a b>({a : b}) -> List<a>

/* Gets list of values, excluding variable values */
@Extern func MapValues<a b>({a : b}) -> List<b>

/* Gets list of variable keys */
@Extern func MapVarKeys<a b c>({a : b}) -> List<c>

/* Gets list of variable values */
@Extern func MapVarValues<a b c>({a : b}) -> List<c>

/* Create new empty map */
@Extern func MapNew<a b>() -> {a : b}

/* @return a map containing the given list of key-value pairs*/
func MapIndex<a b>(#entries: List<PPair<a b>>) -> {a:b}
→ FoldlP<PPair<a b> {a:b}>((pair map) -> MapPut<a b>(map, Fst<a b>(pair), Snd<a b>(pair)), MapNew<a b>, #entries)

/* Add all entried from `#map2` into `#map1`.
   Entries in `#map1` existing in `#map2` are shadowed.
   @return the extended map.
 */
@Extern func MapAddAll<a b>(#map1: {a : b}, #map2: {a : b}) -> {a : b}

/* @return `TRUE` when the given `#map` is empty, `FALSE` otherwise. */
@Extern func MapIsEmpty<a b>(#map: {a : b}) -> Bool

/* @return `TRUE` when the given `#map` contains an entry for the given `#key`, `FALSE` otherwise */
func MapContains<a b>(#map: {a : b}, #key: a) -> Bool
→ HasOption(MapGet(#map, #key))

/* @return `TRUE` when the given `#map` contains an entry for the given variable `#key`, `FALSE` otherwise */
func MapContainsVar<a b c>(#map: {a : b}, #key: c) -> Bool
→ HasOption(MapGetVar(#map, #key))

/* Look for a map in the given value, starting from the end. */
@Extern func MapFind<a b c>(c) -> {a:b}

/* Replace last map in the given value. */
@Extern func MapReplace<a b c>(c, {a:b}) -> c

// ---- Multi-maps

enum MMap2<a b c d> | MMap2({a:b}, {c:d})
enum MMap3<a b c d e f> | MMap3({a:b}, {c:d}, {e:f})
enum MMap4<a b c d e f g h> | MMap4({a:b}, {c:d}, {e:f}, {g:h})
enum MMap5<a b c d e f g h i j> | MMap5({a:b}, {c:d}, {e:f}, {g:h}, {i:j})

func MMap2Fst<a b c d>({a:b & c:d}) -> {a:b}
rule MMap2Fst(MMap2(#fst, #snd)) → #fst

func MMap2Snd<a b c d>({a:b & c:d}) -> {c:d}
rule MMap2Snd(MMap2(#fst, #snd)) → #snd

/* Lookup entry for given key.
 @return the value of type b or the default value if not in the map
*/
func MMap2GetD<a b c d>({a:b & c:d}, a, b) -> b
rule MMap2GetD(MMap2(#map1, #map2), #key, #default) → MapGetD(#map1, #key, #default)
