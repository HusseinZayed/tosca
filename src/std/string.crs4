/* Copyright (c) 2015 IBM Corporation. */

/*
 * Standard library for string.
 */

import Std::Core
import Std::Num
import Parser::TransScript
// --- Wrapper

//String | ( String(String)  )

// --- Querying

extern func Contains(String /* string */, String /* search string */) -> Bool

extern func Length(String /* string */) -> Numeric

extern func StartsWith(String /* string */, String /* search string */) -> Bool

extern func EndsWith(String /* string */, String /* search string */) -> Bool

extern func StringEqual(String /* string */, String /* other string */) -> Bool

// --- Mutation

extern func ConcatString(String, String) -> String

extern func Rescape(eager String) -> String
extern func UpCase(eager String) -> String
extern func DownCase(eager String) -> String

extern func Substring(eager String, eager Numeric, eager Numeric) -> String

func UnString(eager String) -> String
rule UnString(#string) → Rescape(#string)

/*
 * Make sure the given string first character is upper case
 */
func UpCaseFirst(String) -> String
rule UpCaseFirst(#string)
→ If<String>(StringEqual(#string, ""),
    ()->"",
    ()->ConcatString(UpCase(Substring(#string, 0, 1)), Substring(#string, 1, Length(#string))))

/*
 * Make sure the given string first character is lower case
 */
func DownCaseFirst(String) ->String
rule DownCaseFirst(#string)
→ If<String>(StringEqual(#string, ""),
    ()->"",
    ()->ConcatString(DownCase(Substring(#string, 0, 1)), Substring(#string, 1, Length(#string))))

/*
 * Returns given string without its first character
 */
func RemoveFirstChar(eager String) -> String
rule RemoveFirstChar(#string) → Substring(#string, 1, Length(#string))


/*
 * Returns given string without its last character
 */
func RemoveLastChar(eager String) -> String
rule RemoveLastChar(#string) → Substring(#string, 0, Minus(Length(#string), 1))

/*
 * Trim leading and trailing spaces
 */
extern func Trim(eager String) -> String

extern func Replace(eager String, eager String, eager String) -> String

extern func AfterFirst(eager String, eager String) -> String

func AfterLast(eager String, eager String) -> String

extern func Escape(String) -> String
extern func FormatNumber(Numeric) -> String
extern func Mangle(String) -> String


rule AfterLast(#string, #sep)
→ If<String>(Contains(#string, #sep),
      ()->AfterLast2(AfterFirst(#string, #sep), #sep),
      ()->#string)

// Internal helper.
func AfterLast2(eager String, String) -> String
rule AfterLast2(#string, #sep) → AfterLast(#string, #sep)

extern func BeforeFirst(eager String, eager String) -> String

func BeforeLast(eager String, eager String) -> String

rule BeforeLast(#String, #Sep)
→ If<String>(Contains(#String, #Sep),
    ()->BeforeLast2(BeforeFirst(#String, #Sep), #Sep, BeforeLast(AfterFirst(#String, #Sep), #Sep)),
    ()->"")

func BeforeLast2(eager String, String, eager String) -> String
rule BeforeLast2(#Before, #Sep, #After)
→ If<String>(StringEqual(#After, ""),
    ()->#Before,
    ()->ConcatString(#Before, ConcatString(#Sep, #After)))

// --- Parsing

/* Parse external resource using parser identified by the given category
 * @return a parsed term.
 */
extern func ParseResource<a>(String /* category */ , eager String /* filename */) -> a

/* Parse external resource as term file format.
 * @return a parsed term.
 */
func ParseTerm<a>(#filename: String /* file location */) -> a
→ ParseResource<a>("term", #filename)
