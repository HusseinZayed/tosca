/* Copyright (c) 2016 ibm corporation. */
import std::core
import std::listdef
import std::pairdef
import std::string
import std::num
import std::text::Text4

// Fragment denoting term embedded in user language text.

func Text-Embed(Text4_text_sort) -> Text4_text_sort
rule Text-Embed(#TermText) → text⟦⟨STRING:"\u27e8"⟩†⟨ #TermText ⟩⟨STRING:"\u27e9"⟩⟧

// Fragment denoting string embedded in user language text.

func Text-String(Text4_text_sort) -> Text4_text_sort
rule Text-String(#TermText) → text⟦⟨STRING:"\u2020\u2020"⟩⟨STRING:"\u27e8"⟩†⟨ #TermText ⟩⟨STRING:"\u27e9"⟩⟧

func Text-String2(Text4_text_sort) -> Text4_text_sort
rule Text-String2(#TermText) → text⟦⟨STRING:"\u27e8"⟩STRING: †⟨ #TermText ⟩⟨STRING:"\u27e9"⟩⟧

// Fragment to be parsed as generated text (to be printed).

func Text-Text(Text4_text_sort) -> Text4_text_sort
rule Text-Text(#content) → Text-User("text", #content)

/* `Text-ConcatPair(#Pair)`
 * Concat pair of `Text`
*/
func Text-ConcatPair(Pair<Text4_text_sort Text4_text_sort>) -> Text4_text_sort
rule Text-ConcatPair(PairCons(#1:Text4_text_sort, #2:Text4_text_sort)) → text⟦†⟨#1⟩†⟨#2⟩⟧

// Fragment to be parsed as user language text.

func Text-User(String, Text4_text_sort) -> Text4_text_sort
rule Text-User(#ParsePrefix, #Unparsed)
→ text⟦⟨STRING:#ParsePrefix⟩⟨STRING:"\u27e6\u27e6"⟩†⟨ #Unparsed ⟩⟨STRING:"\u27e7\u27e7"⟩⟧

func Text-Token(eager String) -> Text4_text_sort
rule Text-Token(#t) → text⟦⟨STRING: #t ⟩⟧

func Text-CommentToken(eager String) -> Text4_text_sort
rule Text-CommentToken(#t) → text⟦⟨STRING: Replace(#t,"*/","*_/") ⟩⟧

func Text-Comment(eager String) -> Text4_text_sort
rule Text-Comment(#t) → text⟦⟨STRING: ConcatString(ConcatString("/*", Replace(#t,"*/","*_/")), "*/") ⟩⟧

func Text-QuoteEscape(eager String) -> Text4_text_sort
rule Text-QuoteEscape(#t) → text⟦⟨STRING: Escape(#t) ⟩⟧

func Text-Integer(eager Numeric) -> Text4_text_sort
rule Text-Integer(#t) → text⟦⟨STRING: FormatNumber(#t) ⟩⟧

func Text-Mangle(eager String) -> Text4_text_sort
rule Text-Mangle(#t) → text⟦⟨STRING: Mangle(#t) ⟩⟧

/* Apply given function only if condition is met.
  Otherwise produces the empty text
*/
func TextIf(#cond: Bool, #: ()->Text4_text_sort) -> Text4_text_sort
→ If(#cond, #, ()->text⟦⟧)

/* Apply each item in the given list to the given function producing text.
   Concatenate produced text using no separator
 */
func TextMapFold<a>(#f: (a) -> Text4_text_sort, #list: List<a>, #sep: Text4_text_sort) -> Text4_text_sort
→ TextFold(Map(#f, #list), #sep)

func TextMapFoldES<a>(#f: (a) -> Text4_text_sort, #list: List<a>) -> Text4_text_sort
→ TextMapFold(#f, #list, text⟦⟧)

func TextFold(List<Text4_text_sort>, Text4_text_sort) -> Text4_text_sort
rule TextFold(()         , #sep) → text⟦⟧
rule TextFold(Cons(#1:Text4_text_sort, #s:List<Text4_text_sort>), #sep) → text⟦†⟨ #1 ⟩†⟨ TextFold1(#s, #sep) ⟩⟧

func TextFold1(List<Text4_text_sort>, Text4_text_sort) -> Text4_text_sort
rule TextFold1(()     , #sep) → text⟦⟧
rule TextFold1(Cons(#1:Text4_text_sort, #s:List<Text4_text_sort>), #sep) → text⟦†⟨ #sep ⟩†⟨ #1 ⟩†⟨ TextFold1(#s, #sep) ⟩⟧

/* Text fold with empty separator */
func TextFoldES(#list: List<Text4_text_sort>) -> Text4_text_sort
→ TextFold(#list, text⟦⟧)

func ReverseTextFold(List<Text4_text_sort>, Text4_text_sort) -> Text4_text_sort

  rule ReverseTextFold(()        , #sep)
  → text⟦⟧

  rule ReverseTextFold(Cons(#1:Text4_text_sort, List<Text4_text_sort>::Nil), #sep)
  → text⟦†⟨ #1 ⟩⟧

  rule ReverseTextFold(Cons(#1:Text4_text_sort, List<Text4_text_sort>::Cons(#2:Text4_text_sort, #s:List<Text4_text_sort>)), #sep)
  → text⟦†⟨ ReverseTextFold(Cons(#2, #s), #sep) ⟩†⟨ #sep ⟩†⟨ #1 ⟩⟧

// -- Conversion

func StringToText(String) -> Text4_text_sort
rule StringToText(#) → text⟦⟨STRING:#⟩⟧

func NumberToText(eager Numeric) -> Text4_text_sort
rule NumberToText(#n) → text⟦⟨STRING:FormatNumber(#n)⟩⟧

func TextToString(eager Text4_text_sort) -> String
rule TextToString(#) → Show<Text4_text_sort>(#)
