import Std::Core

/*
parametric polymorphic sort for a Pair
*/
enum Pair<a b> | PairCons(a, b)

/*
  `Fst(#P)` 
  @param  `#P` Pair
  @return returns the first component of the given pair `#P`
*/
func Fst<a b>(Pair<a b>) -> a 
rule Fst(PairCons(#X,#Y)) → #X 

/*
  `Snd(#P)` 
  @param  `#P` Pair
  @return returns the second component of the given pair `#P`
*/
func Snd<a b>(Pair<a b>) -> b 
rule Snd(PairCons(#X,#Y)) → #Y 

/*
  Deconstruct pair 
  @param `Pair<a b>` Pair
  @param `x1->a x2->b.$sort(c)` Recipient for desconstructed pair
  @return returns the recipient result
*/
func UnPair<a b c>(Pair<a b>, [a b] -> c) -> c 
rule UnPair(PairCons(#1, #2), [x1 x2] -> #(x1, x2)) → #(#1, #2) 
