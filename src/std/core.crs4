enum OK_SORT | OK


// --- Evaluation

/**
 * Evaluate the input
 */
func Eval<a>(eager a) -> a
rule Eval(#) → #

// --- External Environment

extern func IfDef<a b c>(eager a /* Key */, c, c) -> c
extern func GetEnv(eager String /* Key */, String /* Default */) -> String

// --- Optional value

enum Option<a> | SOME(a) | NONE

func UnSOME<a>(Option<a>) -> a
rule UnSOME(SOME(#:a)) → #

// TODO: unable when not using interpreter (which is too strict)
//UnSOME(NONE)    → $(Error, "Error: no optional value."),

/* `HasOption(#option)`
   Whether #option is `SOME` value.
 */
func HasOption<a>(Option<a>) -> Bool
rule HasOption(NONE)    → FALSE
rule HasOption(SOME(#:a)) → TRUE

func Maybe<a b>((a)->b, Option<a>) -> Option<b>
rule Maybe((x)->#(x), NONE) → NONE
rule Maybe((x)->#(x), SOME(#val)) → SOME(#(#val))

// --- Bool

enum Bool | TRUE | FALSE

func If<a>(Bool, a, a) -> a
rule If(TRUE,  #1, #2) → #1
rule If(FALSE, #1, #2) → #2

func And(Bool, Bool) -> Bool
rule And(TRUE, #)  → #
rule And(FALSE, #) → FALSE

func Or(Bool, Bool) -> Bool
rule Or(TRUE, #)  → TRUE
rule Or(FALSE, #) → #

func Not(Bool) -> Bool
rule Not(TRUE)  → FALSE
rule Not(FALSE) → TRUE

extern func Equal<a b>(eager a, eager b) -> Bool

extern func SameVariable<a b>(a, b) -> Bool

// --- Debugging

extern func Trace<a>(eager a) -> a

extern func Show<a>(a) -> String

// -- Error
extern func Error<a>(String) -> a
