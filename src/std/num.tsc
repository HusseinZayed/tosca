/* Copyright (c) 2015-2016 IBM Corporation. */

/*
 * Standard numeric library
 */
import std::core

// --- integer max and min declarations

/* @return Internal number to represent integer max based on double's
           precision (mantissa is 53 bits). Note that integer is 
           language specific. In C++ the integer primitive is long 
           long (64 bits). In Java the integer primitive is int 
           (32 bits). */
@Extern func GetDefine_INTEGER_MAX_DBL_PRECISION() -> Numeric

/* @return Internal number to represent integer min based on double's
           precision (mantissa is 53 bits). Note that integer is 
           language specific. In C++ the integer primitive is long 
           long (64 bits). In Java the integer primitive is int 
           (32 bits). */
@Extern func GetDefine_INTEGER_MIN_DBL_PRECISION() -> Numeric

/* @return clip the number given to the internal integer max or min
           if it is outside of that interval, otherwise return the 
           original number */
@Extern func ClipToMaxOrMin(Numeric) -> Numeric

/* @return TRUE if and only if the the number given is within the
           internal integer min to max interval */
@Extern func IsWithinIntegerPrecision(Numeric) -> Bool


@Extern func Plus(Numeric, Numeric) -> Numeric
@Extern func Minus(Numeric, Numeric) -> Numeric
@Extern func Times(Numeric, Numeric) -> Numeric
@Extern func Modulo(Numeric, Numeric) -> Numeric
@Extern func Divide(Numeric, Numeric) -> Numeric

// Compare the 2 numeric values
func NumberEqual(#left: Numeric, #right: Numeric) -> Bool
rule NumberEqual(#1, #2) → Equal(#1, #2)

// Addition
func NumberPlus(#1: Numeric, #2: Numeric) -> Numeric
→ Plus(#1, #2)

// Subtraction
func NumberMinus(#1: Numeric, #2: Numeric) -> Numeric
→ Minus(#1, #2)

func GreaterThanOrEqual(#left: Numeric, #right:Numeric) -> Bool
→ Or(GreaterThan(#left, #right), Equal(#left, #right))


func LessThanOrEqual(#left:Numeric, #right: Numeric) -> Bool
→ Or(LessThan(#left, #right), Equal(#left, #right))

// LessThan
@Extern func LessThan(Numeric, Numeric) -> Bool
@Extern func GreaterThan(Numeric, Numeric) -> Bool
@Extern func FormatNumber(Numeric) -> String
@Extern func FormatInteger(Numeric) -> String
@Extern func FormatDecimal(Numeric) -> String
@Extern func Hex(String) -> Numeric
@Extern func ToInteger(String) -> Numeric
@Extern func ToDecimal(String) -> Numeric

/* Apply `#true` if number is zero, otherwise `#false` */
func IfZero<a>(#value: Numeric, #true: ()->a, #false: ()->a) -> a
→ If(NumberEqual(#value, 0), #true, #false)
