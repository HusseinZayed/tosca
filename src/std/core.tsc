/* Copyright (c) 2016 IBM Corporation. */

// --- Builtin annotations

/* Tell the compiler to keep a reference to the annotated term. */
type Keep = Bool

/* Tell the compiler to keep a reference to all meta-variables. */
type KeepAll = List<String>

/* Tell the compiler which meta-variables are captured within a lambda. */
type Captured = List<String>

/* Tell the compiler to not create a lambda expression. */
type NoLambda = Bool

/* Tell the compiler to not perform substitution. */
type NoSubst = Bool

/* Tell the compiler to reuse a matched binder */
type Reuse = PPair<String /* meta-variable name */ Numeric /* binder position in meta arguments */>

/* Indicate whether the value of the type with this annotation is retained at runtime, when used as an annotation */
//type Extern = Bool

/* Indicate whether the value of the type with this annotation is retained at runtime, when used as an annotation */
type Runtime = Bool

/* Hold region in source file */
@Runtime
type Region = {String:String}

// --- Evaluation

/**
 * Evaluate the input
 */
func Eval<a>(a) -> a
rule Eval(#) → #

// --- External Environment

@Extern func IfDef<a>(String /* Key */, ()->a, ()->a) -> a

/* @return the string that matches the specified `#key` in the system environment, or
   the given `#default` string when no such key exists */
@Extern func GetEnv(#key: String, #default: String) -> String

// --- Optional value

enum Option<a> | SOME(a) | NONE

/* @return the optional value. Raises an error when there is no such value */
func UnSOME<a>(Option<a>) -> a
rule UnSOME(SOME(#)) → #
rule UnSOME(NONE)    → Error("Error: no optional value.")

/* `HasOption(#option)`
   Whether #option is `SOME` value.
 */
func HasOption<a>(Option<a>) -> Bool
rule HasOption(NONE)    → FALSE
rule HasOption(SOME(#)) → TRUE

func Maybe<a b>((a)->b, Option<a>) -> Option<b>
rule Maybe((x)->#(x), NONE)       → NONE
rule Maybe((x)->#(x), SOME(#val)) → SOME(#(#val))

func MaybeO<a b>((a)->Option<b>, Option<a>) -> Option<b>
rule MaybeO((x)->#(x), NONE)       → NONE
rule MaybeO((x)->#(x), SOME(#val)) → #(#val)

/* Apply `#true` if option is present, otherwise `#false` */
func IfPresent<a b>(Option<a>, (a)->b, ()->b) -> b
rule IfPresent(SOME(#), #true, #false) → #true(#)
rule IfPresent(NONE   , #true, #false) → #false()

// --- Bool

enum Bool | TRUE | FALSE

func If<a>(Bool, ()->a, ()->a) -> a
rule If(TRUE,  #1, #2) → #1()
rule If(FALSE, #1, #2) → #2()

func And(Bool, Bool) -> Bool
rule And(TRUE, #)  → #
rule And(FALSE, #) → FALSE

func Or(Bool, Bool) -> Bool
rule Or(TRUE, #)  → TRUE
rule Or(FALSE, #) → #

func Not(Bool) -> Bool
rule Not(TRUE)  → FALSE
rule Not(FALSE) → TRUE


/* String comparison of the two given values */
@Extern func Equal<a>(a, a) -> Bool

func NotEqual<a>(#1: a, #2: a) -> Bool
→ Not(Equal(#1, #2))

@Extern func DeepEqual<a>(a, a) -> Bool

// --- Bit manipulation

@Extern func BitAnd(Numeric, Numeric) -> Numeric
@Extern func BitOr(Numeric, Numeric) -> Numeric
@Extern func BitMinus(Numeric, Numeric) -> Numeric
@Extern func BitSubSetEq(Numeric, Numeric) -> Bool

// --- Syntactic Variable

@Extern func FreeVariables<a b>(a) -> List<b>
@Extern func IntersectVariables<a>(List<a>, List<a>) -> List<a>
@Extern func ExceptVariables<a>(List<a>, List<a>) -> List<a>
@Extern func SameVariable<a b>(a, b) -> Bool
@Extern func VariableNameIs<a b>(a, String, b) -> b

// --- Location

@Extern func Location<a b>(a) -> b

// --- Debugging

@Extern func Debug<a>(#msg : String, #result: ()->a) -> a

@Extern func Show<a>(a) -> String

// -- Error

@Extern func Error<a>(String) -> a
@Extern func EventualError<a>(String) -> a
@Extern func ForgivableError<a>(String, String, String, String, String, String, ()->a) -> a
