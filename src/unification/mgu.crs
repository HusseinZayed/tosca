/*
 * Copyright (c) 2015 IBM Corporation.
 *  
 * @author : m schett
 * @date   : 08/04/2015
 */

Mgu [(

$Use["std/core.crs"];
$Use["std/list.crs"];
$Use["std/pair.crs"];
$Use["unification/extension.crs"];


/*  */
Mgu ::=  ( Mgu[$List[Pair[$String,Crsx_term_sort]]]; FAIL; );

/* Circ
   @param  `θ` mgu 
   @param  `t1`
   @param  `t2`
   @return `FAIL` iff `θ`= `FAIL`, inserts `Pair[t1,t2]` in the mgu `θ` otherwise
*/
Circ[STATE, $String /* Crsx_METAVAR_sort */,Crsx_term_sort] :: STATE ;
Circ[#state, #X, #t ] → UpdateMgu[#state, x.CircHelper[x,#X,#t]];

CircHelper[Mgu , $String, Crsx_term_sort] :: Mgu;
CircHelper[FAIL, #X, #t] → FAIL;
CircHelper[Mgu[#theta], #X, #t] → Mgu[ApplyOnRHSandInsert[ PairCons[#X,#t], #theta]]; 

ApplyOnRHSandInsert[Pair[$String /* Crsx_METAVAR_sort */,Crsx_term_sort], $List[Pair[$String /* Crsx_METAVAR_sort */,Crsx_term_sort]]] :: $List[Pair[$String /* Crsx_METAVAR_sort */,Crsx_term_sort]]; 
ApplyOnRHSandInsert[ #newThing, #theta] → Insert[#newThing, ApplyOnRHS[#newThing, #theta]];

ApplyOnRHS[Pair[$String /* Crsx_METAVAR_sort */,Crsx_term_sort], $List[Pair[$String /* Crsx_METAVAR_sort */,Crsx_term_sort]]] :: $List[Pair[$String /* Crsx_METAVAR_sort */,Crsx_term_sort]];
ApplyOnRHS[ #newThing, #theta ] → Map[ x . ApplyOnRHSHelper[x,Mgu[(#newThing;)]], #theta]; 

ApplyOnRHSHelper[Pair[$String /* Crsx_METAVAR_sort */,Crsx_term_sort], Mgu] :: Pair[$String /* Crsx_METAVAR_sort */,Crsx_term_sort];
ApplyOnRHSHelper[ PairCons[#x,#t], #subst ] →  PairCons[ #x, ApplySubst[#subst,#t]];


/* Assoc
   @param  `#X` a meta variable 
   @param  `θ`  a mgu
   @return SOME[`t`], i.e., the term `t` the meta variable `#X` has been mapped to, or 
           NONE, if no value was found.
   @throws error, if `#X` is mapped to two terms        
*/
Assoc[$String,Mgu] :: Option[Crsx_term_sort];
Assoc[#METAVAR, Mgu[#MGU] ] → AssocHelper[LookUp[#METAVAR,#MGU]];

AssocHelper[$List[Crsx_term_sort]] :: Option[Crsx_term_sort];
AssocHelper[()]    → NONE;
AssocHelper[(#t;)] → SOME[#t]; 
-[Fallback] : // LookUp returned a list, thus there was more than one value for the meta variable
AssocHelper[#XS] → $[Error,"Mgu.A meta variable has been mapped to two values!"];


/* ApplySubst
   @param  `θ` mgu 
   @param  `t` 
   @return if `θ` is `FAIL` or empty, i.e., `()` it returns `t` unchanged
           otherwise it applies the substitution `θ` to `t`
*/
ApplySubst[Mgu,Crsx_term_sort] :: Crsx_term_sort;
ApplySubst[FAIL,    #t] → #t; // no mgu which can be applied on #t
ApplySubst[Mgu[()], #t] → #t; // the mgu is empty

// case: constructor, apply recursively to arguments
ApplySubst[#theta, %term⟦ ##annotations? ##properties? ##constructor ##arguments? ⟧ ] 
→ 
%term⟦ ##annotations? ##properties? ##constructor 
       ⟨arguments?: WrapArguments[Map[x.ApplySubst[#theta,x], UnwrapArguments[#arguments?]]] ⟩ 
     ⟧ ;

// case: bound term, 
ApplySubst[#theta, %term⟦ ##binder ##nextBinder ⟧ ] 
→ 
%term⟦ ##binder ⟨nextBinder: WrapNextBinder[ApplySubst[#theta,UnwrapNextBinder[#nextBinder]]] ⟩ ⟧;

// case: meta variable, look up 
ApplySubst[#theta, %term⟦ ##annotations? ##properties? ##METAVAR ##freeArguments? ⟧ ] 
→ 
MatchMetavar[Assoc[#METAVAR,#theta], %term⟦ ##annotations? ##properties? ##METAVAR ##freeArguments? ⟧];

MatchMetavar[Option[Crsx_term_sort], Crsx_term_sort ] :: Crsx_term_sort;
MatchMetavar[NONE,         #t] → #t;
MatchMetavar[SOME[#subst], %term⟦ ##annotations? ##properties? ##METAVAR ##freeArguments? ⟧] 
→ 
//TODO define what should happen with annotations? properties?
//ignored at the moment!
Beta[#subst, UnwrapMetaVariableArguments[#freeArguments?]]; 

// case: variable
ApplySubst[ #theta, %term⟦ ##annotations? ##variable ⟧ ] → %term⟦ ##annotations? ##variable ⟧ ;

/* Beta
   @param `t`  a term
   @param `xs` a list of variables
   @return for `t` = `y1 ... yn . t'`, and xs = `x1, ... xm` it returns `t''`
           where yi is replaced by xi.
   @error  if m > n
*/
Beta[Crsx_term_sort, $List[Crsx_variable_sort]] :: Crsx_term_sort;
Beta[ #t, ()] → #t;
Beta[ %term⟦ ##annotations? ##variable ##nextBinder ⟧, (#x;#xs) ] 
→ 
BetaHelper[ #nextBinder, #xs, (PairCons[#variable, #x];) ]; 
/* error, there are too many variables to substitute for too few binders */
Beta[ %term⟦ ##freeTerm ⟧ , (#x;#xs)] 
→ Error[ConcatString[
        ConcatString["Beta: Too many arguments", Show[(#x;#xs)]], 
        ConcatString["to apply to", Show[#freeTerm]]]];

BetaHelper[Crsx_nextBinder_sort, $List[Crsx_variable_sort], $List[Pair[Crsx_variable_sort,Crsx_variable_sort]]] :: Crsx_term_sort ;
/* all binders are collected */
BetaHelper[ #t , (), #subst]  
→ 
ApplyVarSubst[#subst, UnwrapNextBinder[#t]]; 
/* more binders to collect */
BetaHelper[ %nextBinder⟦ ##annotations? ##variable ##nextBinder ⟧, (#x;#xs), #subst  ]
→
BetaHelper[#nextBinder, #xs, Insert[PairCons[#variable,#x],#subst]];
/* error, as above, there are too many variables to substitute for too few binders */
BetaHelper[ %nextBinder⟦ . ##freeTerm ⟧, (#x;#xs), #subst  ] 
→ Error[ConcatString[
        ConcatString["BetaHelper: Too many arguments", Show[(#x;#xs)]], 
        ConcatString["to apply to", Show[#freeTerm]]]];



ApplyVarSubst[$List[Pair[Crsx_variable_sort, Crsx_variable_sort]], Crsx_term_sort] :: Crsx_term_sort;

ApplyVarSubst[#subst, %term⟦ ##annotations? ##properties? ##constructor ##arguments? ⟧ ]  
→ 
%term⟦ ##annotations? ##properties? ##constructor ⟨arguments?: WrapArguments[Map[t.ApplyVarSubst[#subst,t], UnwrapArguments[#arguments?]]] ⟩ ⟧ ;

ApplyVarSubst[#subst, %term⟦ ##annotations? ##properties? ##METAVAR ##freeArguments? ⟧ ]
→ 
%term⟦ ##annotations? ##properties? ##METAVAR ⟨freeArguments?: WrapFreeArguments2[Map[t.ApplyVarSubst[#subst,t], UnwrapFreeArguments[#freeArguments?]]] ⟩ ⟧ ;

ApplyVarSubst[#subst, %term⟦ ##annotations? ##variable ##nextBinder ⟧ ] → 
%term⟦ ##annotations? ⟨variable: ApplyVarSubstHelper[#variable,LookUp[#variable,#subst]]⟩ ⟨nextBinder: WrapNextBinder[ApplyVarSubst[#subst,UnwrapNextBinder[#nextBinder]]] ⟩ ⟧;

ApplyVarSubst[ #subst, %term⟦ ##annotations? ##variable ⟧ ] → 
%term⟦ ##annotations? ⟨variable: ApplyVarSubstHelper[#variable,LookUp[#variable,#subst]] ⟩ ⟧ ;


ApplyVarSubstHelper[Crsx_variable_sort, $List[Crsx_variable_sort]] :: Crsx_variable_sort;
ApplyVarSubstHelper[ #x, () ]   → #x ;
ApplyVarSubstHelper[ #x, (#y;)] → #y ;
ApplyVarSubstHelper[ #x, (#y;#ys)] → Error["Too many vars"];

)]
