/*
 * @author : m schett
 */

import Std::Core 
import Std::List
import Std::String
import Std::Pair
import Std::Num


/* $Use("unification/mgu.crs"); */
import Unification::Mgu

/* STATE of the program */
enum STATE | State ( Mgu,     /* computed mgu */
                     Numeric  /* global counter for meta var */
                    )

/* INIT_STATE
   @return constant for initial state
*/
func INIT_STATE -> STATE
rule INIT_STATE → State(Mgu(()),0)

/* GetMgu
   @param  a `state`
   @return the mgu of `state`
*/
func GetMgu(STATE) -> Mgu
rule GetMgu(State(#mgu, #counter)) → #mgu

/* UpdateMgu
   @param  a `state`
   @param  a function `[mgu] -> #F(mgu)` to update a mgu
   @return a new state, where `#F` has been applied to its mgu
*/
func UpdateMgu(STATE,  [Mgu] -> Mgu ) -> STATE
rule UpdateMgu(State(#theta, #counter) , [mgu] -> #F(mgu)) → State( #F(#theta), #counter)

/* FRESH_METAVAR
   @param  a `state`
   @return a pair, where the `Fst` component is an updated `state`, i.e.,
           the `counter` is increased, and the `Snd` component is
           a meta variable of the shape, `#n`, where n ≥ 0
   @note   careful, the meta variable is only fresh, if there is no
           meta variable of the shape `#m`, m ≥ 0
*/
func FRESH_METAVAR(eager STATE) -> Pair<STATE String> //eager to force computation of number plus...
rule FRESH_METAVAR( #state )
→ PairCons( UpdateCounter(#state, [counter] ->  NumberPlus(counter, 1)),
            ConcatString("#", Show(GetCounter(#state)))
          )

/* GetCounter
   @param  a `state`
   @return the counter of the state
*/
func GetCounter(STATE) -> Numeric
rule GetCounter(State(#mgu, #counter)) → #counter

/* UpdateCounter
   @param  a `state`
   @param  a function `counter.#F(counter)` to update the counter
   @return a new state, where `#F` has been applied to its counter
*/
func UpdateCounter(STATE, [Numeric] -> Numeric) -> STATE
rule UpdateCounter(State(#mgu, #counter), [counter] -> #F(counter)) → State(#mgu, #F(#counter))
