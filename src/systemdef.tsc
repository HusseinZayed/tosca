// Copyright (c) 2016 IBM Corporation.
/*
   Represent a complete Tosca system.

   A system is composed of modules.
   Each module is composed of a set of data, functions and rules

   Conventions (in order):
   - functions are suffixed by either S, M, or C, based on whether they operate on System, Module or Content, respectively.
   - functions operating on indexed data structure are suffixed by I
   - functions raising an error are suffixed by E
 */

import std::core
import std::string
import std::mapdef
import std::listdef
import std::pairdef
import std::language
import core::Core
import core::utils

// --- System representation.

/* A Tosca system as a set of modules */
enum TSystem | TSystem(String /* Initial url */, {String /* url */ : Module}, {String:String} /* configuration */)

/* Initialize system with main module */
func InitSystem(#url: String, #config: {String:String}) -> TSystem
→ TSystem(#url, MapNew<String Module>, #config)

/* A Tosca module  */
enum Module | Module(String /* filename */, Content /* of module */, Bool /* Compiled? */)

// --- module representation

/* Module content. Sorts and rules are indexed for fast lookup. */
enum Content
    | Content(
           List<Core_cqidentifier_sort>,                        /* Imports */
           {String /* Constructor */ : List<Core_cdecl_sort>},  /* Rules */
           {String /* Constructor */ : Core_cdecl_sort},        /* Data sorts */
           {String /* Constructor */ : Core_cdecl_sort})        /* Function sorts */


 /* Compilation result */
 enum Result | Success(List<String> /* All produced files (new and previously generated.) */) | FAILURE

// --- System lookup functions.

/* @return main system url */
func GetSystemURL(TSystem) -> String
rule GetSystemURL(TSystem(#url, #modules, #config)) → #url

/* @return all indexed modules from the given system */
func GetModules(TSystem) -> {String:Module}
rule GetModules(TSystem(#url, #modules, #config)) → #modules

/* Gets module for given url.
  @return A module or `NONE`
 */
func LookupModule(#system: TSystem, #url: String /* url */) -> Option<Module>
→ MapGet<String Module>(GetModules(#system), #url)

/* Whether the module located at `#url` is already in the system.
  @return `TRUE` if in the system, `FALSE` otherwise
 */
func HasModule(#system: TSystem, #url: String /* url */) -> Bool
→ HasOption<Module>(LookupModule(#system, #url))

/* @return `TRUE` if `#sort` is a data sort in the given system */
func IsDataSortS(#system: TSystem, #sort: Core_csort_sort) -> Bool
→ HasOption<Module>(PickFirst<Module>(MapValues<String Module>(GetModules(#system)), (mod) -> IsDataSortM(mod, #sort)))

/* @return `TRUE` if `#constructor` is a data symbol in the given `#system` */
func IsDataS(#system: TSystem, #constructor: String) -> Bool
→ Not(HasOption<Core_cdecl_sort>(FindFuncSortS(#system, #constructor)))

/* Search for the function sort for the given `#constructor` in the given `#system`
   @return A function declaration or `NONE` */
func FindFuncSortS(#system: TSystem, #constructor: String) -> Option<Core_cdecl_sort>
→ PickFirstO<Core_cdecl_sort>(Map<Module Option<Core_cdecl_sort>>((mod) -> FindFuncSortM(mod, #constructor), MapValues<String Module>(GetModules(#system))))

/* Search for the form of the given `#formname` and of sort `#datasort` in the given `#sytem`
   @return a datasort-form pair or `NONE` if no such form exist in the system
 */
func FindFormS(#system: TSystem, #datasort: Core_csort_sort, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
→ PickFirstO<PPair<Core_cdecl_sort Core_cform_sort>>(Map<Module Option<PPair<Core_cdecl_sort Core_cform_sort>>>((mod) -> FindFormM(mod, #datasort, #formname), MapValues<String Module>(GetModules(#system))))

// --- System mutation functions. Convention: function name is suffixed by S

/* Put the given `#module` for given `#url` into the given `#system`. */
func PutModule(TSystem, String, Module) -> TSystem
rule PutModule(TSystem(#mainurl, #modules, #config), #url, #module)
→ TSystem(#mainurl, MapPut<String Module>(#modules, #url, #module), #config)

// --- Module querying functions. Convention: function name is suffixed by M

/* Gets module URL */
func GetModuleURL(Module) -> String
rule GetModuleURL(Module(#url, #content, #compiled)) → #url

/* Gets module content */
func GetModuleContent(Module) -> Content
rule GetModuleContent(Module(#url, #content, #compiled)) → #content

/* @return whether the given `#module` is compiled */
func IsModuleCompiled(Module) -> Bool
rule IsModuleCompiled(Module(#url, #content, #compiled)) → #compiled

func GetImportsM(#module: Module) -> List<Core_cqidentifier_sort>
→ GetImports(GetModuleContent(#module))

func GetRulesM(#module: Module) -> {String: List<Core_cdecl_sort>}
→ GetRules(GetModuleContent(#module))

/* @return indexed data sorts */
func GetDataSortsM(#module: Module) -> {String: Core_cdecl_sort}
→ GetDataSortsC(GetModuleContent(#module))

func GetFuncSortsM(#module: Module) -> {String: Core_cdecl_sort}
→ GetFuncSorts(GetModuleContent(#module))

/* Search for the function sort for the given `#constructor` in the given `#module`
   @return A function declaration or `NONE` */
func FindFuncSortM(#module: Module, #constructor: String) -> Option<Core_cdecl_sort>
→ GetFuncSort(GetModuleContent(#module), #constructor)

/* @return `TRUE` if `#sort` is a data sort in the given `#module` */
func IsDataSortM(#module: Module, #sort: Core_csort_sort) -> Bool
→ IsDataSortC(GetModuleContent(#module), #sort)

/* Search for the form of the given `#formname` and of sort `#datasort` in the given `#module`
   @return a sort-form pair or `NONE` if no such form exist in the given module
 */
func FindFormM(#module: Module, #datasort: Core_csort_sort, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
→ FindFormC(GetModuleContent(#module), #datasort, #formname)

/* @return `TRUE` when the given `#module` declares at least one external function */
func HasExternFuncM(#module: Module) -> Bool
→ HasOption(PickFirst(MapValues(GetFuncSortsM(#module)), (decl)->HasAnnotation("Extern", GetAnnos(decl))))

// --- Module mutation functions.

/* Set module content */
func SetModuleContent(Module, Content) -> Module
rule SetModuleContent(Module(#url, #oldcontent, #compiled), #content) → Module(#url, #content, #compiled)

// --- Content lookup functions. Convention: function name is suffixed by C

func GetImports(Content) -> List<Core_cqidentifier_sort>
rule GetImports(Content(#imports, #rules, #datasorts, #funcsorts)) → #imports

func GetRules(Content) -> {String: List<Core_cdecl_sort>}
rule GetRules(Content(#imports, #rules, #datasorts, #funcsorts)) → #rules

/* @return The list of rules for the given `#key` in the given `#system` */
func GetRulesForKeyC(Content, String) -> Option<List<Core_cdecl_sort>>
rule GetRulesForKeyC(Content(#imports, #rules, #datasorts, #funcsorts), #key)
→ MapGet<String List>(#rules, #key)

/* @return all indexed data sorts */
func GetDataSortsC(Content) -> {String: Core_cdecl_sort}
rule GetDataSortsC(Content(#imports, #rules, #datasorts, #funcsorts)) → #datasorts

/* @return `TRUE` if `#sort` is a data sort in the given loaded `#content` */
func IsDataSortC(#content: Content, #sort: Core_csort_sort) -> Bool
→ HasOption<Core_cdecl_sort>(LookupDataSortDecl(GetDataSortsC(#content), #sort))

/* */
func MaybeFindFormC(#content: Content, #datasort: Option<Core_csort_sort>, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
→ MaybeO<Core_csort_sort Pair>((csort)->FindFormC(#content, csort, #formname), #datasort)

/* Search for form of the given `#formname` and of sort `#datasort` in the given module `#content`
   @return a sort-form pair or `NONE` if no such form exist in the given content
 */
func FindFormC(#content: Content, #datasort: Core_csort_sort, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
→ FindFormI(GetDataSortsC(#content), #datasort, #formname)

func GetFuncSorts(Content) -> {String: Core_cdecl_sort}
rule GetFuncSorts(Content(#imports, #rules, #datasorts, #funcsorts)) → #funcsorts

/* @return the function sort for the given `#constructor` in the given module `#content`, or `NONE` */
func GetFuncSort(#content: Content, #constructor: String) -> Option<Core_cdecl_sort>
→ MapGet<String Core_cdecl_sort>(GetFuncSorts(#content), #constructor)

func GetFuncSortCE(#content: Content, #key: String) -> Core_cdecl_sort
→ IfPresent<Core_cdecl_sort Core_cdecl_sort>(MapGet<String Core_cdecl_sort>(GetFuncSorts(#content), #key),
    (decl) -> decl,
    ()->Error<Core_cdecl_sort>(ConcatString("Error: missing function declaration ", #key)))

// --- Content mutation functions. Convention: function name is suffixed by C

/* Add `#rules` of given `#constructor` to module `#content`. Always succeed, replacing existing entry if any.
   @return the updated content */
func PutRulesC(Content, String, List<Core_cdecl_sort>) -> Content
rule PutRulesC(Content(#imports, #rules, #datasorts, #funcsorts), #constructor, #rulesForCons)
→ Content(#imports, MapPut<String List<Core_cdecl_sort>>(#rules, #constructor, #rulesForCons), #datasorts, #funcsorts)

/* Put the given constructor and rules list pair to the given loaded content.
   If the loaded content already contains the entry for the given constructor, it is replaced.
*/
func PutRulesL(Content, String, List<Core_cdecl_sort>) -> Content
rule PutRulesL(Content(#imports, #rules, #datasorts, #funcsorts), #constructor, #rulesForCons)
→ Content(#imports, MapPut<String List>(#rules, #constructor, #rulesForCons), #datasorts, #funcsorts)

/* Add rule to module content. Always succeed. */
func PutRule({String : List<Core_cdecl_sort>}, Core_cdecl_sort) -> {String : List<Core_cdecl_sort>}
rule PutRule(#rules, cdecl⟦ rule ##CONSTRUCTOR ##cterms? → ##cterm ⟧)
→ PutRule1(MapGet<String List>(#rules, #CONSTRUCTOR), #rules, #CONSTRUCTOR, cdecl⟦ rule ##CONSTRUCTOR ##cterms? → ##cterm ⟧)

func PutRule1(Option<List<Core_cdecl_sort>>, {String : List<Core_cdecl_sort>}, String, Core_cdecl_sort) -> { String : List<Core_cdecl_sort> }
rule PutRule1(NONE, #rules, #constructor, #rule)
→ MapPut<String List>(#rules, #constructor, (#rule,))

rule PutRule1(SOME(#rulesForCons:List<Core_cdecl_sort>), #rules, #constructor, #rule)
→ MapPut<String List>(#rules, #constructor, Append<Core_cdecl_sort>(#rule, #rulesForCons))  // Keep rules in order.

/*  Add data sort to module content. Fail if data sort already exists. */
func PutDataSort({ String : Core_cdecl_sort }, Core_cdecl_sort) -> {String : Core_cdecl_sort}
rule PutDataSort(#data, cdecl⟦ data ##csortvars? ##CONSTRUCTOR ##cforms ⟧)
→ PutDataSort1(MapGet<String Core_cdecl_sort>(#data, #CONSTRUCTOR), #data, #CONSTRUCTOR,  cdecl⟦ data ##csortvars? ##CONSTRUCTOR ##cforms ⟧)

func PutDataSort1(Option<Core_cdecl_sort>, { String /* Constructor */ : Core_cdecl_sort }, String, Core_cdecl_sort) -> { String : Core_cdecl_sort}
rule PutDataSort1(NONE, #data, #constructor, #decl)
→ MapPut<String Core_cdecl_sort>(#data, #constructor, #decl)

rule PutDataSort1(SOME(#datasort:Core_cdecl_sort), #data, #constructor, #rule)
→ Error<{String : Core_cdecl_sort}>(ConcatString("Data sort already declared:", #constructor))

/* Add/Update function sort to module content. */
// FIXME: lazy call to MapGet...

func PutFuncSortL(Content, Core_cdecl_sort, Bool) -> Content
rule PutFuncSortL(Content(#imports, #rules, #datasorts, #funcsorts), #funcsort, #overwrite)
→ Content(#imports, #rules, #datasorts, PutFuncSort(#funcsorts, #funcsort, #overwrite))

func PutFuncSort({String : Core_cdecl_sort}, Core_cdecl_sort, Bool) -> {String : Core_cdecl_sort}
  rule PutFuncSort(#func, cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧, #overwrite)
  → PutFuncSort1(MapGet<String Core_cdecl_sort>(#func, #CONSTRUCTOR), #func, #CONSTRUCTOR,  cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧, #overwrite)

func PutFuncSort1(Option<Core_cdecl_sort>, { String : Core_cdecl_sort }, String, Core_cdecl_sort, Bool) -> { String : Core_cdecl_sort}
  rule PutFuncSort1(#olddecl, #func, #constructor, #decl, TRUE)
  → MapPut<String Core_cdecl_sort>(#func, #constructor, #decl)

  rule PutFuncSort1(NONE, #func, #constructor, #decl, FALSE)
  → MapPut<String Core_cdecl_sort>(#func, #constructor, #decl)

  rule PutFuncSort1(SOME(#datasort:Core_cdecl_sort), #func, #constructor, #rule, FALSE)
  → Error<{String : Core_cdecl_sort}>(ConcatString("Function sort already declared:", #constructor))

// --- Declaration querying functions. Convention: function name is suffixed by D

/* @return data sort declaration from sort reference, or `NONE` */
func LookupDataSortDecl({String:Core_cdecl_sort}, Core_csort_sort) -> Option<Core_cdecl_sort>
rule LookupDataSortDecl(#data, csort⟦ ##CONSTRUCTOR ##csorts? ⟧) → MapGet<String Core_cdecl_sort>(#data, #CONSTRUCTOR)
rule LookupDataSortDecl(#data, csort⟦ data ##csort            ⟧) → LookupDataSortDecl(#data, #csort)
rule LookupDataSortDecl(#data, #csort                         ) → NONE

func MaybeFindFormI(#datasorts: {String: Core_cdecl_sort}, #datasort: Option<Core_csort_sort>, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
→ MaybeO<Core_csort_sort Pair>((csort)->FindFormI(#datasorts, csort, #formname), #datasort)

/* Search for `#formname` in the indexed list of `#datasorts`. Limit the search to the given `#datasort` when known */
func FindFormI(#datasorts: {String: Core_cdecl_sort}, #datasort: Core_csort_sort, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>

  rule FindFormI(#datasorts, csort⟦ ##CONSTRUCTOR ##csorts? ⟧, #formname)
  → MaybeO<Core_cdecl_sort Pair>((cdecl)->FindFormD(cdecl, #formname), MapGet<String Core_cdecl_sort>(#datasorts, #CONSTRUCTOR))

  // Fallback to search accross all data sort declaration
  rule FindFormI(#datasorts, #csort, #formname)
  → MaybeO<Core_cdecl_sort PPair<Core_cdecl_sort Core_cform_sort>>((cdecl)->FindFormD(cdecl, #formname), PickFirst<Core_cdecl_sort>(MapValues<String Core_cdecl_sort>(#datasorts), (cdecl)->HasOption<PPair<Core_cdecl_sort Core_cform_sort>>(FindFormD(cdecl, #formname))))

/* Find form of the given name in the data sort */
func FindFormD(Core_cdecl_sort, String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
  rule FindFormD(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧, #formname)
  → MaybeO<Core_cform_sort PPair<Core_cdecl_sort Core_cform_sort>>((cform)->SOME(PairCons(cdecl⟦ data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧, cform)), PickFirst<Core_cform_sort>(#cform*, (x) -> MatchConsForm(x, #formname)))

  rule FindFormD(#cdecl,                                               #formname) → NONE

func MatchConsForm(Core_cform_sort, String) -> Bool
rule MatchConsForm(cform⟦ ##CONSTRUCTOR ##csorts? ⟧, #formname) → StringEqual(#CONSTRUCTOR, #formname)
rule MatchConsForm(#, #formname)                                → FALSE

// --- Configuration

/* @return Configuration value for given `#key` */
func GetConfig(TSystem, String) -> Option<String>
rule GetConfig(TSystem(#url, #modules, #config), #key) → MapGet<String String>(#config, #key)

/* @return Configuration value for given `#key`, or #default if not present. */
func GetConfigDef(#system: TSystem, #key: String, #default: String) -> String
→ IfConfigDef<String>(#system, #key, (str)->str, ()->#default)

/* Evaluate `#true` if the configuration contains the given `#key`, `#false` otherwise */
func IfConfigDef<a>(#system: TSystem, #key: String, #true: (String)->a, #false: ()->a) -> a
→ IfPresent<String a>(GetConfig(#system, #key), (str)->#true(str), ()->#false())

// --- Load core program into system

/*
   Loads core program
   @param `Core_ccrsx_sort` core program
   @return loaded core program into internal representation
 */
func LoadCore(Core_ccrsx_sort) -> Content
rule LoadCore(ccrsx⟦ ##cdecl+ ⟧) → LoadDecls(#cdecl+, (), MapNew, MapNew, MapNew)

func LoadDecls(List<Core_cdecl_sort>, List<Core_cqidentifier_sort>, {String : List<Core_cdecl_sort>},
               {String : Core_cdecl_sort }, { String : Core_cdecl_sort}) -> Content

rule LoadDecls(cdecl+⟦⟧, #imports, #rules, #data, #func)
→ Content(#imports, #rules, #data, #func)

rule LoadDecls(cdecl+⟦ import module ##cqidentifier ##cdecl+ ⟧, #imports, #rules, #data, #func)
→ LoadDecls(#cdecl+, Cons(#cqidentifier, #imports), #rules, #data, #func)

rule LoadDecls(cdecl+⟦ data ##csortvars? ##CONSTRUCTOR ##cforms ##cdecl+ ⟧, #imports, #rules, #data, #func)
→ LoadDecls(#cdecl+, #imports, #rules, PutDataSort(#data, cdecl⟦ data ##csortvars? ##CONSTRUCTOR ##cforms ⟧), #func)

rule LoadDecls(cdecl+⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ##cdecl+ ⟧, #imports, #rules, #data, #func)
→ LoadDecls(#cdecl+, #imports, #rules, #data, PutFuncSort(#func, cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧, FALSE))

rule LoadDecls(cdecl+⟦ rule ##cterm → ##cterm2 ##cdecl+  ⟧, #imports, #rules, #data, #func)
→ LoadDecls(#cdecl+, #imports, PutRule(#rules, cdecl⟦ rule  ##cterm → ##cterm2 ⟧), #data, #func)
