// Copyright (c) 2016 IBM Corporation.
/*
   Represent a complete Tosca system.

   A system is composed of modules.
   Each module is composed of a set of data, functions and rules

   Conventions (in order):
   - functions are suffixed by either S, M, or C, based on whether they operate on System, Module or Content, respectively.
   - functions operating on indexed data structure are suffixed by I
   - functions raising an error are suffixed by E
 */


import std::core
import std::string
import std::mapdef
import std::listdef
import std::pairdef
import std::language
import std::path
import core::Core
import core::utils

// --- System representation.

/* A Tosca system as a set of modules */
enum TSystem | TSystem(String /* Initial url */, {String /* url */ : Module}, {String:String} /* configuration */)

/* Initialize system with main module */
func InitSystem(#url: String, #config: {String:String}) -> TSystem
→ TSystem(#url, MapNew, #config)

/* A Tosca module  */
enum Module | Module(String /* filename */, Content /* of module */, Bool /* Compiled? */)

// --- module representation

type DeclIndex = {String /* Constructor */ : Core_cdecl_sort}

/* Module content. Sorts and rules are indexed for fast lookup. */
enum Content
    | Content(
           List<Core_cqidentifier_sort>,                        /* Imports */
           {String /* Constructor */ : List<Core_cdecl_sort>},  /* Rules */
           {String /* Constructor */ : Core_cdecl_sort},        /* Data sorts */
           DeclIndex,                                           /* Sort aliases */
           {String /* Constructor */ : Core_cdecl_sort})        /* Function sorts */

/* Compilation result */
enum Result | Success(List<String> /* All produced files (new and previously generated.) */) | FAILURE

// --- System lookup functions.

/* @return main system url */
func GetSystemURL(TSystem) -> String
rule GetSystemURL(TSystem(#url, #modules, #config)) → #url

/* @return all indexed modules from the given system */
func GetModules(TSystem) -> {String:Module}
rule GetModules(TSystem(#url, #modules, #config)) → #modules

/* Gets module for given url.
  @return A module or `NONE`
 */
func LookupModule(#system: TSystem, #url: String /* url */) -> Option<Module>
→ MapGet(GetModules(#system), #url)

/* Removes module of the given url. */
func RemoveModule(#system: TSystem, #url: String /* url */) -> TSystem
rule RemoveModule(TSystem(#mainurl, #modules, #config), #url) → TSystem(#mainurl, MapRemove(#modules, #url), #config)

/* Whether the module located at `#url` is already in the system.
  @return `TRUE` if in the system, `FALSE` otherwise
 */
func HasModule(#system: TSystem, #url: String) -> Bool
→ HasOption(LookupModule(#system, #url))

/* Gets module for given url.
  @return An existing module or a new one.
 */
func LookupOrCreateModule(#system: TSystem, #url: String /* url */) -> Module
→ IfPresent(LookupModule(#system, #url), (mod)->mod, ()->Module(#url, Content((), {}, {}, {}, {}), FALSE))

/* Gets module for given url.
  @return An existing module or a new one.
 */
func ExtractOrCreateModule(#system: TSystem, #url: String /* url */) -> PPair<TSystem Module>
→ IfPresent(LookupModule(#system, #url), (mod)->PairCons(RemoveModule(#system, #url), mod), ()->PairCons(#system, Module(#url, Content((), {}, {}, {}, {}), FALSE)))

/* Get import declarations for the module at given `#url` */
func GetImportsS(#system: TSystem, #url: String) -> List<Core_cqidentifier_sort>
→ IfPresent(LookupModule(#system, #url), (mod)->GetImportsM(mod), ()->())

/* @return `TRUE` if `#sort` is a data sort in the given system */
func IsDataSortS(#system: TSystem, #sort: Core_csort_sort) -> Bool
→ HasOption(PickFirst(MapValues(GetModules(#system)), (mod) -> IsDataSortM(mod, #sort)))

/* @return `TRUE` if `#constructor` is a data symbol in the given `#system` */
func IsDataS(#system: TSystem, #constructor: String) -> Bool
→ Not(HasOption(FindFuncSortS(#system, #constructor)))

/* Search for the function sort for the given `#constructor` in the given `#system`
   @return A function declaration or `NONE` */
func FindFuncSortS(#system: TSystem, #constructor: String) -> Option<Core_cdecl_sort>
→ PickFirstO(Map((mod) -> FindFuncSortM(mod, #constructor), MapValues(GetModules(#system))))

/* Search for the form of the given `#formname` and of sort `#datasort` in the given `#sytem`
   @return a datasort-form pair or `NONE` if no such form exist in the system
 */
func FindFormS(#system: TSystem, #datasort: Core_csort_sort, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
→ PickFirstO(Map((mod) -> FindFormM(mod, #datasort, #formname), MapValues(GetModules(#system))))

/* Search for the alias declaration sort for the given `#constructor` in the given `#system`
   @return An alias declaration or `NONE` */
func FindAliasS(#system: TSystem, #constructor: String) -> Option<Core_cdecl_sort>
→ PickFirstO(Map((mod) -> FindAliasM(mod, #constructor), MapValues(GetModules(#system))))

/* Create a global type alias index for the given system  */
func IndexAliasS(#system: TSystem) -> DeclIndex
→ let #modules = MapValues(GetModules(#system))
  FoldlP((mod index)->IndexAliasM(mod, index), {}, #modules)

// --- System mutation functions. Convention: function name is suffixed by S

/* Put the given `#module` for given `#url` into the given `#system`. */
func PutModule(TSystem, String, Module) -> TSystem
rule PutModule(TSystem(#mainurl, #modules, #config), #url, #module)
→ TSystem(#mainurl, MapPut(#modules, #url, #module), #config)

/* Add the given import `#identifier` to the given module at `#url` in the given ``#system` . */
func AddImportS(#system: TSystem, #url: String, #identifier: Core_cqidentifier_sort) -> TSystem
→ PutModule(#system, #url, AddImportM(LookupOrCreateModule(#system, #url), #identifier))

/*  Add the given data sort `#declaration` to the given module at `#url` in the given ``#system` .
    Fail if the given data sort already exists and `#extends` is set to `FALSE`. */
func PutDataSortS(#system: TSystem, #url: String, #decl: Core_cdecl_sort, #extends: Bool) -> TSystem
→ PutDataSortS2(ExtractOrCreateModule(#system, #url), #url, #decl, #extends)

func PutDataSortS2(PPair<TSystem Module>, String, Core_cdecl_sort, Bool) -> TSystem
rule PutDataSortS2(PairCons(#system, #module), #url, #decl, #extends)
→ PutModule(#system, #url, PutDataSortM(#module, #decl, #extends))

/* Append the given `#rule` to the given module at `#url` in the given ``#system` .
   @return the updated system */
func PutRuleS(#system: TSystem, #url: String, #rule: Core_cdecl_sort) -> TSystem
→ PutRuleS2(ExtractOrCreateModule(#system, #url), #url, #rule)

func PutRuleS2(PPair<TSystem Module>, String, Core_cdecl_sort) -> TSystem
rule PutRuleS2(PairCons(#system, #module), #url, #rule)
→ PutModule(#system, #url, PutRuleM(#module, #rule))

func PutFuncSortS(#system: TSystem, #url: String, #funcsort: Core_cdecl_sort, #overwrite: Bool) -> TSystem
→ PutFuncSortS2(ExtractOrCreateModule(#system, #url), #url, #funcsort, #overwrite)

func PutFuncSortS2(PPair<TSystem Module>, String, Core_cdecl_sort, Bool) -> TSystem
rule PutFuncSortS2(PairCons(#system, #module), #url, #funcsort, #overwrite)
→ PutModule(#system, #url, PutFuncSortM(#module, #funcsort, #overwrite))

func PutAliasS(#system: TSystem, #url: String, #alias: Core_cdecl_sort) -> TSystem
→ PutModule(#system, #url, PutAliasM(LookupOrCreateModule(#system, #url), #alias))

// --- Module querying functions. Convention: function name is suffixed by M

/* Gets module URL */
func GetModuleURL(Module) -> String
rule GetModuleURL(Module(#url, #content, #compiled)) → #url

/* Gets module content */
func GetModuleContent(Module) -> Content
rule GetModuleContent(Module(#url, #content, #compiled)) → #content

/* @return whether the given `#module` is compiled */
func IsModuleCompiled(Module) -> Bool
rule IsModuleCompiled(Module(#url, #content, #compiled)) → #compiled

func GetImportsM(#module: Module) -> List<Core_cqidentifier_sort>
→ GetImports(GetModuleContent(#module))

func GetRulesM(#module: Module) -> {String: List<Core_cdecl_sort>}
→ GetRules(GetModuleContent(#module))

/* @return indexed data sorts */
func GetDataSortsM(#module: Module) -> {String: Core_cdecl_sort}
→ GetDataSortsC(GetModuleContent(#module))

func GetFuncSortsM(#module: Module) -> {String: Core_cdecl_sort}
→ GetFuncSorts(GetModuleContent(#module))

/* Search for the function sort for the given `#constructor` in the given `#module`
   @return A function declaration or `NONE` */
func FindFuncSortM(#module: Module, #constructor: String) -> Option<Core_cdecl_sort>
→ GetFuncSort(GetModuleContent(#module), #constructor)

/* Search for the alias declaration for the given `#constructor` in the given `#module`
   @return An alias or `NONE` */
func FindAliasM(#module: Module, #constructor: String) -> Option<Core_cdecl_sort>
→ GetAliasC(GetModuleContent(#module), #constructor)

/* Create a global type alias index for the given `#module`  */
func IndexAliasM(#module: Module, #index: DeclIndex) -> DeclIndex
→ IndexAliasC(GetModuleContent(#module), #index)

/* @return `TRUE` if `#sort` is a data sort in the given `#module` */
func IsDataSortM(#module: Module, #sort: Core_csort_sort) -> Bool
→ IsDataSortC(GetModuleContent(#module), #sort)

/* Search for the form of the given `#formname` and of sort `#datasort` in the given `#module`
   @return a sort-form pair or `NONE` if no such form exist in the given module
 */
func FindFormM(#module: Module, #datasort: Core_csort_sort, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
→ FindFormC(GetModuleContent(#module), #datasort, #formname)

/* @return `TRUE` when the given `#module` declares at least one external function */
func HasExternFuncM(#module: Module) -> Bool
→ HasOption(PickFirst(MapValues(GetFuncSortsM(#module)), (decl)->HasAnnotation("Extern", GetAnnos(decl))))

// --- Module mutation functions.

/* Set module content */
func SetModuleContent(Module, Content) -> Module
rule SetModuleContent(Module(#url, #oldcontent, #compiled), #content) → Module(#url, #content, #compiled)

/* Add the given import `#identifier` to the given `#module`. */
func AddImportM(#module: Module, #identifier: Core_cqidentifier_sort) -> Module
→ SetModuleContent(#module, AddImportC(GetModuleContent(#module), #identifier))

/*  Add the given data sort `#declaration` to the given `#module`.
    Fail if the given data sort already exists and `#extends` is set to `FALSE`. */
func PutDataSortM(Module, Core_cdecl_sort, Bool) -> Module
rule PutDataSortM(Module(#url, #content, #compiled), #decl, #extends)
→ Module(#url, PutDataSortC(#content, #decl, #extends), #compiled)

/* Append the given `#rule` to the given `#module`.
   @return the updated module */
func PutRuleM(#module: Module, #rule: Core_cdecl_sort) -> Module
rule PutRuleM(Module(#url, #content, #compiled), #rule)
→ Module(#url, PutRuleC(#content, #rule), #compiled)

func PutFuncSortM(#module: Module, #funcsort: Core_cdecl_sort, #overwrite: Bool) -> Module
rule PutFuncSortM(Module(#url, #content, #compiled), #funcsort, #overwrite)
→ Module(#url, PutFuncSortC(#content, #funcsort, #overwrite), #compiled)

func PutAliasM(#module: Module, #alias: Core_cdecl_sort) -> Module
→ SetModuleContent(#module, PutAliasC(GetModuleContent(#module), #alias))

// --- Content lookup functions. Convention: function name is suffixed by C

func GetImports(Content) -> List<Core_cqidentifier_sort>
rule GetImports(Content(#imports, #rules, #datasorts, #aliases, #funcsorts)) → #imports

func GetRules(Content) -> {String: List<Core_cdecl_sort>}
rule GetRules(Content(#imports, #rules, #datasorts, #aliases, #funcsorts)) → #rules

/* @return The list of rules for the given `#key` in the given `#system` */
func GetRulesForKeyC(Content, String) -> Option<List<Core_cdecl_sort>>
rule GetRulesForKeyC(Content(#imports, #rules, #datasorts, #aliases, #funcsorts), #key)
→ MapGet(#rules, #key)

/* @return all indexed data sorts */
func GetDataSortsC(Content) -> {String: Core_cdecl_sort}
rule GetDataSortsC(Content(#imports, #rules, #datasorts, #aliases, #funcsorts)) → #datasorts

/* @return `TRUE` if `#sort` is a data sort in the given loaded `#content` */
func IsDataSortC(#content: Content, #sort: Core_csort_sort) -> Bool
→ HasOption(LookupDataSortDecl(GetDataSortsC(#content), #sort))

/* */
func MaybeFindFormC(#content: Content, #datasort: Option<Core_csort_sort>, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
→ MaybeO((csort)->FindFormC(#content, csort, #formname), #datasort)

/* Search for form of the given `#formname` and of sort `#datasort` in the given module `#content`
   @return a sort-form pair or `NONE` if no such form exist in the given content
 */
func FindFormC(#content: Content, #datasort: Core_csort_sort, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
→ FindFormI(GetDataSortsC(#content), #datasort, #formname)

func GetFuncSorts(Content) -> {String: Core_cdecl_sort}
rule GetFuncSorts(Content(#imports, #rules, #datasorts, #aliases, #funcsorts)) → #funcsorts

/* @return the function sort for the given `#constructor` in the given module `#content`, or `NONE` */
func GetFuncSort(#content: Content, #constructor: String) -> Option<Core_cdecl_sort>
→ MapGet(GetFuncSorts(#content), #constructor)

func GetFuncSortCE(#content: Content, #key: String) -> Core_cdecl_sort
→ IfPresent(MapGet(GetFuncSorts(#content), #key),
    (decl) -> decl,
    ()->Error(ConcatString("Error: missing function declaration ", #key)))

func GetAliasesC(Content) -> {String: Core_cdecl_sort}
rule GetAliasesC(Content(#imports, #rules, #datasorts, #aliases, #funcsorts)) → #aliases

/* @return the alias declaration for the given `#constructor` in the given module `#content`, or `NONE` */
func GetAliasC(#content: Content, #constructor: String) -> Option<Core_cdecl_sort>
→ MapGet(GetAliasesC(#content), #constructor)

/* Create a global type alias index for the given `#content`  */
func IndexAliasC(#content: Content, #index: DeclIndex) -> DeclIndex
→ MapAddAll(#index, GetAliasesC(#content))

// --- Content mutation functions. Convention: function name is suffixed by C

/* Add the given import `#identifier` to the given module `#content`. */
func AddImportC(Content, Core_cqidentifier_sort) -> Content
rule AddImportC(Content(#imports, #rules, #datasorts, #aliases, #funcsorts), #identifier)
→ Content(Append(#identifier, #imports), #rules, #datasorts, #aliases, #funcsorts)

/*  Add the given data sort `#declaration` to the given module `#content`.
    Fail if the given data sort already exists and `#extends` is set to `FALSE`. */
func PutDataSortC(Content, Core_cdecl_sort, Bool) -> Content
rule PutDataSortC(Content(#imports, #rules, #datasorts, #aliases, #funcsorts), #decl, #extends)
→ Content(#imports, #rules, PutDataSort(#datasorts, #decl, #extends), #aliases, #funcsorts)

/* Add `#rules` of given `#constructor` to module `#content`. Always succeed, replacing existing entry if any.
   @return the updated content */
func PutRulesC(Content, String, List<Core_cdecl_sort>) -> Content
rule PutRulesC(Content(#imports, #rules, #datasorts, #aliases, #funcsorts), #constructor, #rulesForCons)
→ Content(#imports, MapPut(#rules, #constructor, #rulesForCons), #datasorts, #aliases, #funcsorts)

/* Append the given `#rule` to module `#content`.
   @return the updated content */
func PutRuleC(Content, Core_cdecl_sort) -> Content
rule PutRuleC(Content(#imports, #rules, #datasorts, #aliases, #funcsorts), #rule)
→ Content(#imports, PutRule(#rules, #rule), #datasorts, #aliases, #funcsorts)

/* Add rule to module content. Always succeed. */
func PutRule({String : List<Core_cdecl_sort>}, Core_cdecl_sort) -> {String : List<Core_cdecl_sort>}
rule PutRule(#rules, cdecl⟦ ##canno* rule ##CONSTRUCTOR ##cterms? → ##cterm ⟧)
→ PutRule1(MapGet(#rules, #CONSTRUCTOR), #rules, #CONSTRUCTOR, cdecl⟦ ##canno* rule ##CONSTRUCTOR ##cterms? → ##cterm ⟧)

func PutRule1(Option<List<Core_cdecl_sort>>, {String : List<Core_cdecl_sort>}, String, Core_cdecl_sort) -> { String : List<Core_cdecl_sort> }
rule PutRule1(NONE, #rules, #constructor, #rule)
→ MapPut(#rules, #constructor, (#rule,))

rule PutRule1(SOME(#rulesForCons), #rules, #constructor, #rule)
→ MapPut(#rules, #constructor, Append(#rule, #rulesForCons))  // Keep rules in order.

/*  Add data sort to module content. Fail if data sort already exists and `#extends` is set to `FALSE` */
func PutDataSort({String:Core_cdecl_sort}, Core_cdecl_sort, Bool) -> {String : Core_cdecl_sort}
rule PutDataSort(#data, cdecl⟦ ##canno* data ##csortvars? ##CONSTRUCTOR ##cforms ⟧, #extends)
→ PutDataSort1(MapGet(#data, #CONSTRUCTOR), #data, #CONSTRUCTOR, cdecl⟦ ##canno* data ##csortvars? ##CONSTRUCTOR ##cforms ⟧, #extends)

func PutDataSort1(Option<Core_cdecl_sort>, {String: Core_cdecl_sort}, String, Core_cdecl_sort, Bool) -> { String : Core_cdecl_sort}

  rule PutDataSort1(NONE, #data, #constructor, #decl, #extends)
  → MapPut(#data, #constructor, #decl)

  // Merge the two given data sorts
  rule PutDataSort1(SOME(cdecl⟦ ##canno* data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧), #data, #constructor, cdecl⟦ ##canno*2 data ##csortvars?2  ##CONSTRUCTOR2 ( ##cform*2 ) ⟧, TRUE)
  → MapPut(#data, #constructor, cdecl⟦ ⟨canno*: Concat(#canno*, #canno*2)⟩ data ##csortvars? ##CONSTRUCTOR ( ⟨cform*: Concat(#cform*, #cform*2)⟩ ) ⟧)

  rule PutDataSort1(SOME(#edecl), #data, #constructor, #decl, FALSE)
  → Error(ConcatString("Data sort already declared:", #constructor))

/* Add/Update function sort to module content. */
// FIXME: lazy call to MapGet...

func PutFuncSortC(Content, Core_cdecl_sort, Bool) -> Content
rule PutFuncSortC(Content(#imports, #rules, #datasorts, #aliases, #funcsorts), #funcsort, #overwrite)
→ Content(#imports, #rules, #datasorts, #aliases, PutFuncSort(#funcsorts, #funcsort, #overwrite))

func PutFuncSort({String : Core_cdecl_sort}, Core_cdecl_sort, Bool) -> {String : Core_cdecl_sort}
rule PutFuncSort(#func, #decl = cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csortsdefault? ⟧, #overwrite)
//→ PutFuncSort1(MapGet(#func, #CONSTRUCTOR), #func, #CONSTRUCTOR,  cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csorts? ⟧, #overwrite)
→ PutFuncSort1(MapGet(#func, #CONSTRUCTOR), #func, #CONSTRUCTOR, #decl, #overwrite)

func PutFuncSort1(Option<Core_cdecl_sort>, { String : Core_cdecl_sort }, String, Core_cdecl_sort, Bool) -> { String : Core_cdecl_sort}

  rule PutFuncSort1(#olddecl, #func, #constructor, #decl, TRUE)
  → MapPut(#func, #constructor, #decl)

  rule PutFuncSort1(NONE, #func, #constructor, #decl, FALSE)
  → MapPut(#func, #constructor, #decl)

  rule PutFuncSort1(SOME(#datasort:Core_cdecl_sort), #func, #constructor, #rule, FALSE)
  → Error(ConcatString("Function sort already declared:", #constructor))


func PutAliasC(Content, Core_cdecl_sort) -> Content
rule PutAliasC(Content(#imports, #rules, #datasorts, #aliases, #funcsorts), #alias)
→ Content(#imports, #rules, #datasorts, PutAliasI(#aliases, #alias), #funcsorts)

/* Add alias to module content. Always succeed. */
func PutAliasI({String : Core_cdecl_sort}, Core_cdecl_sort) -> {String : Core_cdecl_sort}
rule PutAliasI(#aliases, cdecl⟦ ##canno* alias ##csortvars? ##CONSTRUCTOR ##csort ⟧)
→ MapPut(#aliases, #CONSTRUCTOR, cdecl⟦ ##canno* alias ##csortvars? ##CONSTRUCTOR ##csort ⟧)

// --- Declaration querying functions. Convention: function name is suffixed by D

/* @return data sort declaration from sort reference, or `NONE` */
func LookupDataSortDecl({String:Core_cdecl_sort}, Core_csort_sort) -> Option<Core_cdecl_sort>
rule LookupDataSortDecl(#data, csort⟦ ##canno* ##CONSTRUCTOR ##csorts? ⟧) → MapGet(#data, #CONSTRUCTOR)
rule LookupDataSortDecl(#data, csort⟦ ##canno* data ##csort            ⟧) → LookupDataSortDecl(#data, #csort)
rule LookupDataSortDecl(#data, #csort                                  ) → NONE

func MaybeFindFormI(#datasorts: {String: Core_cdecl_sort}, #datasort: Option<Core_csort_sort>, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>
→ MaybeO((csort)->FindFormI(#datasorts, csort, #formname), #datasort)

/* Search for `#formname` in the indexed list of `#datasorts`. Limit the search to the given `#datasort` when known */
func FindFormI(#datasorts: {String: Core_cdecl_sort}, #datasort: Core_csort_sort, #formname: String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>

  rule FindFormI(#datasorts, csort⟦ ##canno* ##CONSTRUCTOR ##csorts? ⟧, #formname)
  → MaybeO((cdecl)->FindFormD(cdecl, #formname), MapGet(#datasorts, #CONSTRUCTOR))

  // Fallback to search accross all data sort declaration
  rule FindFormI(#datasorts, #csort, #formname)
  → MaybeO((cdecl)->FindFormD(cdecl, #formname), PickFirst(MapValues(#datasorts), (cdecl)->HasOption(FindFormD(cdecl, #formname))))

/* Find form of the given name in the data sort */
func FindFormD(Core_cdecl_sort, String) -> Option<PPair<Core_cdecl_sort Core_cform_sort>>

  rule FindFormD(cdecl⟦ ##canno* data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧, #formname)
  → MaybeO((cform)->SOME(PairCons(cdecl⟦ ##canno* data ##csortvars? ##CONSTRUCTOR ( ##cform* ) ⟧, cform)), PickFirst(#cform*, (x) -> MatchConsForm(x, #formname)))

  rule FindFormD(#cdecl, #formname)
  → NONE

func MatchConsForm(Core_cform_sort, String) -> Bool
rule MatchConsForm(cform⟦ ##CONSTRUCTOR ##csortsdefault? ⟧, #formname) → StringEqual(#CONSTRUCTOR, #formname)
rule MatchConsForm(#, #formname)                                       → FALSE

// --- Configuration

/* @return Configuration value for given `#key` */
func GetConfig(TSystem, String) -> Option<String>
rule GetConfig(TSystem(#url, #modules, #config), #key) → MapGet(#config, #key)

/* @return Configuration value for given `#key`, or #default if not present. */
func GetConfigDef(#system: TSystem, #key: String, #default: String) -> String
→ IfConfigDef(#system, #key, (str)->str, ()->#default)

/* Evaluate `#true` if the configuration contains the given `#key`, `#false` otherwise */
func IfConfigDef<a>(#system: TSystem, #key: String, #true: (String)->a, #false: ()->a) -> a
→ IfPresent(GetConfig(#system, #key), (str)->#true(str), ()->#false())

// --- Load core program into system

/*
   Loads core program

   Eliminate qualified data sorts.

   @param `#core` core program
   @return loaded core program into internal representation
 */
func LoadCore(#system: TSystem, #url: String, #core: Core_ccrsx_sort, #compiled: Bool) -> TSystem
→ LoadCoreS(If(HasModule(#system, #url), ()->#system, ()->PutModule(#system, #url, Module(#url, Content((), {}, {}, {}, {}), #compiled))),
              #url, #core)

func LoadCoreS(TSystem, String, Core_ccrsx_sort) -> TSystem
rule LoadCoreS(#system, #url, ccrsx⟦ ##cdecl+ ⟧) → LoadDeclsS(#system, #url, #cdecl+, FALSE)

func LoadDeclsS(TSystem, String, List<Core_cdecl_sort>, Bool) -> TSystem

  rule LoadDeclsS(#system, #url, cdecl+⟦⟧, #extends)
  → #system

  rule LoadDeclsS(#system, #url, cdecl+⟦ import module ##cqidentifier ##cdecl+ ⟧, #extends)
  → LoadDeclsS(AddImportS(#system, #url, #cqidentifier), #url, #cdecl+, #extends)

  // Local data sort declaration
  rule LoadDeclsS(#system, #url, cdecl+⟦ ##canno* data ##csortvars? ##CONSTRUCTOR ##cforms ##cdecl+ ⟧, #extends)
  → LoadDeclsS(PutDataSortS(#system, #url, cdecl⟦ ##canno* data ##csortvars? ##CONSTRUCTOR ##cforms ⟧, #extends), #url, #cdecl+, #extends)

  // Extend existing data sort declaration
  rule LoadDeclsS(#system, #url, cdecl+⟦ ##canno* data ##csortvars? ##cidentifierqualifier* ##CONSTRUCTOR ##cforms ##cdecl+ ⟧, #extends)
  → LoadDeclsS(
       LoadDeclsS(#system, ResolveImportAux(#system, #url, IdentifierQList(#cidentifierqualifier*, FALSE)), cdecl+⟦ ##canno* data ##csortvars? ##CONSTRUCTOR ##cforms ⟧, TRUE),
       #url, #cdecl+, #extends)

  // Sort alias declaration
  rule LoadDeclsS(#system, #url, cdecl+⟦ ##canno* alias ##csortvars? ##CONSTRUCTOR ##csort ##cdecl+ ⟧, #extends)
  → LoadDeclsS(PutAliasS(#system, #url, cdecl⟦ ##canno* alias ##csortvars? ##CONSTRUCTOR ##csort ⟧), #url, #cdecl+, #extends)

  rule LoadDeclsS(#system, #url, cdecl+⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csortsdefault? ##cdecl+ ⟧, #extends)
  → LoadDeclsS(PutFuncSortS(#system, #url, cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csortsdefault? ⟧, FALSE), #url, #cdecl+, #extends)

  rule LoadDeclsS(#system, #url,  cdecl+⟦ ##canno* rule ##cterm → ##cterm2 ##cdecl+  ⟧, #extends)
  → LoadDeclsS(PutRuleS(#system, #url, cdecl⟦ ##canno* rule  ##cterm → ##cterm2 ⟧), #url, #cdecl+, #extends)

// ---- Import function helpers

/* Convert Tosca module into an url */
func ResolveImport(#system: TSystem, #url:String, #import: Core_cqidentifier_sort) -> String
→ ResolveImportAux(#system, #url, QIdentifierList(#import, FALSE))

func ResolveImportAux(#system: TSystem, #url:String, #name: List<String>) -> String
→ ConcatString(If(IsStandardPrefix(Head(#name)), ()->GetConfigDef(#system, "baseStd", ""), ()->PathJoin(PathParent(Path(GetSystemURL(#system))))),
   ConcatString("/",
   ConcatString(Join(#name, "/"), ".tsc")))

/* @return `TRUE` if the given `#import` is a standard library module */
func IsStandardImport(#system: TSystem, #import: Core_cqidentifier_sort) -> Bool
→ IfConfigDef(#system, "bootstrap", (v)->FALSE, ()->IsStandardPrefix(Head(QIdentifierList(#import, FALSE))))

/* @return `TRUE` if the given `#prefix` denotes a standard library module */
func IsStandardPrefix(#prefix: String) -> Bool
→ Or(StringEqual(#prefix, "std"), StringEqual(#prefix, "Std"))
