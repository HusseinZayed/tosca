// Copyright (c) 2016 IBM Corporation.
import std::core
import std::mapdef
import std::listdef
import std::pairdef
import std::string
import std::language
import std::num
import core::Core
import core::utils
import core::subst
import systemdef

// --- API

/* Substitute type aliases. */
func NoAliasM(#system: TSystem, #module: Module) -> Module
→ //IfConfigDef(#aliases, "java",
    //(v) ->
    Debug(ConcatString("Remove type aliases ", GetModuleURL(#module)),
            ()->SetModuleContent(#module, NoAliasC(IndexAliasS(#system), GetModuleContent(#module)))) //,
    //() -> #module)


func NoAliasC(DeclIndex, Content) -> Content
rule NoAliasC(#aliases, Content(#imports, #rules, #datasorts, #caliases, #funcsorts, #strs))
→ let #rules     = NoAliasRules(#aliases, #rules)
  let #datasorts = NoAliasDataSorts(#aliases, #datasorts)
  let #funcsorts = NoAliasFuncSorts(#aliases, #funcsorts)
    Content(#imports, #rules, #datasorts, {}, #funcsorts, #strs)

// --- Rules

func NoAliasRules(#aliases: DeclIndex, #rules: {String : List<Core_cdecl_sort>}) -> {String : List<Core_cdecl_sort>}
→ FoldlP((key rules)->NoAliasRulesForKey(#aliases, key, rules, #rules), {}, MapKeys(#rules))

func NoAliasRulesForKey(#aliases: DeclIndex, #key: String, #rules: {String : List<Core_cdecl_sort>}, #orules: {String : List<Core_cdecl_sort>}) -> {String : List<Core_cdecl_sort>}
→ MapPut(#rules, #key, Map((rule)->NoAliasRule(#aliases, rule), UnSOME(MapGet(#orules, #key))))

func NoAliasRule(DeclIndex, Core_cdecl_sort) -> Core_cdecl_sort
rule NoAliasRule(#aliases, cdecl⟦ ##canno* rule ##cterm1 → ##cterm2 ⟧) → cdecl⟦ ##canno* rule ⟨cterm: NoAliasTerm(#aliases, #cterm1)⟩ → ⟨cterm: NoAliasTerm(#aliases, #cterm2)⟩ ⟧

func NoAliasTerm(DeclIndex, Core_cterm_sort) -> Core_cterm_sort

  rule NoAliasTerm(#aliases, cterm⟦ ##canno* ##cqconstructor ##csortargs? ##cterms? ##csortanno? ⟧)
  → cterm⟦ ##canno* ##cqconstructor ⟨csortargs?: NoAliasMaybeSortArgs(#aliases, #csortargs?)⟩ ⟨cterms?: NoAliasMaybeTerms(#aliases, #cterms?)⟩ ⟨csortanno?: NoAliasMaybeSortAnno(#aliases, #csortanno?)⟩ ⟧

  rule NoAliasTerm(#aliases, cterm⟦ ##canno* ##METAVAR ##cterms? ##csubst? : ##csort ⟧)
  → cterm⟦ ##canno* ##METAVAR ⟨cterms?: NoAliasMaybeTerms(#aliases, #cterms?)⟩  ⟨csubst?: NoAliasMaybeSubst(#aliases, #csubst?)⟩  : ⟨csort: NoAliasSort(#aliases, #csort)⟩ ⟧

  rule NoAliasTerm(#aliases, cterm⟦ ##canno* ##VARIABLE : ##csort ⟧)
  → cterm⟦ ##canno* ##VARIABLE : ⟨csort: NoAliasSort(#aliases, #csort)⟩ ⟧

  rule NoAliasTerm(#aliases, cterm⟦ ##canno* [ x : ##csort ] ##cterm[x] ⟧)
  → cterm⟦ ##canno* [ x : ⟨csort: NoAliasSort(#aliases, #csort)⟩] ⟨cterm: NoAliasTerm(#aliases, @NoSubst #cterm[x])⟩ ⟧

  rule NoAliasTerm(#aliases, cterm⟦ ##canno* ( f : ##csort ) ##cterm[f] ⟧)
  → cterm⟦ ##canno* ( f : ⟨csort: NoAliasSort(#aliases, #csort)⟩ ) ⟨cterm: NoAliasTerm(#aliases, @NoSubst #cterm[f])⟩ ⟧

  rule NoAliasTerm(#aliases, cterm⟦ ##canno* { ##cmapentries? } : { ##cmapsort } ⟧)
  → cterm⟦ ##canno* { ⟨cmapentries?: NoAliasMaybeMapEntries(#aliases, #cmapentries?)⟩ } : { ⟨cmapsort: NoAliasMapSort(#aliases, #cmapsort)⟩ } ⟧

  rule NoAliasTerm(#aliases, cterm⟦ ##canno* thunk ##cterm ⟧)
  → cterm⟦ ##canno* thunk ⟨cterm: NoAliasTerm(#aliases, #cterm)⟩ ⟧

  rule NoAliasTerm(#aliases, cterm⟦ ##canno* ##METAVAR ##csortanno? = ##cterm ⟧)
  → cterm⟦ ##canno* ##METAVAR ⟨csortanno?: NoAliasMaybeSortAnno(#aliases, #csortanno?)⟩ = ⟨cterm: NoAliasTerm(#aliases, #cterm)⟩ ⟧

  rule NoAliasTerm(#aliases, cterm⟦ ##canno* let ##METAVAR ##csortanno? = ##cterm ##cterm2 ⟧)
  → cterm⟦ ##canno* let ##METAVAR ⟨csortanno?: NoAliasMaybeSortAnno(#aliases, #csortanno?)⟩ = ⟨cterm: NoAliasTerm(#aliases, #cterm)⟩ ⟨cterm: NoAliasTerm(#aliases, #cterm2)⟩ ⟧

  rule NoAliasTerm(#aliases, #cterm) → #cterm

func NoAliasMaybeTerms(DeclIndex, List<Core_cterms_sort>) -> List<Core_cterms_sort>
rule NoAliasMaybeTerms(#aliases, cterms?⟦              ⟧) → cterms?⟦⟧
rule NoAliasMaybeTerms(#aliases, cterms?⟦ (          ) ⟧) → cterms?⟦ () ⟧
rule NoAliasMaybeTerms(#aliases, cterms?⟦ ( ##cterm* ) ⟧) → cterms?⟦ ( ⟨cterm*: Map((term)->NoAliasTerm(#aliases, term), #cterm*)⟩ ) ⟧

func NoAliasMaybeSubst(DeclIndex, List<Core_csubst_sort>) -> List<Core_csubst_sort>
rule NoAliasMaybeSubst(#aliases, csubst?⟦              ⟧) → csubst?⟦⟧
rule NoAliasMaybeSubst(#aliases, csubst?⟦ [ ##cterm* ] ⟧) → csubst?⟦ [ ⟨cterm*: Map((term)->NoAliasTerm(#aliases, term), #cterm*)⟩ ] ⟧

func NoAliasMaybeSortAnno(DeclIndex, List<Core_csortanno_sort>) -> List<Core_csortanno_sort>
rule NoAliasMaybeSortAnno(#aliases, csortanno?⟦           ⟧) → csortanno?⟦⟧
rule NoAliasMaybeSortAnno(#aliases, csortanno?⟦ : ##csort ⟧) → csortanno?⟦ : ⟨csort: NoAliasSort(#aliases, #csort)⟩ ⟧

func NoAliasMaybeMapEntries(DeclIndex, List<Core_cmapentries_sort>) -> List<Core_cmapentries_sort>
rule NoAliasMaybeMapEntries(#aliases, cmapentries?⟦              ⟧) → cmapentries?⟦⟧
rule NoAliasMaybeMapEntries(#aliases, cmapentries?⟦ ##cmapentry* ⟧) → cmapentries?⟦ ⟨cmapentry*: Map((entry)->NoAliasMapEntry(#aliases, entry), #cmapentry*)⟩ ⟧

func NoAliasMapEntry(DeclIndex, Core_cmapentry_sort) -> Core_cmapentry_sort
rule NoAliasMapEntry(#aliases, cmapentry⟦ ##METAVAR : ##cterm  ⟧) → cmapentry⟦ ##METAVAR : ⟨cterm: NoAliasTerm(#aliases, #cterm)⟩ ⟧
rule NoAliasMapEntry(#aliases, cmapentry⟦ ##VARIABLE : ##cterm ⟧) → cmapentry⟦ ##VARIABLE : ⟨cterm: NoAliasTerm(#aliases, #cterm)⟩ ⟧
rule NoAliasMapEntry(#aliases, cmapentry⟦ ##STRING : ##cterm   ⟧) → cmapentry⟦ ##STRING : ⟨cterm: NoAliasTerm(#aliases, #cterm)⟩ ⟧
rule NoAliasMapEntry(#aliases, #cmapentry                       ) → #cmapentry

// --- Sorts

func NoAliasSort(DeclIndex, Core_csort_sort) -> Core_csort_sort
rule NoAliasSort(#aliases, csort⟦ ##canno* ##CONSTRUCTOR ##csorts? ⟧) → NoAliasSortConstructor(#canno*, MapGet(#aliases, #CONSTRUCTOR), #aliases, #CONSTRUCTOR, #csorts?)
rule NoAliasSort(#aliases, csort⟦ ##canno* ##VARIABLE              ⟧) → csort⟦ ##canno* ##VARIABLE ⟧
rule NoAliasSort(#aliases, csort⟦ ##canno* [ ##csort1 ] ##csort2   ⟧) → csort⟦ ##canno* [ ⟨csort: NoAliasSort(#aliases, #csort1)⟩ ] ⟨csort: NoAliasSort(#aliases, #csort2)⟩ ⟧
rule NoAliasSort(#aliases, csort⟦ ##canno* ( ##csort1 ) ##csort2   ⟧) → csort⟦ ##canno* ( ⟨csort: NoAliasSort(#aliases, #csort1)⟩ ) ⟨csort: NoAliasSort(#aliases, #csort2)⟩ ⟧
rule NoAliasSort(#aliases, csort⟦ ##canno* { ##cmapsort* }         ⟧) → csort⟦ ##canno* { ⟨cmapsort*: NoAliasMapSorts(#aliases, #cmapsort*)⟩ } ⟧
rule NoAliasSort(#aliases, csort⟦ ##canno* thunk ##csort           ⟧) → csort⟦ ##canno* thunk ⟨csort: NoAliasSort(#aliases, #csort)⟩ ⟧
rule NoAliasSort(#aliases, csort⟦ ##canno* data ##csort            ⟧) → csort⟦ ##canno* data ⟨csort: NoAliasSort(#aliases, #csort)⟩ ⟧

func NoAliasSortConstructor(List<Core_canno_sort>, Option<Core_cdecl_sort>, DeclIndex, String, List<Core_csorts_sort>) -> Core_csort_sort

  rule NoAliasSortConstructor(#canno*, NONE, #aliases, #CONSTRUCTOR, #csorts?)
  → csort⟦ ##canno* ##CONSTRUCTOR ⟨csorts?: NoAliasMaybeSorts(#aliases, #csorts?)⟩ ⟧

  // TODO: consider propagating annotations.
  rule NoAliasSortConstructor(#canno*, SOME(cdecl⟦ ##canno* alias ##CONSTRUCTOR1 ##csort ##cdefaultvalue? ⟧), #aliases, #CONSTRUCTOR, csorts?⟦⟧)
  → NoAliasSort(#aliases, #csort)

  rule NoAliasSortConstructor(#canno*, SOME(#cdecl), #aliases, #CONSTRUCTOR, #csorts?)
  → Error("Polymorphic sort aliases not supported yet")

func NoAliasMaybeSorts(DeclIndex, List<Core_csorts_sort>) -> List<Core_csorts_sort>
rule NoAliasMaybeSorts(#aliases, csorts?⟦              ⟧) → csorts?⟦⟧
rule NoAliasMaybeSorts(#aliases, csorts?⟦ ( ##csort* ) ⟧) → csorts?⟦ ( ⟨csort*: NoAliasSorts(#aliases, #csort*)⟩ ) ⟧

func NoAliasSorts(#aliases: DeclIndex, #csort*: List<Core_csort_sort>) -> List<Core_csort_sort>
→ Map((sort)->NoAliasSort(#aliases, sort), #csort*)

func NoAliasMapSorts(DeclIndex, List<Core_cmapsort_sort>) -> List<Core_cmapsort_sort>
rule NoAliasMapSorts(#aliases, cmapsort*⟦                        ⟧) → cmapsort*⟦⟧
rule NoAliasMapSorts(#aliases, cmapsort*⟦ ##cmapsort ##cmapsort* ⟧) → cmapsort*⟦ ⟨cmapsort: NoAliasMapSort(#aliases, #cmapsort)⟩ ⟨cmapsort*: NoAliasMapSorts(#aliases, #cmapsort*)⟩ ⟧

func NoAliasMapSort(DeclIndex, Core_cmapsort_sort) -> Core_cmapsort_sort
rule NoAliasMapSort(#aliases, cmapsort⟦ ##csort1 : ##csort2 ⟧) → cmapsort⟦ ⟨csort: NoAliasSort(#aliases, #csort1)⟩ : ⟨csort: NoAliasSort(#aliases, #csort2)⟩ ⟧

func NoAliasMaybeSortArgs(DeclIndex, List<Core_csortargs_sort>) -> List<Core_csortargs_sort>
rule NoAliasMaybeSortArgs(#aliases, csortargs?⟦            ⟧) → csortargs?⟦⟧
rule NoAliasMaybeSortArgs(#aliases, csortargs?⟦< ##csort* >⟧) → csortargs?⟦ < ⟨csort*: NoAliasSorts(#aliases, #csort*)⟩ > ⟧

// --- Data sorts

func NoAliasDataSorts(#aliases: DeclIndex, #sorts: {String : Core_cdecl_sort}) -> {String : Core_cdecl_sort}
→ FoldlP((key sorts)->MapPut(sorts, key, NoAliasDataSort(#aliases, UnSOME(MapGet(#sorts, key)))), {}, MapKeys(#sorts))

func NoAliasDataSort(DeclIndex, Core_cdecl_sort) -> Core_cdecl_sort
rule NoAliasDataSort(#aliases, cdecl⟦ ##canno* data ##csortvars? ##cidentifierqualifier* ##CONSTRUCTOR ( ##cform* ) ⟧)
→ cdecl⟦ ##canno* data ##csortvars? ##cidentifierqualifier* ##CONSTRUCTOR ( ⟨cform*: Map((form)->NoAliasForm(#aliases, form), #cform*)⟩ ) ⟧

func NoAliasForm(DeclIndex, Core_cform_sort) -> Core_cform_sort
rule NoAliasForm(#aliases, cform⟦ ##CONSTRUCTOR ##csortsdefault? ⟧) → cform⟦ ##CONSTRUCTOR ⟨csortsdefault?: NoAliasMaybeSortsDefault(#aliases, #csortsdefault?)⟩ ⟧
rule NoAliasForm(#aliases, #cform) → #cform

func NoAliasMaybeSortsDefault(DeclIndex, List<Core_csortsdefault_sort>) -> List<Core_csortsdefault_sort>
rule NoAliasMaybeSortsDefault(#aliases, csortsdefault?⟦                     ⟧) → csortsdefault?⟦⟧
rule NoAliasMaybeSortsDefault(#aliases, csortsdefault?⟦ ( ##csortdefault* ) ⟧) → csortsdefault?⟦ ( ⟨csortdefault*: Map((sortdefault)->NoAliasSortDefault(#aliases, sortdefault), #csortdefault*)⟩ ) ⟧

func NoAliasSortDefault(DeclIndex, Core_csortdefault_sort) -> Core_csortdefault_sort
rule NoAliasSortDefault(#aliases, csortdefault⟦ ##csort ##cdefaultvalue? ⟧) → csortdefault⟦ ⟨csort: NoAliasSort(#aliases, #csort)⟩ ⟧

// --- Func sorts

func NoAliasFuncSorts(#aliases: DeclIndex, #sorts: {String : Core_cdecl_sort}) -> {String : Core_cdecl_sort}
→ FoldlP((key sorts)->MapPut(sorts, key, NoAliasFuncSort(#aliases, UnSOME(MapGet(#sorts, key)))), {}, MapKeys(#sorts))

func NoAliasFuncSort(DeclIndex, Core_cdecl_sort) -> Core_cdecl_sort
rule NoAliasFuncSort(#aliases, cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ##csort ##CONSTRUCTOR ##csortsdefault? ⟧)
→ cdecl⟦ ##canno* ##EXTERN? func ##csortvars? ⟨csort: NoAliasSort(#aliases, #csort)⟩ ##CONSTRUCTOR ⟨csortsdefault?: NoAliasMaybeSortsDefault(#aliases, #csortsdefault?)⟩ ⟧
