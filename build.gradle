// Copyright (c) 2015 IBM Corporation.
import org.crsx.gradle.*

defaultTasks 'coreParsers', 'crsxParsers', 'textParsers'

apply plugin:'base'

// -- Configure build script which requires crsx4 gradle plugin
buildscript {
    repositories {
        flatDir { dirs 'gradle' } // to find crsx4-gradle-plugin.jar
    }
    dependencies {
        classpath 'org.crsx.gradle:crsx4-gradle-plugin:1.+'
    }
}

apply plugin:'org.crsx.gradle.crsx4'

repositories {
    flatDir { dirs 'targets/java/dist' } // where to find crsx4.jar
    flatDir { dirs 'targets/java/lib' }  // where to find crsx3.jar
    mavenCentral() // Where to find ANTLR  
}

dependencies {
    crsx4 project.hasProperty('dev') ? files('targets/java/build', 'src') : 'org.crsx:crsx:4.0+@jar' 
    crsx4 'org.crsx:crsx3@jar'
    crsx4 'org.antlr:antlr4:4.5' 
}

task coreParsers(type: PG4Task) {
    description "Generate Core term and meta parsers"
    source = file('src/core/Core.g4')
    generatedFileDir = file('src/core')
    metaPrefix = '##'
}

task crsxParsers(type: PG4Task) {
    description 'Generate Crsx4 term and meta parsers'
    source = file('src/parser/Crsx.g4')
    generatedFileDir = file('src/parser')
    metaPrefix = '##'
}

task textParsers(type: PG4Task) {
    description 'Generate Text term and meta parsers'
    source = file('src/text/Text4.g4')
    generatedFileDir = file('src/text')
    metaPrefix = '##'
    defaultRule = 'CHARS'
}

task cleanCoreParsers(overwrite : true) {} 
task cleanCrsxParsers(overwrite : true) {} 
task cleanTextParsers(overwrite : true) {} 

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}