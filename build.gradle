// Copyright (c) 2015-2016 IBM Corporation.

/**
 * Main Gradle build. 
 * 
 * The default tasks is snapshot, which creates a candidate Tosca distibution jar file is targets/java/dist.
 * 
 * By default, the snapshot is created from Tosca source files compiled using a previous Tosca stable build.
 * 
 * There are various ways of overriding the default behavior by specifying -P option on the gradle command line.
 * These options are:
 * - dev : use latest Tosca class files stored in targets/java/build
 * - crsx3: use crsx3 source files 
 */

import org.transscript.gradle.*

defaultTasks 'tarAll'

apply plugin:'base'

project.ext {
	
// Change to true when changes are made to the runtime affecting generated parsers
// See also settings.gradle
nparsers = false

}

// -- Configure build script which requires Tosca gradle plugin
buildscript {
    repositories {
        flatDir { dirs 'gradle' } // to find transscript-gradle-plugin.jar
    }
    dependencies {
        classpath 'org.transscript.gradle:transscript-gradle-plugin:1.+'
    }
}

apply plugin:'org.transscript.gradle'

repositories {
    flatDir { dirs 'targets/java/dist' } // where to find Tosca jar
    flatDir { dirs 'targets/java/lib' }  // where to find crsx3.jar
    mavenCentral() // Where to find ANTLR  
}

dependencies {
    transscript project.hasProperty('dev') ? 'org.transscript:transscript:1.0.0-SNAPSHOT@jar' : 'org.transscript:transscript:1.0.0-ALPHA@jar' 
    transscript 'org.crsx:crsx3@jar'
    transscript 'org.antlr:antlr4:4.5' 
}

// --- Generate all meta and term parsers

task coreParsers(type: PG4Task) {
    description "Generate Core term and meta parsers"
    source = file('src/core/Core.g4')
    generatedFileDir = file('src/core')
    metaPrefix = '##'
	ncg = true
}

task toscaParsers(type: PG4Task) {
    description 'Generate Tosca term and meta parsers'
    source = file('src/parser/TransScript.g4')
    generatedFileDir = file('src/parser')
    metaPrefix = '##'
	ncg =  true
}

task textParsers(type: PG4Task) {
    description 'Generate Text term and meta parsers'
    source = file('src/text/Text4.g4')
    generatedFileDir = file('src/text')
    defaultRule = 'text'
	ncg = true 
}

// --- dependencies

// --- To make sure we don't delete something important by accident
task cleanCoreParsers(overwrite : true) {} 
task cleanTransScriptParsers(overwrite : true) {} 
task cleanTextParsers(overwrite : true) {} 

// --- The tarball full distribution

task tarAll(type: Tar, dependsOn: ':targets:java:snapshot') {
	baseName 'tosca'
	classifier 'ALPHA'
	version '1.0'
	compression Compression.GZIP
	
	// Tosca compiler.
	into ('.') {
		from 'targets/java/dist/transscript-1.0.0-SNAPSHOT.jar'
		rename { String fileName -> 'tosca.jar'	}
	}
	
    // Java libraries
    into ('lib') {
        from 'targets/java/lib'
        include '*.jar'
    }
    
	
	// Standard library
	into ('lib/std/') {
        from 'src/std/'
        include '**/*.tsc'
    }
	
	// C++ Target
	into ('targets/cpp/runtime') {
		from 'targets/cpp/runtime/'
		include '*.*'
	}
	
	into ('targets/cpp') {
		from 'targets/cpp'
		include 'build.gradle'
	}
	
	into ('targets/cpp/resources') {
		from 'targets/cpp/resources/'
		include '*.*'
	}
	
	into ('.') {
		from '.'
		include 'gradle/wrapper/**/*'
		include 'gradlew.*'
		include 'gradlew'
		include 'VERSION'
		include 'LICENSE.TXT'
	}
}

// --- The Gradle wrapper.
task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}