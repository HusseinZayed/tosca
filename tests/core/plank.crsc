
// N is natural number sort
data N ( Z, S(N) )
func N Plus(N, N)
rule Plus(Z, #2) → #2 
rule Plus(S(#1), #2) → S( Plus(#1,#2) )

// Parametric List
data ∀ a. List ( Nil, Cons(a, List(a)) )
func ∀ a. List Append(List(a), List(a))
rule Append(Nil, #2) → #2 
rule Append(Cons(#11, #12), #2) → Cons(#11, Append(#12, #2))

func ∀ a b . List(a) Map([b]a, List(b)) 
rule Map([x]#(x), Nil)          → Nil
rule Map([x]#(x), Cons(#1, #2)) → Cons( #(#1), Map([x]#(x), #2))

// Abstract Syntax.

data ∀ a b.Program ( 
    Block(a, b, Program(a, b)), 
    Then(Program(a, b), Program(a,b)),
    Stat(a) )

// Type Environment    

data ∀ a b.Γ ( Env( { a : b } ) )

// Create environment from Program
func ∀ a b.Γ Mk( Program(a,b) )

rule Mk(Stat(#))          → Env({})
rule Mk(Then(#1, #2))     → Union(Mk(#1), Mk(#2))
rule Mk(Block(#x, #t, #)) → Union(Env({#x:#t}, Mk(#)))

// Helper to create union of two environments.
func ∀ a b. Γ(a,b) Union( Γ(a,b), Γ(a,b) )
rule Union(Env({:#1}), Env({:#2})) → Env({:#1,:#2})

// Booleans with conditional.  
data Bool (True, False)
func ∀ a. a If(Bool, a, a)

// Pick number. 

func Int Pick(List(Int), @Eager([Int][Int]Bool)) 
rule Pick(#, [x][y]#pick(x,y)) → Pick2(#, [x][y]#pick(x,y), 1)

func Int Pick2(List(Int), [Int][Int]Bool, Int) 
rule Pick2(Nil, [x][y]#pick(x,y), #n) → #n
rule Pick2(Cons(#1, #rest), [x][y]#pick(x,y), #n) → Pick2(#rest, [x][y]#pick(x,y), #pick(#1,#n))