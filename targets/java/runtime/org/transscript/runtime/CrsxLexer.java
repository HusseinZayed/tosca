/* The following code was generated by JFlex 1.5.1 */

/* Copyright (c) 2012-2014 IBM Corporation. */
// $Id: crsx_scan.flex,v 3.1 2013/06/19 19:46:46 villardl Exp $
package org.transscript.runtime;
 
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayDeque;

///////////////////////////////////////////////////////////////////////////////////////////////////
// CRSX JAVA SCANNER 
///////////////////////////////////////////////////////////////////////////////////////////////////
 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>src/java/org/crsx/runtime/crsx_scan.flex</tt>
 */
final public class CrsxLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int Before = 2;
  public static final int BeforeWithBinders = 4;
  public static final int AfterSimple = 6;
  public static final int BeforeKey = 8;
  public static final int AfterProperties = 10;
  public static final int AfterConstructor = 12;
  public static final int BeforeArgument = 14;
  public static final int AfterArguments = 16;
  public static final int AfterKey = 18;
  public static final int AfterFirstVariable = 20;
  public static final int AfterBinder = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\1\1\11\1\33\1\33\1\33\16\3\4\0\1\1\3\0"+
    "\1\5\2\0\1\6\3\0\1\12\1\30\1\13\1\14\1\32\10\10"+
    "\2\10\1\24\1\25\5\0\4\5\1\16\25\5\1\27\1\7\1\31"+
    "\1\0\1\3\1\0\4\20\1\15\25\20\1\23\1\0\1\26\1\0"+
    "\6\3\1\4\32\3\1\1\1\0\4\3\4\0\1\20\2\0\1\3"+
    "\7\0\1\20\3\0\1\22\1\20\5\0\2\5\1\21\24\5\1\0"+
    "\7\5\30\20\1\0\10\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\2\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\2\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\2\5\1\20\1\5\1\20\1\5\3\20\2\5\1\20"+
    "\1\5\1\20\2\5\1\20\3\5\2\20\4\5\1\20\2\5\1\20"+
    "\3\5\3\20\2\5\1\20\2\5\1\20\1\5\1\20\1\5\1\20"+
    "\2\5\1\20\1\5\2\20\1\5\1\20\2\5\1\20\3\5\1\20"+
    "\1\5\1\20\2\5\2\20\1\3\1\5\3\20\4\3\1\5\1\3"+
    "\1\20\1\5\1\3\1\20\1\5\1\3\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\2\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\2\20\1\5\1\3\1\20\1\5\1\20\3\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\7\20\2\5\1\20\2\5\2\20"+
    "\1\5\1\20\4\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\105\20\1\3\44\20\7\3\2\20\4\0\14\3\16\0\5\20"+
    "\7\0\1\3\1\0\1\3\21\0\105\3\1\20\52\3\1\5\1\20"+
    "\1\5\1\20\1\3\1\0\1\5\1\20\2\0\4\20\10\0\1\5"+
    "\1\0\3\5\1\0\1\5\1\0\2\5\1\20\21\5\1\0\11\5"+
    "\43\20\1\5\2\20\3\5\3\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\5\20\1\5"+
    "\1\20\1\0\1\5\1\20\2\5\2\20\63\5\60\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\0\5\3\2\0\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\2\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\2\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\11\0\46\5\2\0\1\3\7\0\47\20\7\0\1\3\1\0"+
    "\55\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\1\3\10\0"+
    "\33\3\5\0\3\3\15\0\5\3\6\0\1\3\4\0\13\3\5\0"+
    "\112\3\4\0\146\3\1\0\11\3\1\0\12\3\1\0\23\3\2\0"+
    "\1\3\17\0\74\3\2\0\145\3\16\0\66\3\4\0\1\3\5\0"+
    "\56\3\22\0\34\3\104\0\1\3\1\0\13\3\67\0\33\3\1\0"+
    "\144\3\2\0\12\3\1\0\7\3\1\0\7\3\1\0\3\3\1\0"+
    "\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0\1\3\3\0"+
    "\4\3\2\0\11\3\2\0\2\3\2\0\4\3\10\0\1\3\4\0"+
    "\2\3\1\0\5\3\2\0\16\3\7\0\1\3\5\0\3\3\1\0"+
    "\6\3\4\0\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\2\3\2\0\1\3\1\0\5\3\4\0\2\3\2\0"+
    "\3\3\3\0\1\3\7\0\4\3\1\0\1\3\7\0\20\3\13\0"+
    "\3\3\1\0\11\3\1\0\3\3\1\0\26\3\1\0\7\3\1\0"+
    "\2\3\1\0\5\3\2\0\12\3\1\0\3\3\1\0\3\3\2\0"+
    "\1\3\17\0\4\3\2\0\12\3\1\0\1\3\17\0\3\3\1\0"+
    "\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0"+
    "\5\3\2\0\11\3\2\0\2\3\2\0\3\3\10\0\2\3\4\0"+
    "\2\3\1\0\5\3\2\0\12\3\1\0\1\3\20\0\2\3\1\0"+
    "\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0"+
    "\2\3\3\0\2\3\3\0\3\3\3\0\14\3\4\0\5\3\3\0"+
    "\3\3\1\0\4\3\2\0\1\3\6\0\1\3\16\0\12\3\11\0"+
    "\1\3\7\0\3\3\1\0\10\3\1\0\3\3\1\0\27\3\1\0"+
    "\12\3\1\0\5\3\3\0\10\3\1\0\3\3\1\0\4\3\7\0"+
    "\2\3\1\0\2\3\6\0\4\3\2\0\12\3\22\0\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3\2\0"+
    "\11\3\1\0\3\3\1\0\4\3\7\0\2\3\7\0\1\3\1\0"+
    "\4\3\2\0\12\3\1\0\2\3\17\0\2\3\1\0\10\3\1\0"+
    "\3\3\1\0\51\3\2\0\10\3\1\0\3\3\1\0\5\3\10\0"+
    "\1\3\10\0\4\3\2\0\12\3\12\0\6\3\2\0\2\3\1\0"+
    "\22\3\3\0\30\3\1\0\11\3\1\0\1\3\2\0\7\3\3\0"+
    "\1\3\4\0\6\3\1\0\1\3\1\0\10\3\22\0\2\3\15\0"+
    "\72\3\4\0\20\3\1\0\12\3\47\0\2\3\1\0\1\3\2\0"+
    "\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3\1\0"+
    "\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\15\3\1\0"+
    "\3\3\2\0\5\3\1\0\1\3\1\0\6\3\2\0\12\3\2\0"+
    "\4\3\40\0\1\3\27\0\2\3\6\0\12\3\13\0\1\3\1\0"+
    "\1\3\1\0\1\3\4\0\12\3\1\0\44\3\4\0\24\3\1\0"+
    "\22\3\1\0\44\3\11\0\1\3\71\0\112\3\6\0\116\3\2\0"+
    "\46\5\1\0\1\5\5\0\1\5\2\0\53\3\1\0\u014d\3\1\0"+
    "\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\51\3\1\0"+
    "\4\3\2\0\41\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0"+
    "\4\3\2\0\17\3\1\0\71\3\1\0\4\3\2\0\103\3\2\0"+
    "\3\3\40\0\20\3\20\0\125\3\14\0\u026c\3\2\0\21\3\1\1"+
    "\32\3\5\0\113\3\3\0\3\3\17\0\15\3\1\0\7\3\13\0"+
    "\25\3\13\0\24\3\14\0\15\3\1\0\3\3\1\0\2\3\14\0"+
    "\124\3\3\0\1\3\3\0\3\3\2\0\12\3\41\0\3\3\2\0"+
    "\12\3\6\0\130\3\10\0\53\3\5\0\106\3\12\0\35\3\3\0"+
    "\14\3\4\0\14\3\12\0\50\3\2\0\5\3\13\0\54\3\4\0"+
    "\32\3\6\0\12\3\46\0\34\3\4\0\77\3\1\0\35\3\2\0"+
    "\13\3\6\0\12\3\15\0\1\3\130\0\114\3\4\0\12\3\21\0"+
    "\11\3\14\0\164\3\14\0\70\3\10\0\12\3\3\0\61\3\122\0"+
    "\3\3\1\0\43\3\11\0\300\20\47\3\25\0\4\3\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\11\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\11\20\10\5\6\20\2\0\6\5"+
    "\2\0\10\20\10\5\10\20\10\5\6\20\2\0\6\5\2\0\10\20"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\10\20\10\5"+
    "\16\20\2\0\10\20\10\3\10\20\10\3\10\20\10\3\5\20\1\0"+
    "\2\20\4\5\1\3\1\0\1\20\3\0\3\20\1\0\2\20\4\5"+
    "\1\3\3\0\4\20\2\0\2\20\4\5\4\0\10\20\5\5\5\0"+
    "\3\20\1\0\2\20\4\5\1\3\3\0\13\1\5\3\30\0\1\33"+
    "\1\33\5\3\1\1\17\0\2\3\23\0\1\3\12\0\1\1\5\3"+
    "\5\0\6\3\1\0\1\20\15\0\1\20\20\0\15\20\3\0\33\3"+
    "\25\0\15\3\4\0\1\3\3\0\14\3\21\0\1\5\4\0\1\5"+
    "\2\0\1\20\3\5\2\20\3\5\1\20\1\0\1\5\3\0\5\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\1\20"+
    "\4\5\1\20\4\3\1\20\2\0\2\20\2\5\5\0\1\5\4\20"+
    "\4\0\1\20\21\0\20\5\20\20\3\3\1\5\1\20\4\3\u032d\0"+
    "\32\2\32\17\u0716\0\57\5\1\0\57\20\1\0\1\5\1\20\3\5"+
    "\2\20\1\5\1\20\1\5\1\20\1\5\1\20\4\5\1\20\1\5"+
    "\2\20\1\5\10\20\3\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\2\20\6\0\1\5\1\20\1\5\1\20\3\3\1\5"+
    "\1\20\14\0\46\20\1\0\1\20\5\0\1\20\2\0\70\3\7\0"+
    "\1\3\17\0\30\3\11\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\40\3\57\0\1\3\u01d0\0\1\1\4\0\3\3\31\0\17\3\1\0"+
    "\5\3\2\0\5\3\4\0\126\3\2\0\2\3\2\0\3\3\1\0"+
    "\132\3\1\0\4\3\5\0\51\3\3\0\136\3\21\0\33\3\65\0"+
    "\20\3\u0200\0\u19b6\3\112\0\u51cd\3\63\0\u048d\3\103\0\56\3\2\0"+
    "\u010d\3\3\0\34\3\24\0\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\2\3\4\0\12\3\1\0\1\3\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5"+
    "\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\7\0"+
    "\123\3\45\0\11\3\2\0\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\3\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\1\20\1\5\12\20"+
    "\1\5\1\20\1\5\1\20\2\5\1\20\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\3\2\0\1\5\1\20\1\5\1\20"+
    "\1\0\1\5\1\20\1\5\1\20\14\0\1\5\1\20\1\5\1\20"+
    "\1\5\1\20\1\5\1\20\1\5\1\20\1\5\115\0\3\20\55\3"+
    "\20\0\1\3\7\0\64\3\14\0\105\3\13\0\12\3\6\0\30\3"+
    "\3\0\1\3\4\0\56\3\2\0\44\3\14\0\35\3\3\0\101\3"+
    "\16\0\13\3\46\0\67\3\11\0\16\3\2\0\12\3\6\0\27\3"+
    "\3\0\2\3\4\0\103\3\30\0\3\3\2\0\20\3\2\0\5\3"+
    "\12\0\6\3\2\0\6\3\2\0\6\3\11\0\7\3\1\0\7\3"+
    "\221\0\53\3\1\0\2\3\2\0\12\3\6\0\u2ba4\3\14\0\27\3"+
    "\4\0\61\3\u2104\0\u016e\3\2\0\152\3\46\0\7\20\14\0\5\20"+
    "\5\0\14\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3"+
    "\1\0\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0\66\3"+
    "\50\0\15\3\3\0\20\3\20\0\7\3\14\0\2\3\30\0\3\3"+
    "\31\0\1\3\6\0\5\3\1\0\207\3\2\0\1\3\4\0\1\3"+
    "\13\0\12\3\7\0\32\5\4\0\1\3\1\0\32\20\13\0\131\3"+
    "\3\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0\2\3"+
    "\3\0\2\3\22\0\3\3\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\13\1\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\0\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\1\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\3\3\0\1\5\2\0\1\13\3\0"+
    "\1\15\2\0\1\24\1\32\1\0\1\34\3\0\1\37"+
    "\1\44\2\4\1\0\2\14\1\0\2\23\1\0\2\35"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304"+
    "\0\340\0\374\0\u0118\0\u0134\0\0\0\0\0\u0150\0\u016c"+
    "\0\u0188\0\u01a4\0\0\0\0\0\0\0\0\0\0\0\u01c0"+
    "\0\u01dc\0\u01f8\0\u0214\0\u0230\0\0\0\0\0\0\0\0"+
    "\0\0\0\u024c\0\u0268\0\0\0\u016c\0\0\0\0\0\0"+
    "\0\0\0\u0284\0\0\0\u02a0\0\u02bc\0\u02d8\0\0\0\u02f4"+
    "\0\0\0\0\0\0\0\0\0\u0310\0\0\0\u032c\0\u0348"+
    "\0\u0364\0\u0380\0\u039c\0\u01f8\0\0\0\u03b8\0\u03d4\0\u03f0"+
    "\0\u040c\0\u0428\0\u0444\0\u0460\0\u047c\0\u02bc\0\0\0\u0498"+
    "\0\u04b4\0\u04d0\0\u04ec\0\u0508\0\u0524\0\u0540\0\u0540\0\u055c"+
    "\0\u0578\0\u0578\0\u0594\0\u05b0\0\u05b0\0\u05cc\0\u05e8\0\u05e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\34\0\1\15\1\16\1\17\1\15\1\16\1\17\1\20"+
    "\1\15\1\21\1\16\2\21\1\15\1\22\1\17\2\22"+
    "\1\17\1\15\1\23\1\24\1\25\1\26\1\27\2\15"+
    "\1\30\1\16\1\15\1\16\1\31\1\15\1\16\1\31"+
    "\1\32\1\15\1\33\1\16\2\33\1\15\1\34\1\31"+
    "\2\34\1\31\1\15\1\35\1\24\1\25\1\26\1\27"+
    "\2\15\1\30\1\16\25\0\1\36\1\37\1\27\1\40"+
    "\1\41\12\0\1\42\1\0\2\42\1\0\1\43\1\0"+
    "\2\43\2\0\1\44\12\0\1\17\2\0\1\17\1\45"+
    "\7\0\1\17\2\0\1\17\12\0\1\15\1\16\2\15"+
    "\1\16\4\15\1\16\12\15\1\24\1\46\1\47\1\40"+
    "\1\50\1\51\1\30\1\16\1\15\1\16\1\17\1\15"+
    "\1\16\1\17\1\20\1\15\1\21\1\16\2\21\1\15"+
    "\1\52\1\17\2\52\1\17\1\15\1\23\1\24\1\25"+
    "\1\26\1\27\2\15\1\30\1\16\1\15\1\16\2\15"+
    "\1\16\4\15\1\16\12\15\1\24\1\46\1\47\1\27"+
    "\1\50\1\51\1\30\1\16\24\0\1\53\7\0\1\15"+
    "\1\16\1\54\1\15\1\16\1\54\1\55\1\15\1\56"+
    "\1\16\2\56\1\57\1\60\1\54\2\60\1\54\1\15"+
    "\1\61\1\24\1\25\1\26\1\27\1\62\1\63\1\30"+
    "\1\16\1\15\1\16\1\54\1\15\1\16\1\54\1\55"+
    "\1\15\1\56\1\16\2\56\1\64\1\65\1\54\2\65"+
    "\1\54\1\15\1\61\1\24\1\25\1\26\1\27\2\15"+
    "\1\30\1\16\3\0\3\17\2\0\1\17\2\0\1\17"+
    "\1\0\2\17\1\0\2\17\12\0\6\45\1\66\1\67"+
    "\24\45\10\0\1\21\3\0\1\70\2\71\20\0\3\22"+
    "\2\0\1\22\2\0\1\22\1\0\2\22\1\0\1\22"+
    "\1\72\44\0\1\73\4\0\3\31\2\0\1\31\2\0"+
    "\1\31\1\0\2\31\1\0\2\31\12\0\6\74\1\75"+
    "\1\76\24\74\10\0\1\33\3\0\1\77\2\100\20\0"+
    "\3\34\2\0\1\34\2\0\1\34\1\0\2\34\1\0"+
    "\1\34\1\101\22\0\1\42\3\0\1\102\2\103\20\0"+
    "\3\43\2\0\1\43\2\0\1\43\1\0\2\43\1\0"+
    "\1\43\1\104\15\0\3\52\2\0\1\52\2\0\1\52"+
    "\1\0\2\52\1\0\1\52\1\105\15\0\3\54\2\0"+
    "\1\54\2\0\1\54\1\0\2\54\1\0\2\54\12\0"+
    "\6\106\1\107\1\110\24\106\10\0\1\56\3\0\1\111"+
    "\2\112\20\0\3\60\2\0\1\60\2\0\1\60\1\0"+
    "\2\60\1\0\1\60\1\113\15\0\3\65\2\0\1\65"+
    "\2\0\1\65\1\0\2\65\1\0\1\65\1\114\12\0"+
    "\11\45\1\0\22\45\10\0\1\115\33\0\1\116\1\0"+
    "\2\117\23\0\3\22\2\0\1\22\2\0\1\22\1\0"+
    "\2\22\1\0\1\22\1\72\1\22\11\0\4\73\1\0"+
    "\4\73\1\16\21\73\1\0\11\74\1\0\22\74\10\0"+
    "\1\120\33\0\1\121\1\0\2\122\23\0\3\34\2\0"+
    "\1\34\2\0\1\34\1\0\2\34\1\0\1\34\1\101"+
    "\1\34\21\0\1\123\33\0\1\124\1\0\2\125\23\0"+
    "\3\43\2\0\1\43\2\0\1\43\1\0\2\43\1\0"+
    "\1\43\1\104\1\43\14\0\3\52\2\0\1\52\2\0"+
    "\1\52\1\0\2\52\1\0\1\52\1\105\1\52\11\0"+
    "\11\106\1\0\22\106\10\0\1\126\33\0\1\127\1\0"+
    "\2\130\23\0\3\60\2\0\1\60\2\0\1\60\1\0"+
    "\2\60\1\0\1\60\1\113\1\60\14\0\3\65\2\0"+
    "\1\65\2\0\1\65\1\0\2\65\1\0\1\65\1\114"+
    "\1\65\21\0\1\115\4\0\2\71\25\0\1\116\33\0"+
    "\1\120\4\0\2\100\25\0\1\121\33\0\1\123\4\0"+
    "\2\103\25\0\1\124\33\0\1\126\4\0\2\112\25\0"+
    "\1\127\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\13\0\2\11\4\1\5\11\5\1\5\11\2\1"+
    "\1\11\1\0\4\11\1\1\1\11\3\1\1\11\1\1"+
    "\4\11\1\1\1\11\3\0\1\1\2\0\1\11\3\0"+
    "\1\1\2\0\2\1\1\0\1\11\3\0\4\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    enum Tag {LINK_UNDEFINED_TAG, LINK_BASE_TAG, LINK_CONSTRUCTION_TAG, LINK_NAMED_PROPERTY_TAG, LINK_VARIABLE_PROPERTY_TAG, LINK_STRING_TAG, LINK_FIRST_BINDER_TAG, LINK_FOLLOWING_BINDER_TAG} ;

    /** Context */
	private Context context;
	
    /** Sink stack */
	private ArrayDeque<Sink> sinkStack = new ArrayDeque<Sink>();

    /** Tag stack */
	private ArrayDeque<Tag> tagStack = new ArrayDeque<Tag>();

    /** 
     * Data stack 
     * ConstructionDescriptor for LINK_CONSTRUCTION_TAG 
     * String for LINK_NAMED_PROPERTY_TAG and LINK_STRING_TAG 
     * Variable for LINK_VARIABLE_PROPERTY_TAG and LINK_*_BINDER_TAG 
     */
	private ArrayDeque<Object> dataStack = new ArrayDeque<Object>();
 
    /** Variables in scope for this constructor */
    private ArrayDeque<Variable[]> variableStack  = new ArrayDeque<Variable[]>();
 	
    /** Special variable null value */
    private Variable[] novariable = new Variable[0];

    /** Special data value */
    private Object nodata = new Object();

	// Push a state description of a particular kind and send any initialization events.
	final private void makeBase(Sink sink)
	{
	    sinkStack.push(sink);
	    tagStack.push(Tag.LINK_BASE_TAG);
	    dataStack.push(nodata);
	  	variableStack.push(novariable);
	  	context = sink.context();   
	}

	final private void pushConstruction(ConstructionDescriptor descriptor)
	{
		sinkStack.push(sinkStack.peek());
		tagStack.push(Tag.LINK_CONSTRUCTION_TAG);
	 	dataStack.push(descriptor);
	    variableStack.push(novariable);
	    
	    sinkStack.peek().start(descriptor);
	}

	final private void pushNamedProperty(String name)
	{
		sinkStack.push(new BufferSink(context));
		tagStack.push(Tag.LINK_NAMED_PROPERTY_TAG);
	    dataStack.push(name);
	    variableStack.push(novariable);
	}

	final private void pushVariableProperty(String variableName)
	{
		sinkStack.push(new BufferSink(context));
	    tagStack.push(Tag.LINK_VARIABLE_PROPERTY_TAG);
	    dataStack.push(lookupName(variableName));
	    variableStack.push(novariable);
	}

	final private void pushString(String string)
	{
		sinkStack.push(sinkStack.peek());
		tagStack.push(Tag.LINK_STRING_TAG);
	    dataStack.push(string);
	    variableStack.push(novariable);
	}

	final private void pushFirstBinder(String name)
	{
	   sinkStack.push(sinkStack.peek());
       tagStack.push(Tag.LINK_FIRST_BINDER_TAG);
	    
	   Variable variable = new Variable(name);
	   dataStack.push(variable);
	    
	   variableStack.push(novariable); 
	}

	final private void pushFollowingBinder(String name)
	{
	   sinkStack.push(sinkStack.peek());
       tagStack.push(Tag.LINK_FOLLOWING_BINDER_TAG); 
	    
	  final Variable variable = new Variable(name);
	  dataStack.push(variable);
	  
	  variableStack.add(novariable);  
	}

	// Pop a state of a particular kind including sending any pending events.
	final private void popBase()
	{
	}

	final private void popConstruction()
	{
		assert tagStack.peek() == Tag.LINK_CONSTRUCTION_TAG;
	    //assert dataStack.peek() instanceof ConstructionDescriptor;
	    
	    sinkStack.peek().end();
	    
	 	sinkStack.pop();
	    tagStack.pop();
	  	dataStack.pop();
	  	variableStack.pop();
	}

	final private void popProperty()
	{
		// Pop
		final Sink sink = sinkStack.pop();
	    final Tag tag = tagStack.pop();
	  	final Object data = dataStack.pop();
	  	variableStack.pop(); 
	
	    //
	    switch (tag)
	    {
	    case LINK_NAMED_PROPERTY_TAG :
		{
		    String name = (String) data;
		    Term term = ((BufferSink) sink).term(); 
		    sinkStack.peek().propertyNamed(name, term);
		    break;
		}
	    case LINK_VARIABLE_PROPERTY_TAG :
		{
	        Variable variable = (Variable) data;
		    Term term = ((BufferSink) sink).term(); 
		    sinkStack.peek().propertyVariable(variable, term);
		    break;
	    }
	    default :
	        assert false : "state->tag != LINK_*_PROPERTY_TAG";
	    }
	}

	final private void popString()
	{
	  	assert Tag.LINK_STRING_TAG ==  tagStack.peek();
	
		// Pop
	    sinkStack.pop();
	    tagStack.pop();
	  	dataStack.pop();
	  	variableStack.pop(); 
	}

	//  Send binders. Only called when there is at least one binder.
	final private Variable[] popBinders() 
	{
	    /* First count the number of binders. */
	    int size = 0; 
	    for (Tag tag : tagStack)
	    { 
	    	if (tag != Tag.LINK_FOLLOWING_BINDER_TAG && tag !=  Tag.LINK_FIRST_BINDER_TAG)
	    		break;
	    	size ++;
	    }
	    
	    /* Extract binder variables and pop the stack */
	    Variable[] binders = new Variable[size];
	    for (int i = size-1; i >= 0; --i)
	    {
	        assert ((i>0 && tagStack.peek() == Tag.LINK_FOLLOWING_BINDER_TAG) || (i==0 && tagStack.peek() == Tag.LINK_FIRST_BINDER_TAG));
	        binders[i] = (Variable) dataStack.peek();
	        
	        // Pop
	    	sinkStack.pop();
	    	tagStack.pop();
	  		dataStack.pop();
	  		variableStack.pop();
	    }
	    
	    topSink().binds(binders);
	   
	    return binders; 
	}

	// Retrieve the stored value in the top state.
	final private String topString()  // use before popString()
	{
	   return (String) dataStack.peek();
	}

	final private Sink topSink()
	{
	  return sinkStack.peek();
	}

	final private void setNames(Variable[] names)
	{
	    variableStack.pop();
	    variableStack.push(names);
	}

	// Find variable or allocate as fresh if previously not seen.
	final private Variable lookupName(String name)
	{
	    // First search for bound variable.
	    
	    for (Variable[] variables: variableStack)
		{ 
	        for (int i = 0; i < variables.length; i ++)
	            if (variables[i].name().equals(name))
	                return variables[i];
	    }
	     
	    // Allocate as fresh variable.
	    final Variable variable = new Variable(name);
	    
	    setNames(new Variable[] { variable });
	    
	    return variable;
	}	
 
	final private ConstructionDescriptor lookupDescriptor(String name)
	{
	   return context.lookupDescriptor(name); 
	}
 
	// Helper to remove quotes.
	final private String unquote(String quoted)
	{
		char q = quoted.charAt(0);
		if (q != '"' && q != '\'')
			return quoted;

		char[] unquoted = new char[quoted.length()];
		char c;
		int j = 0;
		for (int i = 1; i < quoted.length() - 1; i++)
		{
			c = quoted.charAt(i);
			if (c == q) // shouldn't be needed (unless occurring in middle of quoted)
			{
				// ignore...
			}
			else if (c == '\\')
			{
				i ++;
				c = quoted.charAt(i);
				switch (c)
				{
					case '0' :
					case '1' :
					case '2' :
					case '3' :
					case '4' :
					case '5' :
					case '6' :
					case '7' : {
						int n = 0, m = 0;
						do
						{
							n = (n << 3) + (c - '0');
							i++;
							c = quoted.charAt(i);
							++m;
						}
						while (m < 3 && '0' <= c && c <= '7');
						unquoted[j++] = (char) n;
					}
						break;
					//  case 'a': unquoted[j++] = '\a'; break; Bell not supported
					case 'b' :
						unquoted[j++] = '\b';
						break;
					case 'f' :
						unquoted[j++] = '\f';
						break;
					case 'n' :
						unquoted[j++] = '\n';
						break;
					case 'r' :
						unquoted[j++] = '\r';
						break;
					default :
						unquoted[j++] = c;
				}
			}
			else
			{
				unquoted[j++] = c;
			}
		}

		return new String(unquoted);
	}

	/* Main entry points. */
	final public int scanTerm(Sink sink, Reader input) throws IOException
	{
		yyreset(input);
		makeBase(sink);
		yybegin(Before);
		int result = yylex();
		popBase();

		return result;
	}

	final public int loadTerm(Sink sink, String name) throws IOException
	{
		FileReader reader = new FileReader(name);
		scanTerm(sink, reader);

		return 1;
	}


// Inner classes


static class VariableNameMapLink
{
   	VariableNameMapLink link;
    String key;
    Variable value;
    
    VariableNameMapLink(VariableNameMapLink link, String key, Variable value)
    {
     	this.link = link;
     	this.key = key;
     	this.value = value;
    }
};



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CrsxLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CrsxLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new Error("Illegal character <"+ yytext()+ ">");
          }
        case 37: break;
        case 2: 
          { 
          }
        case 38: break;
        case 3: 
          { pushConstruction(lookupDescriptor(unquote(yytext()))); yybegin(AfterConstructor);
          }
        case 39: break;
        case 4: 
          { topSink().literal(unquote(yytext())); yybegin(AfterSimple);
          }
        case 40: break;
        case 5: 
          { topSink().use(lookupName(yytext())); yybegin(AfterSimple);
          }
        case 41: break;
        case 6: 
          { yybegin(BeforeKey);
          }
        case 42: break;
        case 7: 
          { throw new Error("Expected ':' after property key!\n");
          }
        case 43: break;
        case 8: 
          { throw new Error("';' only allowed after finished property mapping!\n");
          }
        case 44: break;
        case 9: 
          { throw new Error("'}' only allowed after finished property mapping!\n");
          }
        case 45: break;
        case 10: 
          { throw new Error("'[' only allowed after constructor!\n");
          }
        case 46: break;
        case 11: 
          { Variable[] scope = popBinders(); pushConstruction(lookupDescriptor(unquote(yytext()))); yybegin(AfterConstructor); setNames(scope);
          }
        case 47: break;
        case 12: 
          { popBinders(); topSink().literal(unquote(yytext())); yybegin(AfterSimple);
          }
        case 48: break;
        case 13: 
          { Variable variable = lookupName(yytext()); popBinders(); topSink().use(variable); yybegin(AfterSimple);
          }
        case 49: break;
        case 14: 
          { popBinders(); yybegin(BeforeKey);
          }
        case 50: break;
        case 15: 
          { popProperty(); yybegin(BeforeKey);
          }
        case 51: break;
        case 16: 
          { popProperty(); yybegin(AfterProperties);
          }
        case 52: break;
        case 17: 
          { yybegin(BeforeArgument);
          }
        case 53: break;
        case 18: 
          { yybegin(AfterArguments);
          }
        case 54: break;
        case 19: 
          { pushNamedProperty(unquote(yytext())); yybegin(AfterKey);
          }
        case 55: break;
        case 20: 
          { pushVariableProperty(yytext()); yybegin(AfterKey);
          }
        case 56: break;
        case 21: 
          { throw new Error("Unexpected '{' where property key expected!\n");
          }
        case 57: break;
        case 22: 
          { popConstruction(); popProperty(); yybegin(BeforeKey);
          }
        case 58: break;
        case 23: 
          { popConstruction(); popProperty(); yybegin(AfterProperties);
          }
        case 59: break;
        case 24: 
          { popConstruction(); yybegin(BeforeArgument);
          }
        case 60: break;
        case 25: 
          { popConstruction(); yybegin(AfterArguments);
          }
        case 61: break;
        case 26: 
          { pushString(yytext()); yybegin(AfterFirstVariable);
          }
        case 62: break;
        case 27: 
          { yybegin(Before);
          }
        case 63: break;
        case 28: 
          { throw new Error("Unexpected constructor where binder expected!\n");
          }
        case 64: break;
        case 29: 
          { throw new Error("Unexpected " + yytext() + " literal where binder expected!\n");
          }
        case 65: break;
        case 30: 
          { String firstName = topString(); popString(); pushFirstBinder(firstName); yybegin(BeforeWithBinders);
          }
        case 66: break;
        case 31: 
          { String firstName = topString(); popString(); pushFirstBinder(firstName); pushFollowingBinder(yytext()); yybegin(AfterBinder);
          }
        case 67: break;
        case 32: 
          { throw new Error("Unexpected '{' where binder expected!\n");
          }
        case 68: break;
        case 33: 
          { topSink().use(lookupName(topString())); popString(); yybegin(BeforeArgument);
          }
        case 69: break;
        case 34: 
          { topSink().use(lookupName(topString())); popString(); yybegin(AfterArguments);
          }
        case 70: break;
        case 35: 
          { yybegin(BeforeWithBinders);
          }
        case 71: break;
        case 36: 
          { pushFollowingBinder(yytext());
          }
        case 72: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case AfterSimple: {
              yyclose(); return YYEOF;
            }
            case 89: break;
            case AfterConstructor: {
              popConstruction(); yyclose(); return YYEOF;
            }
            case 90: break;
            case AfterArguments: {
              popConstruction(); yyclose(); return YYEOF;
            }
            case 91: break;
            case AfterFirstVariable: {
              topSink().use(lookupName(topString())); popString(); yyclose(); return YYEOF;
            }
            case 92: break;
            default:
            return YYEOF;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
