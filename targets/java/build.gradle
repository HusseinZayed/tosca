// Copyright (c) 2015-2016 IBM Corporation.
/*
 *  CRSX Java target build file.
 */
import org.crsx.gradle.*

defaultTasks 'dist'


// --- Generate Java parsers based on Antlr specifications

apply plugin:'org.crsx.gradle.crsx4'
	
def crsx4src = '../../src'


repositories {
	flatDir { dirs 'dist' } // where to find crsx4 jars
	flatDir { dirs 'lib' }  // where to find crsx3.jar
	mavenCentral() // Where to find ANTLR
}

dependencies {
	crsx4  project.hasProperty('dev') ? files(crsx4src, "build") : 'org.crsx:crsx:4.0.0-ALPHA@jar' 
	crsx4 'org.crsx:crsx3@jar'
	crsx4 'org.antlr:antlr4:4.5'
}

def commonCore = {
	generatedFileDir = file('parsers/org/crsx/core')
	packageName = 'org.crsx.core'
}

task coreMetaParser(type: Antlr4Task, dependsOn: ':coreParsers') {
	configure commonCore
	description = 'Generate Java Core meta parser'
	lexer = file(crsx4src + '/core/CoreMetaLexer.g4')
	grammar = file(crsx4src + '/core/CoreMetaParser.g4')
	superClass = 'org.crsx.antlr.Crsx3Parser'
}

task coreTermParser(type: Antlr4Task, dependsOn: ':coreParsers') {
	configure commonCore
	description = 'Generate Java Core term parser'
	grammar = file(crsx4src + '/core/CoreTerm.g4')
}

task crsxMetaParser(type: Antlr4Task, dependsOn: ':crsxParsers') {
	description = 'Generate Java Crsx meta parser'
	lexer = file(crsx4src + '/parser/CrsxMetaLexer.g4')
	grammar = file(crsx4src + '/parser/CrsxMetaParser.g4')
	generatedFileDir = file('parsers/org/crsx/parser')
	packageName = 'org.crsx.parser'
	superClass = 'org.crsx.antlr.Crsx3Parser'
}

task crsxTermParser(type: Antlr4Task, , dependsOn: ':crsxParsers') {
	description = 'Generate Java Crsx term parser'
	grammar = file(crsx4src + '/parser/CrsxTerm.g4')
	generatedFileDir = file('parsers/org/crsx/parser')
	packageName = 'org.crsx.parser'
}

task antlrMetaParser(type: Antlr4Task) {
	description = 'Generate Antlr4 Java meta parser'
	lexer = file(crsx4src + '/pg/ANTLRMetaLexer.g4')
	grammar = file(crsx4src + '/pg/ANTLRMeta.g4')
	generatedFileDir = file('parsers/org/crsx/antlr')
	packageName = 'org.crsx.antlr'
	superClass = 'org.crsx.antlr.Crsx3Parser'
}

task antlrAntlrTermParser(type: Antlr4Task) {
	description = 'Generate Antlr4 Java term parser.'
	lexer = file(crsx4src + '/pg/ANTLRTermLexer.g4')
	grammar = file(crsx4src + '/pg/ANTLRTerm.g4')
	generatedFileDir = file('parsers/org/crsx/antlr')
	packageName = 'org.crsx.antlr'
}


task textMetaParser(type: Antlr4Task, dependsOn: ':textParsers') {
	description = 'Generate Java Text meta parser'
	lexer = file(crsx4src + '/text/Text4MetaLexer.g4')
	grammar = file(crsx4src + '/text/Text4MetaParser.g4')
	generatedFileDir = file('parsers/org/crsx/text')
	packageName = 'org.crsx.text'
	superClass = 'org.crsx.antlr.Crsx3Parser'
}

task textTermParser(type: Antlr4Task, dependsOn: ':textParsers') {
	description = 'Generate Java Text term parser'
	grammar = file(crsx4src + '/text/Text4Term.g4')
	generatedFileDir = file('parsers/org/crsx/text')
	packageName = 'org.crsx.text'
}
	
//-- Meta task to build all parsers.
task buildParsers(
	description: "Generate Java meta and term parsers for Crsx, Core and Text",
    dependsOn: ['coreMetaParser', 'coreTermParser', 'crsxMetaParser', 'crsxTermParser',
	            'antlrMetaParser', 'antlrAntlrTermParser', 'textMetaParser', 'textTermParser'])
	
	
// -- Generate the crsx4 compiler from .crs4 source code.
	
task compileCrsx4(type: Crsx4Task) {
	description = "Compile Crsx4 to Java source files."
	sources     = fileTree(dir: crsx4src, include: ['core/*.crs4', 'parser/*.crs4', 'text/*.crs4', 'std/*.crs4', 'cg/*.crs4', '*.crs4', 'test/*.crs4'])
	outputDir   = project.hasProperty('crsx3') ? file('compiler/org/crsx/compiler') : file('compiler')
	packageName = project.hasProperty('crsx3') ? 'org.crsx.compiler' : 'org.crsx.compiler'
	usecompiler = !project.hasProperty('crsx3')
}
	
// --- Java compilation and packaging

apply plugin:'java'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
	
	dependsOn 'buildParsers'
	dependsOn 'compileCrsx4'
}

//clean.dependsOn cleanBuildCrsxParsers
//clean.dependsOn cleanBuildAntlrParsers

group = 'org.crsx'
version = '4.0.0-SNAPSHOT'

sourceSets {
    main {
        java {
            srcDir 'runtime'
            srcDir 'parsers'
            srcDir 'compiler'
        }
		
		// Include CRSX4 source code for interpreter mode. Temporary.
		resources {
			srcDir '../../src'
			include '**/*.crs'
		}
    }
}

dependencies {
    compile 'org.crsx:crsx3@jar'
	compile 'org.antlr:antlr4:4.5'
}

jar {
	baseName 'crsx'
	manifest {
		attributes("Main-Class" : "org.crsx.Crsx", "Class-Path" : "../lib/crsx3.jar ../lib/antlr-runtime-4.5.jar")
	}
}

// ---- Snapshot Distribution jar

task snapshot(type: Copy, dependsOn: jar) {
	description "Generate distribution jar."
	from jar
	into project.file('dist')
}

task cleanDist(overwrite:true) {}
