// Copyright (c) 2015 IBM Corporation.
/*
 *  CRSX Java target build file.
 */
import org.crsx.gradle.*

defaultTasks 'dist'

// --- Script configuration
//

buildscript {
	repositories { flatDir { dirs '../../gradle/' } }// to find crsx4-gradle-plugin.jar
	dependencies { classpath 'org.crsx.gradle:crsx4-gradle-plugin:1.+' }
}

// -- Build the term and meta parsers
//    3 set of parsers are generated: Crsx4, Core Crsx and Antlr
project(':parsers') {
	// Note: the current directory is now 'parsers'
	
	apply plugin:'org.crsx.gradle.crsx4'
	
	repositories {
		flatDir { dirs '../dist' } // for crsx4.jar
		flatDir { dirs '../lib' }  // for crsx3.jar
		mavenCentral()
	}
	
	def srcDir = '../../../src'
	def buildDir = '../build'
	
	dependencies {
		crsx4  project.hasProperty('dev') ? files(srcDir, buildDir) : 'org.crsx:crsx:4.0+@jar' 
		crsx4 'org.crsx:crsx3@jar'
		crsx4 'org.antlr:antlr4:4.5'
	}
	
	task coreMetaParser(type: Antlr4Task) {
        description = 'Generate Java Core meta parser'
        lexer = file(srcDir + '/core/CoreMetaLexer.g4')
        grammar = file(srcDir + '/core/CoreMetaParser.g4')
        generatedFileDir = file('org/crsx/core')
        packageName = 'org.crsx.core'
        superClass = 'org.crsx.antlr.Crsx3Parser'
    }
    
    task coreTermParser(type: Antlr4Task) {
        description = 'Generate Java Core term parser'   
        grammar = file(srcDir + '/core/CoreTerm.g4')
        generatedFileDir = file('org/crsx/core')
        packageName = 'org.crsx.core'
    }
	
	task crsxMetaParser(type: Antlr4Task) {
	    description = 'Generate Java Crsx meta parser'
		lexer = file(srcDir + '/parser/CrsxMetaLexer.g4')
		grammar = file(srcDir + '/parser/CrsxMetaParser.g4')
		generatedFileDir = file('org/crsx/parser')
		packageName = 'org.crsx.parser'
		superClass = 'org.crsx.antlr.Crsx3Parser'
	}
	
	task crsxTermParser(type: Antlr4Task) {
	    description = 'Generate Java Crsx term parser'   
		grammar = file(srcDir + '/parser/CrsxTerm.g4')
		generatedFileDir = file('org/crsx/parser')
		packageName = 'org.crsx.parser'
	}
	
	task antlrMetaParser(type: Antlr4Task) {
	    description = 'Generate Antlr4 Java meta parser'   
    	lexer = file(srcDir + '/pg/ANTLRMetaLexer.g4')
		grammar = file(srcDir + '/pg/ANTLRMeta.g4')
		generatedFileDir = file('org/crsx/antlr')
		packageName = 'org.crsx.antlr'
		superClass = 'org.crsx.antlr.Crsx3Parser'
	}
	
	task antlrAntlrTermParser(type: Antlr4Task) {
	    description = 'Generate Antlr4 Java term parser.'  
		lexer = file(srcDir + '/pg/ANTLRTermLexer.g4')
		grammar = file(srcDir + '/pg/ANTLRTerm.g4')
		generatedFileDir = file('org/crsx/antlr')
		packageName = 'org.crsx.antlr'
	}
	
	//-- Meta task to build all parsers.
	task buildParsers(dependsOn: ['coreMetaParser', 'coreTermParser', 'crsxMetaParser', 'crsxTermParser', 'antlrMetaParser', 'antlrAntlrTermParser']) 
}

project(':compiler') {
	apply plugin:'org.crsx.gradle.crsx4'
	
	repositories {
		flatDir { dirs '../dist' } // crsx4
		flatDir { dirs '../lib' }  // crsx3
		mavenCentral()
	}
	
	dependencies {
		crsx4 files('../../../src')   // the interpreter always uses the development rules
		crsx4 files('../build')       // with the current parser. 
	//	crsx4 'org.crsx:crsx:4.0.0-ALPHA@jar' 
		crsx4 'org.crsx:crsx3@jar'
		crsx4 'org.antlr:antlr4:4.5'
	}
	
	crsx4 {
		sources = fileTree(dir: '../../../src', include: '**/*.crs', exclude: ['resolver.crs', '**/pg/*.crs', 'text/*.crs'])
		outputDir = file('org/crsx/compiler')
		packageName = 'org.crsx.compiler'
	}	
}

// --- Java compilation/packaging

apply plugin:'java'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
	
	dependsOn ':parsers:buildParsers'
	//dependsOn ':compiler:crsx4'
}

//clean.dependsOn cleanBuildCrsxParsers
//clean.dependsOn cleanBuildAntlrParsers

group = 'org.crsx'
version = '4.0.0-SNAPSHOT'

sourceSets {
    main {
        java {
            srcDir 'runtime'
            srcDir 'parsers'
            srcDir 'compiler'
        }
		
		// Include CRSX4 source code for interpreter mode.
		resources {
			srcDir '../../src'
			include '**/*.crs'
		}
    }
}

repositories {
    flatDir { dirs "lib"}
    mavenCentral()
}

dependencies {
    compile 'org.crsx:crsx3@jar'
	compile 'org.antlr:antlr4:4.5'
}

jar {
	manifest {
		attributes("Main-Class" : "org.crsx.Crsx", "Class-Path" : "../lib/crsx3.jar ../lib/antlr-runtime-4.5.jar")
	}
}

// ---- Distribution jar

task dist(type: Copy, dependsOn: jar) {
	description "Generate distribution jar."
	from jar
	into project.file('dist')
}
task cleanDist(overwrite:true) {}
