// Copyright (c) 2015 IBM Corporation.
/*
 *  CRSX Java target build file.
 */
import org.crsx.gradle.*


defaultTasks 'dist'

// --- Script configuration
//

buildscript {
	repositories { flatDir { dirs '../../gradle/' } // to find crsx4-gradle-plugin.jar
	}
	dependencies { classpath 'org.crsx.gradle:crsx4-gradle-plugin:1.+' }
}

//
project(':parsers')
{
	// Note: the current directory is now 'parsers'
	
	apply plugin:'org.crsx.gradle.crsx4'
	
	repositories {
		flatDir { dirs '../dist' } // crsx4
		flatDir { dirs '../lib' }  // crsx3
		mavenCentral()
	}
	
	dependencies {
		crsx4 'org.crsx:crsx:4.0.0-ALPHA@jar'
		crsx4 'org.crsx:crsx3@jar'
		crsx4 'org.antlr:antlr4:4.5'
	}
	
	task crsxPG4(dependsOn:'antlrAntlr4', type: PG4Task) {
		source = file('../../../src/parser/Crsx.g4')
		generatedFileDir = file('../build/pg4')
		sort = false
		metaPrefix = '##'
	}
	
	task crsxMetaAntlr4(dependsOn: 'crsxPG4', type: Antlr4Task) {
		lexer = file('../build/pg4/CrsxMetaLexer.g4')
		grammar = file('../build/pg4/CrsxMetaParser.g4')
		generatedFileDir = file('org/crsx/parser')
		packageName = 'org.crsx.parser'
		superClass = 'org.crsx.pg.Crsx3Parser'
	}
	
	task crsxTermAntlr4(dependsOn: 'crsxPG4', type: Antlr4Task) {
		grammar = file('../build/pg4/CrsxTerm.g4')
		generatedFileDir = file('org/crsx/parser')
		packageName = 'org.crsx.parser'
	}
	
	task antlrAntlr4(type: Antlr4Task) {
		lexer = file('../../../src/pg/ANTLRMetaLexer.g4')
		grammar = file('../../../src/pg/ANTLRMeta.g4')
		generatedFileDir = file('org/crsx/pg')
		packageName = 'org.crsx.pg'
		superClass = 'org.crsx.pg.Crsx3Parser'
	}
	
	
	task antlrTermAntlr4(type: Antlr4Task) {
		lexer = file('../../../src/pg/ANTLRTermLexer.g4')
		grammar = file('../../../src/pg/ANTLRTerm.g4')
		generatedFileDir = file('org/crsx/pg')
		packageName = 'org.crsx.pg'
	}
	
	task buildParsers(dependsOn: ['antlrAntlr4', 'antlrTermAntlr4', 'crsxMetaAntlr4', 'crsxTermAntlr4'])

}

project(':compiler')
{
	apply plugin:'org.crsx.gradle.crsx4'
	
	repositories {
		flatDir { dirs '../dist' } // crsx4
		flatDir { dirs '../lib' }  // crsx3
		mavenCentral()
	}
	
	dependencies {
		crsx4 'org.crsx:crsx:4.0.0-SNAPSHOT@jar'
		crsx4 'org.crsx:crsx3@jar'
		crsx4 'org.antlr:antlr4:4.5'
	}
	
	crsx4 {
		sources = fileTree(dir: '../../../src', include: '**/*.crs', exclude: ['resolver.crs', '**/pg/*.crs', 'text/*.crs'])
		outputDir = file('org/crsx/compiler')
		packageName = 'org.crsx.compiler'
	}	
}

// --- Java compilation/packaging

apply plugin:'java'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
	
	dependsOn ':parsers:buildParsers'
	dependsOn ':compiler:crsx4'
}

//clean.dependsOn cleanBuildCrsxParsers
//clean.dependsOn cleanBuildAntlrParsers

group = 'org.crsx'
version = '4.0.0-SNAPSHOT'

sourceSets {
    main {
        java {
            srcDir 'runtime'
            srcDir 'parsers'
            srcDir 'compiler'
        }
		
		// Include CRSX4 source code for interpreter mode.
		resources {
			srcDir '../../src'
			include '**/*.crs'
		}
    }
}

repositories {
    flatDir { dirs "lib"}
    mavenCentral()
}

dependencies {
    compile 'org.crsx:crsx3@jar'
	compile 'org.antlr:antlr4:4.5'
}

jar {
	manifest {
		attributes("Main-Class" : "org.crsx.Crsx", "Class-Path" : "../lib/crsx3.jar ../lib/antlr-runtime-4.5.jar")
	}
}

// ---- Distribution jar

task dist(type: Copy, dependsOn: jar) {
	description "Generate distribution jar."
	from jar
	into project.file('dist')
}
task cleanDist(overwrite:true) {}
